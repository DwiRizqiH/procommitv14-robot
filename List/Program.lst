
AVRASM ver. 2.1.30  d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm Mon Oct 28 11:10:16 2024

d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1083): warning: Register r4 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1084): warning: Register r5 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1085): warning: Register r6 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1086): warning: Register r7 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1087): warning: Register r8 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1088): warning: Register r9 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1089): warning: Register r10 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1090): warning: Register r11 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1091): warning: Register r13 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1092): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 11.059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hitung=R4
                 	.DEF _hitung_msb=R5
                 	.DEF _nadc7=R6
                 	.DEF _nadc7_msb=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _k=R10
                 	.DEF _k_msb=R11
                 	.DEF _pos_servo1=R13
                 	.DEF _pos_servo2=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 015a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0672 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0690 	JMP  _timer0_comp_isr
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x6:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1134): warning: .cseg .db misalignment - padding zero byte
000035 000a      	.DB  0xA
                 _0x7:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1136): warning: .cseg .db misalignment - padding zero byte
000036 0064      	.DB  0x64
                 _0x8:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1138): warning: .cseg .db misalignment - padding zero byte
000037 00c8      	.DB  0xC8
                 _0x9:
000038 ff60      	.DB  0x60,0xFF
                 _0xA:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1142): warning: .cseg .db misalignment - padding zero byte
000039 00c8      	.DB  0xC8
                 _0xB:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1144): warning: .cseg .db misalignment - padding zero byte
00003a 00dc      	.DB  0xDC
                 _0xC:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1146): warning: .cseg .db misalignment - padding zero byte
00003b 0050      	.DB  0x50
                 _0xD:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1148): warning: .cseg .db misalignment - padding zero byte
00003c 00a5      	.DB  0xA5
                 _0xE:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1150): warning: .cseg .db misalignment - padding zero byte
00003d 00aa      	.DB  0xAA
                 _0xF:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1152): warning: .cseg .db misalignment - padding zero byte
00003e 0005      	.DB  0x5
                 _0x10:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1154): warning: .cseg .db misalignment - padding zero byte
00003f 0055      	.DB  0x55
                 _0x0:
000040 6425
000041 6425
000042 6425
000043 6425      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x25,0x64
000044 6425
000045 6425
000046 6425
000047 4200      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x0,0x42
000048 6361
000049 2061
00004a 694c
00004b 656e      	.DB  0x61,0x63,0x61,0x20,0x4C,0x69,0x6E,0x65
00004c 7300
00004d 6e65
00004e 6f73
00004f 3a72      	.DB  0x0,0x73,0x65,0x6E,0x73,0x6F,0x72,0x3A
000050 6425
000051 3d20
000052 2520
000053 2064      	.DB  0x25,0x64,0x20,0x3D,0x20,0x25,0x64,0x20
000054 0020
000055 6142
000056 6163
000057 4220      	.DB  0x20,0x0,0x42,0x61,0x63,0x61,0x20,0x42
000058 6361
000059 676b
00005a 6f72
00005b 6e75      	.DB  0x61,0x63,0x6B,0x67,0x72,0x6F,0x75,0x6E
00005c 0064
00005d 6543
00005e 746e
00005f 7265      	.DB  0x64,0x0,0x43,0x65,0x6E,0x74,0x65,0x72
000060 5020
000061 696f
000062 746e
000063 2020      	.DB  0x20,0x50,0x6F,0x69,0x6E,0x74,0x20,0x20
000064 2020
000065 7300
000066 6e65
000067 6f73      	.DB  0x20,0x20,0x0,0x73,0x65,0x6E,0x73,0x6F
000068 3a72
000069 6425
00006a 2d20
00006b 3e2d      	.DB  0x72,0x3A,0x25,0x64,0x20,0x2D,0x2D,0x3E
00006c 2520
00006d 2064
00006e 0020
00006f 6425      	.DB  0x20,0x25,0x64,0x20,0x20,0x0,0x25,0x64
000070 2020
000071 0020
000072 654d
000073 756e      	.DB  0x20,0x20,0x20,0x0,0x4D,0x65,0x6E,0x75
000074 4300
000075 6c61
000076 6269
000077 6172      	.DB  0x0,0x43,0x61,0x6C,0x69,0x62,0x72,0x61
000078 6974
000079 6e6f
00007a 5200
00007b 6e75      	.DB  0x74,0x69,0x6F,0x6E,0x0,0x52,0x75,0x6E
00007c 4220
00007d 746f
00007e 5300
00007f 6e65      	.DB  0x20,0x42,0x6F,0x74,0x0,0x53,0x65,0x6E
000080 2073
000081 6157
000082 6e72
000083 0061      	.DB  0x73,0x20,0x57,0x61,0x72,0x6E,0x61,0x0
000084 614d
000085 2070
000086 6942
000087 7572      	.DB  0x4D,0x61,0x70,0x20,0x42,0x69,0x72,0x75
000088 4d00
000089 7061
00008a 4d20
00008b 7265      	.DB  0x0,0x4D,0x61,0x70,0x20,0x4D,0x65,0x72
00008c 6861
00008d 4d00
00008e 746f
00008f 726f      	.DB  0x61,0x68,0x0,0x4D,0x6F,0x74,0x6F,0x72
000090 4200
000091 7475
000092 6f74
000093 006e      	.DB  0x0,0x42,0x75,0x74,0x74,0x6F,0x6E,0x0
000094 6143
000095 6970
000096 0074
000097 6c43      	.DB  0x43,0x61,0x70,0x69,0x74,0x0,0x43,0x6C
000098 6369
000099 206b
00009a 2032
00009b 6f74      	.DB  0x69,0x63,0x6B,0x20,0x32,0x20,0x74,0x6F
00009c 7320
00009d 6174
00009e 7472
00009f 5200      	.DB  0x20,0x73,0x74,0x61,0x72,0x74,0x0,0x52
0000a0 6e75
0000a1 696e
0000a2 676e
0000a3 2e2e      	.DB  0x75,0x6E,0x6E,0x69,0x6E,0x67,0x2E,0x2E
0000a4 002e
0000a5 6554
0000a6 7473
0000a7 4d20      	.DB  0x2E,0x0,0x54,0x65,0x73,0x74,0x20,0x4D
0000a8 746f
0000a9 726f
0000aa 2b00
0000ab 3031      	.DB  0x6F,0x74,0x6F,0x72,0x0,0x2B,0x31,0x30
0000ac 3030
0000ad 2b20
0000ae 3031
0000af 3030      	.DB  0x30,0x30,0x20,0x2B,0x31,0x30,0x30,0x30
0000b0 2d00
0000b1 3031
0000b2 3030
0000b3 2d20      	.DB  0x0,0x2D,0x31,0x30,0x30,0x30,0x20,0x2D
0000b4 3031
0000b5 3030
0000b6 2b00
0000b7 3031      	.DB  0x31,0x30,0x30,0x30,0x0,0x2B,0x31,0x30
0000b8 3030
0000b9 2d20
0000ba 3031
0000bb 3030      	.DB  0x30,0x30,0x20,0x2D,0x31,0x30,0x30,0x30
0000bc 2d00
0000bd 3031
0000be 3030
0000bf 2b20      	.DB  0x0,0x2D,0x31,0x30,0x30,0x30,0x20,0x2B
0000c0 3031
0000c1 3030
0000c2 4300
0000c3 696c      	.DB  0x31,0x30,0x30,0x30,0x0,0x43,0x6C,0x69
0000c4 6b63
0000c5 3120
0000c6 7420
0000c7 206f      	.DB  0x63,0x6B,0x20,0x31,0x20,0x74,0x6F,0x20
0000c8 7865
0000c9 7469
0000ca 7400
0000cb 6d6f      	.DB  0x65,0x78,0x69,0x74,0x0,0x74,0x6F,0x6D
0000cc 6f62
0000cd 206c
0000ce 203d
0000cf 2031      	.DB  0x62,0x6F,0x6C,0x20,0x3D,0x20,0x31,0x20
0000d0 2020
0000d1 2020
0000d2 7400
0000d3 6d6f      	.DB  0x20,0x20,0x20,0x20,0x0,0x74,0x6F,0x6D
0000d4 6f62
0000d5 206c
0000d6 203d
0000d7 2032      	.DB  0x62,0x6F,0x6C,0x20,0x3D,0x20,0x32,0x20
0000d8 2020
0000d9 2020
0000da 7400
0000db 6d6f      	.DB  0x20,0x20,0x20,0x20,0x0,0x74,0x6F,0x6D
0000dc 6f62
0000dd 206c
0000de 203d
0000df 2033      	.DB  0x62,0x6F,0x6C,0x20,0x3D,0x20,0x33,0x20
0000e0 2020
0000e1 2020
0000e2 7400
0000e3 6d6f      	.DB  0x20,0x20,0x20,0x20,0x0,0x74,0x6F,0x6D
0000e4 6f62
0000e5 206c
0000e6 203d
0000e7 2034      	.DB  0x62,0x6F,0x6C,0x20,0x3D,0x20,0x34,0x20
0000e8 2020
0000e9 2020
0000ea 5700
0000eb 7261      	.DB  0x20,0x20,0x20,0x20,0x0,0x57,0x61,0x72
0000ec 616e
0000ed 003a
0000ee 7845
0000ef 7469      	.DB  0x6E,0x61,0x3A,0x0,0x45,0x78,0x69,0x74
0000f0 6e69
0000f1 2e67
0000f2 2e2e
0000f3 5400      	.DB  0x69,0x6E,0x67,0x2E,0x2E,0x2E,0x0,0x54
0000f4 7365
0000f5 2074
0000f6 6143
0000f7 6970      	.DB  0x65,0x73,0x74,0x20,0x43,0x61,0x70,0x69
0000f8 0074
0000f9 6143
0000fa 6970
0000fb 3a74      	.DB  0x74,0x0,0x43,0x61,0x70,0x69,0x74,0x3A
0000fc 3e20
0000fd 3c20
0000fe 4300
0000ff 7061      	.DB  0x20,0x3E,0x20,0x3C,0x0,0x43,0x61,0x70
000100 7469
000101 203a
000102 203c
000103 003e      	.DB  0x69,0x74,0x3A,0x20,0x3C,0x20,0x3E,0x0
000104 6143
000105 6970
000106 3a74
000107 5c20      	.DB  0x43,0x61,0x70,0x69,0x74,0x3A,0x20,0x5C
000108 002f
000109 6143
00010a 6970
00010b 3a74      	.DB  0x2F,0x0,0x43,0x61,0x70,0x69,0x74,0x3A
00010c 2f20
00010d 005c
00010e 6f48
00010f 646c      	.DB  0x20,0x2F,0x5C,0x0,0x48,0x6F,0x6C,0x64
000110 3120
000111 7420
000112 206f
000113 7865      	.DB  0x20,0x31,0x20,0x74,0x6F,0x20,0x65,0x78
000114 7469
000115 5800
000116 0044
000117 2020      	.DB  0x69,0x74,0x0,0x58,0x44,0x0,0x20,0x20
000118 2020
000119 4c20
00011a 4745
00011b 4f49      	.DB  0x20,0x20,0x20,0x4C,0x45,0x47,0x49,0x4F
00011c 204e
00011d 2020
00011e 2020
00011f 2000      	.DB  0x4E,0x20,0x20,0x20,0x20,0x20,0x0,0x20
000120 414d
000121 204e
000122 2034
000123 4f4a      	.DB  0x4D,0x41,0x4E,0x20,0x34,0x20,0x4A,0x4F
000124 424d
000125 4e41
000126 2047
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1213): warning: .cseg .db misalignment - padding zero byte
000127 0000      	.DB  0x4D,0x42,0x41,0x4E,0x47,0x20,0x0
                 _0x2040060:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1215): warning: .cseg .db misalignment - padding zero byte
000128 0001      	.DB  0x1
                 _0x2040000:
000129 4e2d
00012a 4e41
00012b 4900
00012c 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1218): warning: .cseg .db misalignment - padding zero byte
00012d 0000      	.DB  0x0
                 _0x2060003:
00012e c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00012f 0004      	.DW  0x04
000130 0004      	.DW  0x04
000131 0066      	.DW  __REG_VARS*2
                 
000132 0001      	.DW  0x01
000133 0193      	.DW  _kp
000134 006a      	.DW  _0x6*2
                 
000135 0001      	.DW  0x01
000136 0195      	.DW  _kd
000137 006c      	.DW  _0x7*2
                 
000138 0001      	.DW  0x01
000139 0197      	.DW  _SPEED
00013a 006e      	.DW  _0x8*2
                 
00013b 0002      	.DW  0x02
00013c 0199      	.DW  _MIN_SPEED
00013d 0070      	.DW  _0x9*2
                 
00013e 0001      	.DW  0x01
00013f 019b      	.DW  _MAX_SPEED
000140 0072      	.DW  _0xA*2
                 
000141 0001      	.DW  0x01
000142 01a1      	.DW  _maxHijau
000143 0074      	.DW  _0xB*2
                 
000144 0001      	.DW  0x01
000145 01a3      	.DW  _maxKuning
000146 0076      	.DW  _0xC*2
                 
000147 0001      	.DW  0x01
000148 01a5      	.DW  _maxMerah
000149 0078      	.DW  _0xD*2
                 
00014a 0001      	.DW  0x01
00014b 01a7      	.DW  _minHijau
00014c 007a      	.DW  _0xE*2
                 
00014d 0001      	.DW  0x01
00014e 01a9      	.DW  _minKuning
00014f 007c      	.DW  _0xF*2
                 
000150 0001      	.DW  0x01
000151 01ab      	.DW  _minMerah
000152 007e      	.DW  _0x10*2
                 
000153 0001      	.DW  0x01
000154 01ad      	.DW  __seed_G102
000155 0250      	.DW  _0x2040060*2
                 
000156 0002      	.DW  0x02
000157 01b1      	.DW  __base_y_G103
000158 025c      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
000159 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00015a 94f8      	CLI
00015b 27ee      	CLR  R30
00015c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00015d e0f1      	LDI  R31,1
00015e bffb      	OUT  GICR,R31
00015f bfeb      	OUT  GICR,R30
000160 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000161 e1f8      	LDI  R31,0x18
000162 bdf1      	OUT  WDTCR,R31
000163 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000164 e08d      	LDI  R24,(14-2)+1
000165 e0a2      	LDI  R26,2
000166 27bb      	CLR  R27
                 __CLEAR_REG:
000167 93ed      	ST   X+,R30
000168 958a      	DEC  R24
000169 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00016a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00016b e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00016c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00016d 93ed      	ST   X+,R30
00016e 9701      	SBIW R24,1
00016f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000170 e5ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000171 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000172 9185      	LPM  R24,Z+
000173 9195      	LPM  R25,Z+
000174 9700      	SBIW R24,0
000175 f061      	BREQ __GLOBAL_INI_END
000176 91a5      	LPM  R26,Z+
000177 91b5      	LPM  R27,Z+
000178 9005      	LPM  R0,Z+
000179 9015      	LPM  R1,Z+
00017a 01bf      	MOVW R22,R30
00017b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00017c 9005      	LPM  R0,Z+
00017d 920d      	ST   X+,R0
00017e 9701      	SBIW R24,1
00017f f7e1      	BRNE __GLOBAL_INI_LOOP
000180 01fb      	MOVW R30,R22
000181 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000182 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000183 bfed      	OUT  SPL,R30
000184 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000185 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000186 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000187 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000188 940c 0691 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                    .equ __lcd_port=0x18 ;PORTB
                 ; 0000 0029 #endasm
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0030 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0031 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
00018a 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00018b 81e8      	LD   R30,Y
00018c 66e0      	ORI  R30,LOW(0x60)
00018d b9e7      	OUT  0x7,R30
                 ; 0000 0032 // Start the AD conversion
                 ; 0000 0033 ADCSRA|=0x40;
00018e 9a36      	SBI  0x6,6
                 ; 0000 0034 // Wait for the AD conversion to complete
                 ; 0000 0035 while ((ADCSRA & 0x10)==0);
                 _0x3:
00018f 9b34      	SBIS 0x6,4
000190 cffe      	RJMP _0x3
                 ; 0000 0036 ADCSRA|=0x10;
000191 9a34      	SBI  0x6,4
                 ; 0000 0037 return ADCH;
000192 b1e5      	IN   R30,0x5
000193 9621      	ADIW R28,1
000194 9508      	RET
                 ; 0000 0038 }
                 ; .FEND
                 ;int hitung = 0;
                 ;unsigned int nadc7 = 0;
                 ;char buff[33];
                 ;int i, k;
                 ;unsigned char pos_servo1, pos_servo2, a;
                 ;int count_btn = 0;
                 ;int count_child_btn = 0;
                 ;bool isChildSelect = false;
                 ;bool isTestTombol = false;
                 ;eeprom int garis[7], back[7], tengah[7];
                 ;char sen[7];
                 ;int sensor;
                 ;int error = 0;
                 ;int lastError = 0;
                 ;int kp = 10;
                 
                 	.DSEG
                 ;int kd = 100;
                 ;int SPEED = 200;
                 ;int MIN_SPEED = -160;
                 ;int MAX_SPEED = 200;
                 ;int count = 0;
                 ;int second = 0;
                 ;int positionD = 0;
                 ;eeprom int mapMirror; // 0 - map/lintasan bagian biru, 1 - map/lintasan bagian m ...
                 ;int maxHijau = 220;
                 ;int maxKuning = 80;
                 ;int maxMerah = 165;
                 ;int minHijau = 170;
                 ;int minKuning = 5;
                 ;int minMerah = 85;
                 ;void delay(int ms)
                 ; 0000 0059 {
                 
                 	.CSEG
                 _delay:
                 ; .FSTART _delay
                 ;delay_ms(ms);
000195 93ba      	ST   -Y,R27
000196 93aa      	ST   -Y,R26
                 ;	ms -> Y+0
000197 81a8      	LD   R26,Y
000198 81b9      	LDD  R27,Y+1
000199 940e 0cad 	CALL _delay_ms
00019b c183      	RJMP _0x20C000A
                 ; .FEND
                 ;void lcd_kedip(int ulangi)
                 ;for(i = 0; i < ulangi; i++)
                 ;	ulangi -> Y+0
                 ;lampu=0;
                 ;delay_ms(100);
                 ;lampu=1;
                 ;delay_ms(100);
                 ;void konvert_logic()
                 ; 0000 005A {
                 _konvert_logic:
                 ; .FSTART _konvert_logic
                 ;for(i = 0; i < 7; i++)
00019c 2488      	CLR  R8
00019d 2499      	CLR  R9
                 _0x19:
00019e 940e 09f5 	CALL SUBOPT_0x0
0001a0 f4d4      	BRGE _0x1A
                 ;if(read_adc(i) > tengah[i]) {
0001a1 940e 09fa 	CALL SUBOPT_0x1
0001a3 17ea      	CP   R30,R26
0001a4 07fb      	CPC  R31,R27
0001a5 f434      	BRGE _0x1B
                 ;sen[i]=1;
0001a6 e8a6      	LDI  R26,LOW(_sen)
0001a7 e0b1      	LDI  R27,HIGH(_sen)
0001a8 0da8      	ADD  R26,R8
0001a9 1db9      	ADC  R27,R9
0001aa e0e1      	LDI  R30,LOW(1)
0001ab c00a      	RJMP _0x14E
                 ;else if(read_adc(i) < tengah[i]) {
                 _0x1B:
0001ac 940e 09fa 	CALL SUBOPT_0x1
0001ae 17ae      	CP   R26,R30
0001af 07bf      	CPC  R27,R31
0001b0 f434      	BRGE _0x1D
                 ;sen[i]=0;
0001b1 e8a6      	LDI  R26,LOW(_sen)
0001b2 e0b1      	LDI  R27,HIGH(_sen)
0001b3 0da8      	ADD  R26,R8
0001b4 1db9      	ADC  R27,R9
0001b5 e0e0      	LDI  R30,LOW(0)
                 _0x14E:
0001b6 93ec      	ST   X,R30
                 _0x1D:
0001b7 01f4      	MOVW R30,R8
0001b8 9631      	ADIW R30,1
0001b9 014f      	MOVW R8,R30
0001ba cfe3      	RJMP _0x19
                 _0x1A:
0001bb 9508      	RET
                 ; .FEND
                 ;void logika()
                 _logika:
                 ; .FSTART _logika
                 ;sensor = (sen[6] * 64) + (sen[5] * 32) + (sen[4] * 16) + (sen[3] * 8) + (sen[2]  ...
                +
0001bc 91a0 018c+LDS R26 , _sen + ( 6 )
                 	__GETB2MN _sen,6
0001be e4e0      	LDI  R30,LOW(64)
0001bf 9fea      	MUL  R30,R26
0001c0 01b0      	MOVW R22,R0
                +
0001c1 91a0 018b+LDS R26 , _sen + ( 5 )
                 	__GETB2MN _sen,5
0001c3 e2e0      	LDI  R30,LOW(32)
0001c4 940e 0a0a 	CALL SUBOPT_0x2
                +
0001c6 91a0 018a+LDS R26 , _sen + ( 4 )
                 	__GETB2MN _sen,4
0001c8 e1e0      	LDI  R30,LOW(16)
0001c9 940e 0a0a 	CALL SUBOPT_0x2
                +
0001cb 91a0 0189+LDS R26 , _sen + ( 3 )
                 	__GETB2MN _sen,3
0001cd e0e8      	LDI  R30,LOW(8)
0001ce 940e 0a0a 	CALL SUBOPT_0x2
                +
0001d0 91a0 0188+LDS R26 , _sen + ( 2 )
                 	__GETB2MN _sen,2
0001d2 e0e4      	LDI  R30,LOW(4)
0001d3 940e 0a0a 	CALL SUBOPT_0x2
                +
0001d5 91a0 0187+LDS R26 , _sen + ( 1 )
                 	__GETB2MN _sen,1
0001d7 e0e2      	LDI  R30,LOW(2)
0001d8 940e 0a0a 	CALL SUBOPT_0x2
0001da 91a0 0186 	LDS  R26,_sen
0001dc e0e1      	LDI  R30,LOW(1)
0001dd 9fea      	MUL  R30,R26
0001de 01f0      	MOVW R30,R0
0001df 0fe6      	ADD  R30,R22
0001e0 1ff7      	ADC  R31,R23
0001e1 93e0 018d 	STS  _sensor,R30
0001e3 93f0 018e 	STS  _sensor+1,R31
0001e5 9508      	RET
                 ; .FEND
                 ;void cek_sensor()
                 _cek_sensor:
                 ; .FSTART _cek_sensor
                 ;konvert_logic();
0001e6 dfb5      	RCALL _konvert_logic
                 ;logika();
0001e7 dfd4      	RCALL _logika
0001e8 9508      	RET
                 ; .FEND
                 ;void display_sensor()
                 _display_sensor:
                 ; .FSTART _display_sensor
                 ;konvert_logic();
0001e9 dfb2      	RCALL _konvert_logic
                 ;lcd_gotoxy(9, 0);
0001ea e0e9      	LDI  R30,LOW(9)
0001eb 940e 0a0f 	CALL SUBOPT_0x3
                 ;sprintf(buff, "%d%d%d%d%d%d%d", sen[0] , sen[1] , sen[2], sen[3], sen[4], sen[5] ...
0001ed 940e 0a13 	CALL SUBOPT_0x4
                +
0001ef e8e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001f0 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001f1 93fa      	ST   -Y,R31
0001f2 93ea      	ST   -Y,R30
0001f3 91e0 0186 	LDS  R30,_sen
0001f5 940e 0a18 	CALL SUBOPT_0x5
                +
0001f7 91e0 0187+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
0001f9 940e 0a18 	CALL SUBOPT_0x5
                +
0001fb 91e0 0188+LDS R30 , _sen + ( 2 )
                 	__GETB1MN _sen,2
0001fd 940e 0a18 	CALL SUBOPT_0x5
                +
0001ff 91e0 0189+LDS R30 , _sen + ( 3 )
                 	__GETB1MN _sen,3
000201 940e 0a18 	CALL SUBOPT_0x5
                +
000203 91e0 018a+LDS R30 , _sen + ( 4 )
                 	__GETB1MN _sen,4
000205 940e 0a18 	CALL SUBOPT_0x5
                +
000207 91e0 018b+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
000209 940e 0a18 	CALL SUBOPT_0x5
                +
00020b 91e0 018c+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
00020d 940e 0a18 	CALL SUBOPT_0x5
00020f e18c      	LDI  R24,28
000210 940e 089f 	CALL _sprintf
000212 96a0      	ADIW R28,32
                 ;lcd_puts(buff);
000213 c459      	RJMP _0x20C0007
                 ; .FEND
                 ;void scan_garis()
                 _scan_garis:
                 ; .FSTART _scan_garis
                 ;for (i = 0; i < 7; i++)
000214 2488      	CLR  R8
000215 2499      	CLR  R9
                 _0x1F:
000216 940e 09f5 	CALL SUBOPT_0x0
000218 f4d4      	BRGE _0x20
                 ;garis[i] = read_adc(i);
000219 940e 0a1e 	CALL SUBOPT_0x6
00021b 0fea      	ADD  R30,R26
00021c 1ffb      	ADC  R31,R27
00021d 93ff      	PUSH R31
00021e 93ef      	PUSH R30
00021f 2da8      	MOV  R26,R8
000220 df69      	RCALL _read_adc
000221 91af      	POP  R26
000222 91bf      	POP  R27
000223 940e 0a24 	CALL SUBOPT_0x7
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Line");
                +
000225 e8af     +LDI R26 , LOW ( 2 * _0x0 + ( 15 ) )
000226 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW2FN _0x0,15
000227 940e 0a29 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, garis[i]);
000229 940e 0a31 	CALL SUBOPT_0x9
00022b 940e 0a1e 	CALL SUBOPT_0x6
00022d 940e 0a3b 	CALL SUBOPT_0xA
                 ;lcd_puts(buff);
                 ;lampu = 0;
                 ;delay_ms(100);
                 ;lampu = 1;
00022f 01f4      	MOVW R30,R8
000230 9631      	ADIW R30,1
000231 014f      	MOVW R8,R30
000232 cfe3      	RJMP _0x1F
                 _0x20:
000233 9508      	RET
                 ; .FEND
                 ;void scan_back()
                 _scan_back:
                 ; .FSTART _scan_back
                 ;for (i = 0; i < 7; i++)
000234 2488      	CLR  R8
000235 2499      	CLR  R9
                 _0x26:
000236 940e 09f5 	CALL SUBOPT_0x0
000238 f4d4      	BRGE _0x27
                 ;back[i] = read_adc(i);
000239 940e 0a52 	CALL SUBOPT_0xB
00023b 0fea      	ADD  R30,R26
00023c 1ffb      	ADC  R31,R27
00023d 93ff      	PUSH R31
00023e 93ef      	PUSH R30
00023f 2da8      	MOV  R26,R8
000240 df49      	RCALL _read_adc
000241 91af      	POP  R26
000242 91bf      	POP  R27
000243 940e 0a24 	CALL SUBOPT_0x7
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Background");
                +
000245 eaaa     +LDI R26 , LOW ( 2 * _0x0 + ( 42 ) )
000246 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 42 ) )
                 	__POINTW2FN _0x0,42
000247 940e 0a29 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, back[i]);
000249 940e 0a31 	CALL SUBOPT_0x9
00024b 940e 0a52 	CALL SUBOPT_0xB
00024d 940e 0a3b 	CALL SUBOPT_0xA
                 ;lcd_puts(buff);
                 ;lampu = 0;
                 ;delay_ms(100);
                 ;lampu = 1;
00024f 01f4      	MOVW R30,R8
000250 9631      	ADIW R30,1
000251 014f      	MOVW R8,R30
000252 cfe3      	RJMP _0x26
                 _0x27:
000253 9508      	RET
                 ; .FEND
                 ;void hit_tengah()
                 _hit_tengah:
                 ; .FSTART _hit_tengah
                 ;for (i = 0; i < 7; i++)
000254 2488      	CLR  R8
000255 2499      	CLR  R9
                 _0x2D:
000256 940e 09f5 	CALL SUBOPT_0x0
000258 f00c      	BRLT PC+2
000259 c044      	RJMP _0x2E
                 ;tengah[i] = (back[i] + garis[i]) / 2;
00025a 01f4      	MOVW R30,R8
00025b e1ac      	LDI  R26,LOW(_tengah)
00025c e0b0      	LDI  R27,HIGH(_tengah)
00025d 0fee      	LSL  R30
00025e 1fff      	ROL  R31
00025f 0fea      	ADD  R30,R26
000260 1ffb      	ADC  R31,R27
000261 01bf      	MOVW R22,R30
000262 940e 0a52 	CALL SUBOPT_0xB
000264 940e 0a58 	CALL SUBOPT_0xC
000266 010f      	MOVW R0,R30
000267 940e 0a1e 	CALL SUBOPT_0x6
000269 940e 0a58 	CALL SUBOPT_0xC
00026b 01d0      	MOVW R26,R0
00026c 0fae      	ADD  R26,R30
00026d 1fbf      	ADC  R27,R31
00026e e0e2      	LDI  R30,LOW(2)
00026f e0f0      	LDI  R31,HIGH(2)
000270 940e 0b79 	CALL __DIVW21
000272 01db      	MOVW R26,R22
000273 940e 0ba9 	CALL __EEPROMWRW
                 ;lcd_gotoxy(0, 0);
000275 e0e0      	LDI  R30,LOW(0)
000276 940e 0a0f 	CALL SUBOPT_0x3
                 ;lcd_putsf("Center Point    ");
                +
000278 ebaa     +LDI R26 , LOW ( 2 * _0x0 + ( 58 ) )
000279 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 58 ) )
                 	__POINTW2FN _0x0,58
00027a 940e 0a29 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d --> %d  ", i, tengah[i]);
                +
00027c eceb     +LDI R30 , LOW ( 2 * _0x0 + ( 75 ) )
00027d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 75 ) )
                 	__POINTW1FN _0x0,75
00027e 93fa      	ST   -Y,R31
00027f 93ea      	ST   -Y,R30
000280 01f4      	MOVW R30,R8
000281 940e 0b54 	CALL __CWD1
000283 940e 0b94 	CALL __PUTPARD1
000285 01f4      	MOVW R30,R8
000286 e1ac      	LDI  R26,LOW(_tengah)
000287 e0b0      	LDI  R27,HIGH(_tengah)
000288 0fee      	LSL  R30
000289 1fff      	ROL  R31
00028a 940e 0a58 	CALL SUBOPT_0xC
00028c 940e 0b54 	CALL __CWD1
00028e 940e 0b94 	CALL __PUTPARD1
000290 e088      	LDI  R24,8
000291 940e 089f 	CALL _sprintf
000293 962c      	ADIW R28,12
                 ;lcd_puts(buff);
000294 e6a0      	LDI  R26,LOW(_buff)
000295 e0b1      	LDI  R27,HIGH(_buff)
000296 940e 098e 	CALL _lcd_puts
                 ;lampu = 0;
000298 98c3      	CBI  0x18,3
                 ;lampu = 1;
000299 9ac3      	SBI  0x18,3
00029a 01f4      	MOVW R30,R8
00029b 9631      	ADIW R30,1
00029c 014f      	MOVW R8,R30
00029d cfb8      	RJMP _0x2D
                 _0x2E:
00029e 9508      	RET
                 ; .FEND
                 ;void cekdatasensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", garis[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 0);
                 ;sprintf(buff, " %d  ", back[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, " %d  ", tengah[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 1);
                 ;sprintf(buff, " %d  ", read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(200);
                 ;void maju(unsigned char ki, unsigned char ka)
                 ; 0000 005B {
                 _maju:
                 ; .FSTART _maju
                 ;pwmka = ka;
00029f 940e 0a5d 	CALL SUBOPT_0xD
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
0002a1 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
0002a2 9893      	CBI  0x12,3
                 ;PORTD.6 = 0;
0002a3 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
0002a4 9a97      	SBI  0x12,7
0002a5 c079      	RJMP _0x20C000A
                 ; .FEND
                 ;void mundur(unsigned char ki, unsigned char ka)
                 ;pwmka = ka;
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
                 ;PORTD.3 = 1;
                 ;PORTD.6 = 1;
                 ;PORTD.7 = 0;
                 ;void kanan(unsigned char ki, unsigned char ka)
                 _kanan:
                 ; .FSTART _kanan
                 ;pwmka = ka;
0002a6 940e 0a5d 	CALL SUBOPT_0xD
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
0002a8 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002a9 9a93      	SBI  0x12,3
                 ;PORTD.6 = 0;
0002aa 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
0002ab 9a97      	SBI  0x12,7
0002ac c072      	RJMP _0x20C000A
                 ; .FEND
                 ;void kiri(unsigned char ki, unsigned char ka)
                 _kiri:
                 ; .FSTART _kiri
                 ;pwmka = ka;
0002ad 940e 0a5d 	CALL SUBOPT_0xD
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
0002af 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
0002b0 9893      	CBI  0x12,3
                 ;PORTD.6 = 1;
0002b1 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
0002b2 9897      	CBI  0x12,7
0002b3 c06b      	RJMP _0x20C000A
                 ; .FEND
                 ;void setMotor(int ki, int ka)
                 _setMotor:
                 ; .FSTART _setMotor
                 ;pwmki = abs(ki);
0002b4 93ba      	ST   -Y,R27
0002b5 93aa      	ST   -Y,R26
                 ;	ki -> Y+2
                 ;	ka -> Y+0
0002b6 81aa      	LDD  R26,Y+2
0002b7 81bb      	LDD  R27,Y+2+1
0002b8 940e 08f4 	CALL _abs
0002ba bdfb      	OUT  0x2A+1,R31
0002bb bdea      	OUT  0x2A,R30
                 ;if (ki > 0)
0002bc 81aa      	LDD  R26,Y+2
0002bd 81bb      	LDD  R27,Y+2+1
0002be 940e 0bc2 	CALL __CPW02
0002c0 f41c      	BRGE _0x56
                 ;PORTD.2 = 1;
0002c1 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
0002c2 9893      	CBI  0x12,3
                 ;else
0002c3 c002      	RJMP _0x5B
                 _0x56:
                 ;PORTD.2 = 0;
0002c4 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002c5 9a93      	SBI  0x12,3
                 _0x5B:
                 ;pwmka = abs(ka);
0002c6 81a8      	LD   R26,Y
0002c7 81b9      	LDD  R27,Y+1
0002c8 940e 08f4 	CALL _abs
0002ca bdf9      	OUT  0x28+1,R31
0002cb bde8      	OUT  0x28,R30
                 ;if (ka > 0)
0002cc 940e 0a67 	CALL SUBOPT_0xE
0002ce f41c      	BRGE _0x60
                 ;PORTD.7 = 1;
0002cf 9a97      	SBI  0x12,7
                 ;PORTD.6 = 0;
0002d0 9896      	CBI  0x12,6
                 ;else
0002d1 c002      	RJMP _0x65
                 _0x60:
                 ;PORTD.7 = 0;
0002d2 9897      	CBI  0x12,7
                 ;PORTD.6 = 1;
0002d3 9a96      	SBI  0x12,6
                 _0x65:
0002d4 c19a      	RJMP _0x20C0009
                 ; .FEND
                 ;void rem(int nilai_rem)
                 _rem:
                 ; .FSTART _rem
                 ;PORTD .4 = 1;
0002d5 93ba      	ST   -Y,R27
0002d6 93aa      	ST   -Y,R26
                 ;	nilai_rem -> Y+0
0002d7 9a94      	SBI  0x12,4
                 ;PORTD .5 = 1;
0002d8 9a95      	SBI  0x12,5
                 ;PORTD .2 = 0;
0002d9 9892      	CBI  0x12,2
                 ;PORTD .3 = 0;
0002da 9893      	CBI  0x12,3
                 ;PORTD .6 = 0;
0002db 9896      	CBI  0x12,6
                 ;PORTD .7 = 0;
0002dc 9897      	CBI  0x12,7
                 ;delay_ms(nilai_rem);
0002dd 81a8      	LD   R26,Y
0002de 81b9      	LDD  R27,Y+1
0002df 940e 0cad 	CALL _delay_ms
0002e1 c03d      	RJMP _0x20C000A
                 ; .FEND
                 ;void maju_delay(int kec, int lama)
                 _maju_delay:
                 ; .FSTART _maju_delay
                 ;maju(kec, kec);
0002e2 93ba      	ST   -Y,R27
0002e3 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
0002e4 81ea      	LDD  R30,Y+2
0002e5 93ea      	ST   -Y,R30
0002e6 81ab      	LDD  R26,Y+3
0002e7 dfb7      	RCALL _maju
                 ;delay(lama);
0002e8 940e 0a6c 	CALL SUBOPT_0xF
0002ea c184      	RJMP _0x20C0009
                 ; .FEND
                 ;void pilihSpeed(int kec)
                 _pilihSpeed:
                 ; .FSTART _pilihSpeed
                 ;kp = kec * 0.15;
0002eb 93ba      	ST   -Y,R27
0002ec 93aa      	ST   -Y,R26
                 ;	kec -> Y+0
0002ed 940e 0a70 	CALL SUBOPT_0x10
                +
0002ef e9aa     +LDI R26 , LOW ( 0x3E19999A )
0002f0 e9b9     +LDI R27 , HIGH ( 0x3E19999A )
0002f1 e189     +LDI R24 , BYTE3 ( 0x3E19999A )
0002f2 e39e     +LDI R25 , BYTE4 ( 0x3E19999A )
                 	__GETD2N 0x3E19999A
0002f3 940e 0c5f 	CALL __MULF12
0002f5 e9a3      	LDI  R26,LOW(_kp)
0002f6 e0b1      	LDI  R27,HIGH(_kp)
0002f7 940e 0a77 	CALL SUBOPT_0x11
                 ;kd = kec * 0.6;
0002f9 940e 0a70 	CALL SUBOPT_0x10
                +
0002fb e9aa     +LDI R26 , LOW ( 0x3F19999A )
0002fc e9b9     +LDI R27 , HIGH ( 0x3F19999A )
0002fd e189     +LDI R24 , BYTE3 ( 0x3F19999A )
0002fe e39f     +LDI R25 , BYTE4 ( 0x3F19999A )
                 	__GETD2N 0x3F19999A
0002ff 940e 0c5f 	CALL __MULF12
000301 e9a5      	LDI  R26,LOW(_kd)
000302 e0b1      	LDI  R27,HIGH(_kd)
000303 940e 0a77 	CALL SUBOPT_0x11
                 ;SPEED = kec;
000305 81e8      	LD   R30,Y
000306 81f9      	LDD  R31,Y+1
000307 93e0 0197 	STS  _SPEED,R30
000309 93f0 0198 	STS  _SPEED+1,R31
                 ;MIN_SPEED = -(kec * 0.75);
00030b 940e 0a70 	CALL SUBOPT_0x10
                +
00030d e0a0     +LDI R26 , LOW ( 0x3F400000 )
00030e e0b0     +LDI R27 , HIGH ( 0x3F400000 )
00030f e480     +LDI R24 , BYTE3 ( 0x3F400000 )
000310 e39f     +LDI R25 , BYTE4 ( 0x3F400000 )
                 	__GETD2N 0x3F400000
000311 940e 0c5f 	CALL __MULF12
000313 940e 0bc6 	CALL __ANEGF1
000315 e9a9      	LDI  R26,LOW(_MIN_SPEED)
000316 e0b1      	LDI  R27,HIGH(_MIN_SPEED)
000317 940e 0a77 	CALL SUBOPT_0x11
                 ;MAX_SPEED = kec;
000319 81e8      	LD   R30,Y
00031a 81f9      	LDD  R31,Y+1
00031b 93e0 019b 	STS  _MAX_SPEED,R30
00031d 93f0 019c 	STS  _MAX_SPEED+1,R31
                 _0x20C000A:
00031f 9622      	ADIW R28,2
000320 9508      	RET
                 ; .FEND
                 ;void maju_cari_garis()
                 ;maju(180, 182);
                 ;cek_sensor(); // 0b01000000)!=0b00000000)
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;rem(100);
                 ;void parkir()
                 ;lampu = 0;
                 ;while (1)
                 ;rem(100);
                 ;void scan(int kec)
                 _scan:
                 ; .FSTART _scan
                 ;int rateError;
                 ;int moveVal, moveLeft, moveRight;
                 ;pilihSpeed(kec);
000321 93ba      	ST   -Y,R27
000322 93aa      	ST   -Y,R26
000323 9722      	SBIW R28,2
000324 940e 0b36 	CALL __SAVELOCR6
                 ;	kec -> Y+8
                 ;	rateError -> R16,R17
                 ;	moveVal -> R18,R19
                 ;	moveLeft -> R20,R21
                 ;	moveRight -> Y+6
000326 85a8      	LDD  R26,Y+8
000327 85b9      	LDD  R27,Y+8+1
000328 dfc2      	RCALL _pilihSpeed
                 ;sensor = sensor & 0b01111111;
000329 940e 0a7c 	CALL SUBOPT_0x12
00032b 77ef      	ANDI R30,LOW(0x7F)
00032c 70f0      	ANDI R31,HIGH(0x7F)
00032d 93e0 018d 	STS  _sensor,R30
00032f 93f0 018e 	STS  _sensor+1,R31
                 ;switch (sensor) //  1=kiri 8=kanan
000331 940e 0a7c 	CALL SUBOPT_0x12
                 ;{               //  7......1
                 ;case 0b00000001:
000333 30e1      	CPI  R30,LOW(0x1)
000334 e0a0      	LDI  R26,HIGH(0x1)
000335 07fa      	CPC  R31,R26
000336 f419      	BRNE _0x81
                 ;error = -6;
000337 efea      	LDI  R30,LOW(65530)
000338 efff      	LDI  R31,HIGH(65530)
000339 c056      	RJMP _0x14F
                 ;break; // DOMINAN KANAN
                 ;case 0b00000011:
                 _0x81:
00033a 30e3      	CPI  R30,LOW(0x3)
00033b e0a0      	LDI  R26,HIGH(0x3)
00033c 07fa      	CPC  R31,R26
00033d f419      	BRNE _0x82
                 ;error = -5;
00033e efeb      	LDI  R30,LOW(65531)
00033f efff      	LDI  R31,HIGH(65531)
000340 c04f      	RJMP _0x14F
                 ;break;
                 ;case 0b00000010:
                 _0x82:
000341 30e2      	CPI  R30,LOW(0x2)
000342 e0a0      	LDI  R26,HIGH(0x2)
000343 07fa      	CPC  R31,R26
000344 f419      	BRNE _0x83
                 ;error = -4;
000345 efec      	LDI  R30,LOW(65532)
000346 efff      	LDI  R31,HIGH(65532)
000347 c048      	RJMP _0x14F
                 ;break;
                 ;case 0b00000110:
                 _0x83:
000348 30e6      	CPI  R30,LOW(0x6)
000349 e0a0      	LDI  R26,HIGH(0x6)
00034a 07fa      	CPC  R31,R26
00034b f419      	BRNE _0x84
                 ;error = -3;
00034c efed      	LDI  R30,LOW(65533)
00034d efff      	LDI  R31,HIGH(65533)
00034e c041      	RJMP _0x14F
                 ;break;
                 ;case 0b00000100:
                 _0x84:
00034f 30e4      	CPI  R30,LOW(0x4)
000350 e0a0      	LDI  R26,HIGH(0x4)
000351 07fa      	CPC  R31,R26
000352 f419      	BRNE _0x85
                 ;error = -2;
000353 efee      	LDI  R30,LOW(65534)
000354 efff      	LDI  R31,HIGH(65534)
000355 c03a      	RJMP _0x14F
                 ;break;
                 ;case 0b00001100:
                 _0x85:
000356 30ec      	CPI  R30,LOW(0xC)
000357 e0a0      	LDI  R26,HIGH(0xC)
000358 07fa      	CPC  R31,R26
000359 f419      	BRNE _0x86
                 ;error = -1;
00035a efef      	LDI  R30,LOW(65535)
00035b efff      	LDI  R31,HIGH(65535)
00035c c033      	RJMP _0x14F
                 ;break;
                 ;case 0b00001000:
                 _0x86:
00035d 30e8      	CPI  R30,LOW(0x8)
00035e e0a0      	LDI  R26,HIGH(0x8)
00035f 07fa      	CPC  R31,R26
000360 f431      	BRNE _0x87
                 ;error = 0;
000361 e0e0      	LDI  R30,LOW(0)
000362 93e0 018f 	STS  _error,R30
000364 93e0 0190 	STS  _error+1,R30
                 ;break;
000366 c02d      	RJMP _0x80
                 ;case 0b00011000:
                 _0x87:
000367 31e8      	CPI  R30,LOW(0x18)
000368 e0a0      	LDI  R26,HIGH(0x18)
000369 07fa      	CPC  R31,R26
00036a f419      	BRNE _0x88
                 ;error = 1;
00036b e0e1      	LDI  R30,LOW(1)
00036c e0f0      	LDI  R31,HIGH(1)
00036d c022      	RJMP _0x14F
                 ;break;
                 ;case 0b00010000:
                 _0x88:
00036e 31e0      	CPI  R30,LOW(0x10)
00036f e0a0      	LDI  R26,HIGH(0x10)
000370 07fa      	CPC  R31,R26
000371 f419      	BRNE _0x89
                 ;error = 2;
000372 e0e2      	LDI  R30,LOW(2)
000373 e0f0      	LDI  R31,HIGH(2)
000374 c01b      	RJMP _0x14F
                 ;break;
                 ;case 0b00110000:
                 _0x89:
000375 33e0      	CPI  R30,LOW(0x30)
000376 e0a0      	LDI  R26,HIGH(0x30)
000377 07fa      	CPC  R31,R26
000378 f419      	BRNE _0x8A
                 ;error = 3;
000379 e0e3      	LDI  R30,LOW(3)
00037a e0f0      	LDI  R31,HIGH(3)
00037b c014      	RJMP _0x14F
                 ;break;
                 ;case 0b00100000:
                 _0x8A:
00037c 32e0      	CPI  R30,LOW(0x20)
00037d e0a0      	LDI  R26,HIGH(0x20)
00037e 07fa      	CPC  R31,R26
00037f f419      	BRNE _0x8B
                 ;error = 4;
000380 e0e4      	LDI  R30,LOW(4)
000381 e0f0      	LDI  R31,HIGH(4)
000382 c00d      	RJMP _0x14F
                 ;break;
                 ;case 0b01100000:
                 _0x8B:
000383 36e0      	CPI  R30,LOW(0x60)
000384 e0a0      	LDI  R26,HIGH(0x60)
000385 07fa      	CPC  R31,R26
000386 f419      	BRNE _0x8C
                 ;error = 5;
000387 e0e5      	LDI  R30,LOW(5)
000388 e0f0      	LDI  R31,HIGH(5)
000389 c006      	RJMP _0x14F
                 ;break;
                 ;case 0b01000000:
                 _0x8C:
00038a 34e0      	CPI  R30,LOW(0x40)
00038b e0a0      	LDI  R26,HIGH(0x40)
00038c 07fa      	CPC  R31,R26
00038d f431      	BRNE _0x80
                 ;error = 6;
00038e e0e6      	LDI  R30,LOW(6)
00038f e0f0      	LDI  R31,HIGH(6)
                 _0x14F:
000390 93e0 018f 	STS  _error,R30
000392 93f0 0190 	STS  _error+1,R31
                 ;break; // DOMINAN KIRI
                 _0x80:
                 ;rateError = error - lastError;
000394 91a0 0191 	LDS  R26,_lastError
000396 91b0 0192 	LDS  R27,_lastError+1
000398 91e0 018f 	LDS  R30,_error
00039a 91f0 0190 	LDS  R31,_error+1
00039c 1bea      	SUB  R30,R26
00039d 0bfb      	SBC  R31,R27
00039e 018f      	MOVW R16,R30
                 ;lastError = error;
00039f 91e0 018f 	LDS  R30,_error
0003a1 91f0 0190 	LDS  R31,_error+1
0003a3 93e0 0191 	STS  _lastError,R30
0003a5 93f0 0192 	STS  _lastError+1,R31
                 ;moveVal = (int)(error * kp) + (rateError * kd);
0003a7 91e0 0193 	LDS  R30,_kp
0003a9 91f0 0194 	LDS  R31,_kp+1
0003ab 91a0 018f 	LDS  R26,_error
0003ad 91b0 0190 	LDS  R27,_error+1
0003af 940e 0b61 	CALL __MULW12
0003b1 01bf      	MOVW R22,R30
0003b2 91e0 0195 	LDS  R30,_kd
0003b4 91f0 0196 	LDS  R31,_kd+1
0003b6 01d8      	MOVW R26,R16
0003b7 940e 0b61 	CALL __MULW12
0003b9 0fe6      	ADD  R30,R22
0003ba 1ff7      	ADC  R31,R23
0003bb 019f      	MOVW R18,R30
                 ;moveLeft = SPEED + moveVal;
0003bc 91a0 0197 	LDS  R26,_SPEED
0003be 91b0 0198 	LDS  R27,_SPEED+1
0003c0 0fea      	ADD  R30,R26
0003c1 1ffb      	ADC  R31,R27
0003c2 01af      	MOVW R20,R30
                 ;moveRight = SPEED - moveVal;
0003c3 91e0 0197 	LDS  R30,_SPEED
0003c5 91f0 0198 	LDS  R31,_SPEED+1
0003c7 1be2      	SUB  R30,R18
0003c8 0bf3      	SBC  R31,R19
0003c9 83ee      	STD  Y+6,R30
0003ca 83ff      	STD  Y+6+1,R31
                 ;if (moveLeft > MAX_SPEED)
0003cb 940e 0a81 	CALL SUBOPT_0x13
0003cd 17e4      	CP   R30,R20
0003ce 07f5      	CPC  R31,R21
0003cf f424      	BRGE _0x8E
                 ;moveLeft = MAX_SPEED;
                +
0003d0 9140 019b+LDS R20 , 0 + ( _MAX_SPEED )
0003d2 9150 019c+LDS R21 , 0 + ( _MAX_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MAX_SPEED
                 ;if (moveLeft < MIN_SPEED)
                 _0x8E:
0003d4 940e 0a86 	CALL SUBOPT_0x14
0003d6 174e      	CP   R20,R30
0003d7 075f      	CPC  R21,R31
0003d8 f424      	BRGE _0x8F
                 ;moveLeft = MIN_SPEED;
                +
0003d9 9140 0199+LDS R20 , 0 + ( _MIN_SPEED )
0003db 9150 019a+LDS R21 , 0 + ( _MIN_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MIN_SPEED
                 ;if (moveRight > MAX_SPEED)
                 _0x8F:
0003dd 940e 0a81 	CALL SUBOPT_0x13
0003df 81ae      	LDD  R26,Y+6
0003e0 81bf      	LDD  R27,Y+6+1
0003e1 17ea      	CP   R30,R26
0003e2 07fb      	CPC  R31,R27
0003e3 f424      	BRGE _0x90
                 ;moveRight = MAX_SPEED;
0003e4 940e 0a81 	CALL SUBOPT_0x13
0003e6 83ee      	STD  Y+6,R30
0003e7 83ff      	STD  Y+6+1,R31
                 ;if (moveRight < MIN_SPEED)
                 _0x90:
0003e8 940e 0a86 	CALL SUBOPT_0x14
0003ea 81ae      	LDD  R26,Y+6
0003eb 81bf      	LDD  R27,Y+6+1
0003ec 17ae      	CP   R26,R30
0003ed 07bf      	CPC  R27,R31
0003ee f424      	BRGE _0x91
                 ;moveRight = MIN_SPEED;
0003ef 940e 0a86 	CALL SUBOPT_0x14
0003f1 83ee      	STD  Y+6,R30
0003f2 83ff      	STD  Y+6+1,R31
                 ;setMotor(moveLeft, moveRight);
                 _0x91:
0003f3 935a      	ST   -Y,R21
0003f4 934a      	ST   -Y,R20
0003f5 85a8      	LDD  R26,Y+8
0003f6 85b9      	LDD  R27,Y+8+1
0003f7 debc      	RCALL _setMotor
0003f8 940e 0b3d 	CALL __LOADLOCR6
0003fa 962a      	ADIW R28,10
0003fb 9508      	RET
                 ; .FEND
                 ;void scanX(int brpkali, int kec)
                 _scanX:
                 ; .FSTART _scanX
                 ;while (hitung < brpkali)
0003fc 93ba      	ST   -Y,R27
0003fd 93aa      	ST   -Y,R26
                 ;	brpkali -> Y+2
                 ;	kec -> Y+0
                 _0x92:
0003fe 81ea      	LDD  R30,Y+2
0003ff 81fb      	LDD  R31,Y+2+1
000400 164e      	CP   R4,R30
000401 065f      	CPC  R5,R31
000402 f4d4      	BRGE _0x94
                 ;while ((sensor & 0b00011100) != 0b00011100)
                 _0x95:
000403 940e 0a8b 	CALL SUBOPT_0x15
000405 f029      	BREQ _0x97
                 ;cek_sensor();
000406 dddf      	RCALL _cek_sensor
                 ;scan(kec);
000407 81a8      	LD   R26,Y
000408 81b9      	LDD  R27,Y+1
000409 df17      	RCALL _scan
00040a cff8      	RJMP _0x95
                 _0x97:
                 ;while ((sensor & 0b00011100) == 0b00011100)
                 _0x98:
00040b 940e 0a8b 	CALL SUBOPT_0x15
00040d f471      	BRNE _0x9A
                 ;cek_sensor();
00040e ddd7      	RCALL _cek_sensor
                 ;lampu = 0;
00040f 98c3      	CBI  0x18,3
                 ;scan(kec);
000410 81a8      	LD   R26,Y
000411 81b9      	LDD  R27,Y+1
000412 df0e      	RCALL _scan
                 ;if ((sensor & 0b00011100) != 0b00011100)
000413 940e 0a8b 	CALL SUBOPT_0x15
000415 f029      	BREQ _0x9D
                 ;hitung++;
000416 01f2      	MOVW R30,R4
000417 9631      	ADIW R30,1
000418 012f      	MOVW R4,R30
000419 9731      	SBIW R30,1
                 ;lampu = 1;
00041a 9ac3      	SBI  0x18,3
                 ;};
                 _0x9D:
00041b cfef      	RJMP _0x98
                 _0x9A:
                 ;};
00041c cfe1      	RJMP _0x92
                 _0x94:
                 ;hitung = 0;
00041d 2444      	CLR  R4
00041e 2455      	CLR  R5
00041f c04f      	RJMP _0x20C0009
                 ; .FEND
                 ;void scanTimer(int countGoal, int kec, int lama)
                 ;count = 0;
                 ;	countGoal -> Y+4
                 ;	kec -> Y+2
                 ;	lama -> Y+0
                 ;while (count < countGoal)
                 ;cek_sensor();
                 ;scan(kec);
                 ;count++;
                 ;rem(lama);
                 ;void scanKotak(int brpkali, int kec, int lama_rem) {
                 ;while (hitung < brpkali) {
                 ;	brpkali -> Y+4
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
                 ;while(1)
                 ;cek_sensor();
                 ;scan(kec);
                 ;if((sensor & 0b01111111) == 0b01111111) {
                 ;hitung++; mundur(kec, kec); delay(lama_rem); rem(10); break;
                 ;hitung = 0;
                 ;void scanTka(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b01110000) != 0b01110000) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b01110000) == 0b01110000)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b01110000) != 0b01110000)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scanTki(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b00000111) != 0b00000111) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b00000111) == 0b00000111)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b00000111) != 0b00000111)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scan7ki()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b01000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ka()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b00000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ki2()
                 ;cek_sensor();
                 ;while (sensor == 0b00000000) // sensor !=0b00111111||0b00000011|| 0b00000001
                 ;cek_sensor();
                 ;scan(170);
                 ;void belki(int kec, int lama)
                 _belki:
                 ; .FSTART _belki
                 ;cek_sensor();
000420 93ba      	ST   -Y,R27
000421 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
000422 ddc3      	RCALL _cek_sensor
                 ;while (sen[0] || sen[1])
                 _0xC7:
000423 91e0 0186 	LDS  R30,_sen
000425 30e0      	CPI  R30,0
000426 f421      	BRNE _0xCA
                +
000427 91e0 0187+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
000429 30e0      	CPI  R30,0
00042a f019      	BREQ _0xC9
                 _0xCA:
                 ;kiri(kec, kec);
00042b 940e 0a8f 	CALL SUBOPT_0x16
                 ;cek_sensor();
00042d cff5      	RJMP _0xC7
                 _0xC9:
                 ;while (!sen[0] && !sen[1])
                 _0xCC:
00042e 91e0 0186 	LDS  R30,_sen
000430 30e0      	CPI  R30,0
000431 f421      	BRNE _0xCF
                +
000432 91e0 0187+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
000434 30e0      	CPI  R30,0
000435 f009      	BREQ _0xD0
                 _0xCF:
000436 c003      	RJMP _0xCE
                 _0xD0:
                 ;kiri(kec, kec);
000437 940e 0a8f 	CALL SUBOPT_0x16
                 ;cek_sensor();
000439 cff4      	RJMP _0xCC
                 _0xCE:
                 ;if (lama > 0)
00043a 940e 0a67 	CALL SUBOPT_0xE
00043c f41c      	BRGE _0xD1
                 ;rem(lama);
00043d 81a8      	LD   R26,Y
00043e 81b9      	LDD  R27,Y+1
00043f de95      	RCALL _rem
                 _0xD1:
000440 c02e      	RJMP _0x20C0009
                 ; .FEND
                 ;void belki2()
                 ;cek_sensor();
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;kiri(150, 150);
                 ;void belka(int kec, int lama)
                 _belka:
                 ; .FSTART _belka
                 ;cek_sensor();
000441 93ba      	ST   -Y,R27
000442 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
000443 dda2      	RCALL _cek_sensor
                 ;while (sen[5] || sen[6])
                 _0xD5:
                +
000444 91e0 018b+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
000446 30e0      	CPI  R30,0
000447 f421      	BRNE _0xD8
                +
000448 91e0 018c+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
00044a 30e0      	CPI  R30,0
00044b f019      	BREQ _0xD7
                 _0xD8:
                 ;kanan(kec, kec);
00044c 940e 0a96 	CALL SUBOPT_0x17
                 ;cek_sensor();
00044e cff5      	RJMP _0xD5
                 _0xD7:
                 ;while (!sen[5] && !sen[6])
                 _0xDA:
                +
00044f 91e0 018b+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
000451 30e0      	CPI  R30,0
000452 f421      	BRNE _0xDD
                +
000453 91e0 018c+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
000455 30e0      	CPI  R30,0
000456 f009      	BREQ _0xDE
                 _0xDD:
000457 c003      	RJMP _0xDC
                 _0xDE:
                 ;kanan(kec, kec);
000458 940e 0a96 	CALL SUBOPT_0x17
                 ;cek_sensor();
00045a cff4      	RJMP _0xDA
                 _0xDC:
                 ;if (lama > 0)
00045b 940e 0a67 	CALL SUBOPT_0xE
00045d f41c      	BRGE _0xDF
                 ;rem(lama);
00045e 81a8      	LD   R26,Y
00045f 81b9      	LDD  R27,Y+1
000460 de74      	RCALL _rem
                 _0xDF:
000461 c00d      	RJMP _0x20C0009
                 ; .FEND
                 ;void belkacenter()
                 ;cek_sensor();
                 ;while ((sensor & 0b00001000) != 0b00001000)
                 ;cek_sensor();
                 ;kanan(180, 180);
                 ;if ((sensor & 0b10000000) == 0b10000000)
                 ;lcd_kedip(1);
                 ;void scan_delay(int ms)
                 ;k = 0;
                 ;	ms -> Y+0
                 ;maju(172, 170);
                 ;while (k < ms / 10)
                 ;delay_ms(10);
                 ;k++;
                 ;cek_sensor();
                 ;scan(180);
                 ;void belokKanan(int kec, int lama_rem) {
                 _belokKanan:
                 ; .FSTART _belokKanan
                 ;if(mapMirror == map_biru) {
000462 93ba      	ST   -Y,R27
000463 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
000464 940e 0a9d 	CALL SUBOPT_0x18
000466 9730      	SBIW R30,0
000467 f421      	BRNE _0xE7
                 ;belka(kec, lama_rem);
000468 940e 0aa2 	CALL SUBOPT_0x19
00046a dfd6      	RCALL _belka
                 ;} else {
00046b c003      	RJMP _0xE8
                 _0xE7:
                 ;belki(kec, lama_rem);
00046c 940e 0aa2 	CALL SUBOPT_0x19
00046e dfb1      	RCALL _belki
                 _0xE8:
                 _0x20C0009:
00046f 9624      	ADIW R28,4
000470 9508      	RET
                 ; .FEND
                 ;void belokKiri(int kec, int lama_rem) {
                 ;if(mapMirror == map_biru) {
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
                 ;belki(kec, lama_rem);
                 ;} else {
                 ;belka(kec, lama_rem);
                 ;void griper()
                 ; 0000 005D {
                 ;capit_lepas;
                 ;lengan_tengah;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_ambil;
                 ;delay_ms(7000);
                 ;lengan_atas;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_lepas;
                 ;void ambil(int lama)
                 _ambil:
                 ; .FSTART _ambil
                 ;capit_ambil;
000471 93ba      	ST   -Y,R27
000472 93aa      	ST   -Y,R26
                 ;	lama -> Y+0
000473 eeed      	LDI  R30,LOW(237)
000474 2ede      	MOV  R13,R30
                 ;delay(lama);
000475 940e 0a6c 	CALL SUBOPT_0xF
                 ;lengan_atas;
000477 eeea      	LDI  R30,LOW(234)
000478 2ece      	MOV  R12,R30
                 ;delay(lama);
000479 940e 0a6c 	CALL SUBOPT_0xF
00047b 940c 0950 	JMP  _0x20C0004
                 ; .FEND
                 ;void taruh(int lama)
                 ;lengan_bawah;
                 ;	lama -> Y+0
                 ;delay(lama);
                 ;capit_lepas;
                 ;delay(lama);
                 ;lengan_atas;
                 ;void bawah_lepas()
                 _bawah_lepas:
                 ; .FSTART _bawah_lepas
                 ;lengan_bawah;
00047d efe0      	LDI  R30,LOW(240)
00047e 2ece      	MOV  R12,R30
                 ;capit_lepas;
00047f eee6      	LDI  R30,LOW(230)
000480 2ede      	MOV  R13,R30
000481 9508      	RET
                 ; .FEND
                 ;void atas_lepas()
                 ;lengan_atas;
                 ;capit_lepas;
                 ;void bacawarna()
                 ; 0000 005E {
                 _bacawarna:
                 ; .FSTART _bacawarna
                 ;nadc7 = read_adc(7);
000482 e0a7      	LDI  R26,LOW(7)
000483 dd06      	RCALL _read_adc
000484 2e6e      	MOV  R6,R30
000485 2477      	CLR  R7
                 ;lcd_gotoxy(13, 1);
000486 e0ed      	LDI  R30,LOW(13)
000487 940e 0aa9 	CALL SUBOPT_0x1A
                 ;sprintf(buff, "%d   ", nadc7);
000489 940e 0a13 	CALL SUBOPT_0x4
                +
00048b edee     +LDI R30 , LOW ( 2 * _0x0 + ( 94 ) )
00048c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 94 ) )
                 	__POINTW1FN _0x0,94
00048d 93fa      	ST   -Y,R31
00048e 93ea      	ST   -Y,R30
00048f 01f3      	MOVW R30,R6
000490 2766      	CLR  R22
000491 2777      	CLR  R23
000492 c1d4      	RJMP _0x20C0006
                 ;lcd_puts(buff);
                 ; .FEND
                 ;int checkWarna() {
                 ;int warna;
                 ;nadc7 = read_adc(7);
                 ;	warna -> R16,R17
                 ;if(nadc7 > minMerah && nadc7 < maxMerah){
                 ;warna = 0;
                 ;} else if(nadc7 > minKuning && nadc7 < maxKuning){
                 ;warna = 1;
                 ;} else if(nadc7 > minHijau && nadc7 < maxHijau){
                 ;warna = 2;
                 ;} else {
                 ;warna = 3;
                 ;return warna;
                 ;void Program_Jalan() {
                 ; 0000 005F void Program_Jalan() {
                 _Program_Jalan:
                 ; .FSTART _Program_Jalan
                 ;maju_delay(1000, 400);
000493 940e 0aad 	CALL SUBOPT_0x1B
000495 e9a0      	LDI  R26,LOW(400)
000496 e0b1      	LDI  R27,HIGH(400)
000497 de4a      	RCALL _maju_delay
                 ;scanX(1, 1000); belokKanan(1000, 200);
000498 e0e1      	LDI  R30,LOW(1)
000499 e0f0      	LDI  R31,HIGH(1)
00049a 940e 0ab2 	CALL SUBOPT_0x1C
00049c 940e 0ab9 	CALL SUBOPT_0x1D
                 ;scanX(5, 1000); belokKanan(1000, 200);
00049e 940e 0ab2 	CALL SUBOPT_0x1C
0004a0 940e 0ab9 	CALL SUBOPT_0x1D
                 ;scanX(5, 1000);
0004a2 93fa      	ST   -Y,R31
0004a3 93ea      	ST   -Y,R30
0004a4 eea8      	LDI  R26,LOW(1000)
0004a5 e0b3      	LDI  R27,HIGH(1000)
0004a6 df55      	RCALL _scanX
0004a7 9508      	RET
                 ; .FEND
                 ;void balikKanan() {
                 ;mundur(1000, 1000); delay(380);
                 ;belokKanan(1200, 0); belokKanan(1200, 100);
                 ;void balikKiri() {
                 ;belki(1000, 50); belki(1000, 200);
                 ;void runBot(void);
                 ;void calibration(void);
                 ;void Program_Jalan(void);
                 ;void test_motor(void);
                 ;void test_tombol(void);
                 ;void map_select(int map_num);
                 ;void sens_warna(void);
                 ;void test_capit(void);
                 ;void changeMenu(int menuSelect, bool isSelect) {
                 ; 0000 0060 void changeMenu(int menuSelect, _Bool isSelect) {
                 _changeMenu:
                 ; .FSTART _changeMenu
                 ;lampu = 0;
0004a8 93aa      	ST   -Y,R26
                 ;	menuSelect -> Y+1
                 ;	isSelect -> Y+0
0004a9 98c3      	CBI  0x18,3
                 ;count_btn = menuSelect;
0004aa 81e9      	LDD  R30,Y+1
0004ab 81fa      	LDD  R31,Y+1+1
0004ac 93e0 0182 	STS  _count_btn,R30
0004ae 93f0 0183 	STS  _count_btn+1,R31
                 ;if(!isSelect && !isChildSelect) {
0004b0 81e8      	LD   R30,Y
0004b1 30e0      	CPI  R30,0
0004b2 f421      	BRNE _0xFA
0004b3 91e0 0184 	LDS  R30,_isChildSelect
0004b5 30e0      	CPI  R30,0
0004b6 f009      	BREQ _0xFB
                 _0xFA:
0004b7 c006      	RJMP _0xF9
                 _0xFB:
                 ;lcd_clear();
0004b8 940e 0ac0 	CALL SUBOPT_0x1E
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Menu");
                +
0004ba eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
0004bb e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
0004bc 940e 099d 	CALL _lcd_putsf
                 ;switch (menuSelect) {
                 _0xF9:
0004be 81e9      	LDD  R30,Y+1
0004bf 81fa      	LDD  R31,Y+1+1
                 ;case 0: // Calibration
0004c0 9730      	SBIW R30,0
0004c1 f469      	BRNE _0xFF
                 ;if(isSelect) { calibration(); break; }
0004c2 81e8      	LD   R30,Y
0004c3 30e0      	CPI  R30,0
0004c4 f011      	BREQ _0x100
0004c5 d0b4      	RCALL _calibration
0004c6 c08e      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x100:
0004c7 e0e0      	LDI  R30,LOW(0)
0004c8 940e 0aa9 	CALL SUBOPT_0x1A
                 ;lcd_putsf("Calibration");
                +
0004ca eea9     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
0004cb e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
0004cc 940e 099d 	CALL _lcd_putsf
                 ;break;
0004ce c086      	RJMP _0xFE
                 ;case 1: // Run bot
                 _0xFF:
0004cf 30e1      	CPI  R30,LOW(0x1)
0004d0 e0a0      	LDI  R26,HIGH(0x1)
0004d1 07fa      	CPC  R31,R26
0004d2 f489      	BRNE _0x101
                 ;if(isSelect || isChildSelect) { runBot(); break; }
0004d3 81e8      	LD   R30,Y
0004d4 30e0      	CPI  R30,0
0004d5 f421      	BRNE _0x103
0004d6 91e0 0184 	LDS  R30,_isChildSelect
0004d8 30e0      	CPI  R30,0
0004d9 f011      	BREQ _0x102
                 _0x103:
0004da d07c      	RCALL _runBot
0004db c079      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x102:
0004dc e0e0      	LDI  R30,LOW(0)
0004dd 940e 0aa9 	CALL SUBOPT_0x1A
                 ;lcd_putsf("Run Bot");
                +
0004df efa5     +LDI R26 , LOW ( 2 * _0x0 + ( 117 ) )
0004e0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 117 ) )
                 	__POINTW2FN _0x0,117
0004e1 940e 099d 	CALL _lcd_putsf
                 ;break;
0004e3 c071      	RJMP _0xFE
                 ;case 2: // Sensor Warna
                 _0x101:
0004e4 30e2      	CPI  R30,LOW(0x2)
0004e5 e0a0      	LDI  R26,HIGH(0x2)
0004e6 07fa      	CPC  R31,R26
0004e7 f469      	BRNE _0x105
                 ;if(isSelect) { sens_warna(); break; }
0004e8 81e8      	LD   R30,Y
0004e9 30e0      	CPI  R30,0
0004ea f011      	BREQ _0x106
0004eb d112      	RCALL _sens_warna
0004ec c068      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x106:
0004ed e0e0      	LDI  R30,LOW(0)
0004ee 940e 0aa9 	CALL SUBOPT_0x1A
                 ;lcd_putsf("Sens Warna");
                +
0004f0 efad     +LDI R26 , LOW ( 2 * _0x0 + ( 125 ) )
0004f1 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 125 ) )
                 	__POINTW2FN _0x0,125
0004f2 940e 099d 	CALL _lcd_putsf
                 ;break;
0004f4 c060      	RJMP _0xFE
                 ;case 3: // Map Select
                 _0x105:
0004f5 30e3      	CPI  R30,LOW(0x3)
0004f6 e0a0      	LDI  R26,HIGH(0x3)
0004f7 07fa      	CPC  R31,R26
0004f8 f499      	BRNE _0x107
                 ;if(isSelect || isChildSelect) { map_select(map_biru); break; }
0004f9 81e8      	LD   R30,Y
0004fa 30e0      	CPI  R30,0
0004fb f421      	BRNE _0x109
0004fc 91e0 0184 	LDS  R30,_isChildSelect
0004fe 30e0      	CPI  R30,0
0004ff f021      	BREQ _0x108
                 _0x109:
000500 e0a0      	LDI  R26,LOW(0)
000501 e0b0      	LDI  R27,0
000502 d07f      	RCALL _map_select
000503 c051      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x108:
000504 e0e0      	LDI  R30,LOW(0)
000505 940e 0aa9 	CALL SUBOPT_0x1A
                 ;lcd_putsf("Map Biru");
                +
000507 e0a8     +LDI R26 , LOW ( 2 * _0x0 + ( 136 ) )
000508 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 136 ) )
                 	__POINTW2FN _0x0,136
000509 940e 099d 	CALL _lcd_putsf
                 ;break;
00050b c049      	RJMP _0xFE
                 ;case 4: // Map Select
                 _0x107:
00050c 30e4      	CPI  R30,LOW(0x4)
00050d e0a0      	LDI  R26,HIGH(0x4)
00050e 07fa      	CPC  R31,R26
00050f f499      	BRNE _0x10B
                 ;if(isSelect || isChildSelect) { map_select(map_merah); break; }
000510 81e8      	LD   R30,Y
000511 30e0      	CPI  R30,0
000512 f421      	BRNE _0x10D
000513 91e0 0184 	LDS  R30,_isChildSelect
000515 30e0      	CPI  R30,0
000516 f021      	BREQ _0x10C
                 _0x10D:
000517 e0a1      	LDI  R26,LOW(1)
000518 e0b0      	LDI  R27,0
000519 d068      	RCALL _map_select
00051a c03a      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x10C:
00051b e0e0      	LDI  R30,LOW(0)
00051c 940e 0aa9 	CALL SUBOPT_0x1A
                 ;lcd_putsf("Map Merah");
                +
00051e e1a1     +LDI R26 , LOW ( 2 * _0x0 + ( 145 ) )
00051f e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 145 ) )
                 	__POINTW2FN _0x0,145
000520 940e 099d 	CALL _lcd_putsf
                 ;break;
000522 c032      	RJMP _0xFE
                 ;case 5: // Test Motor
                 _0x10B:
000523 30e5      	CPI  R30,LOW(0x5)
000524 e0a0      	LDI  R26,HIGH(0x5)
000525 07fa      	CPC  R31,R26
000526 f469      	BRNE _0x10F
                 ;if(isSelect) { test_motor(); break; }
000527 81e8      	LD   R30,Y
000528 30e0      	CPI  R30,0
000529 f011      	BREQ _0x110
00052a d06d      	RCALL _test_motor
00052b c029      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x110:
00052c e0e0      	LDI  R30,LOW(0)
00052d 940e 0aa9 	CALL SUBOPT_0x1A
                 ;lcd_putsf("Motor");
                +
00052f e1ab     +LDI R26 , LOW ( 2 * _0x0 + ( 155 ) )
000530 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 155 ) )
                 	__POINTW2FN _0x0,155
000531 940e 099d 	CALL _lcd_putsf
                 ;break;
000533 c021      	RJMP _0xFE
                 ;case 6: // Test tombol
                 _0x10F:
000534 30e6      	CPI  R30,LOW(0x6)
000535 e0a0      	LDI  R26,HIGH(0x6)
000536 07fa      	CPC  R31,R26
000537 f469      	BRNE _0x111
                 ;if(isSelect) { test_tombol(); break; }
000538 81e8      	LD   R30,Y
000539 30e0      	CPI  R30,0
00053a f011      	BREQ _0x112
00053b d08c      	RCALL _test_tombol
00053c c018      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x112:
00053d e0e0      	LDI  R30,LOW(0)
00053e 940e 0aa9 	CALL SUBOPT_0x1A
                 ;lcd_putsf("Button");
                +
000540 e2a1     +LDI R26 , LOW ( 2 * _0x0 + ( 161 ) )
000541 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 161 ) )
                 	__POINTW2FN _0x0,161
000542 940e 099d 	CALL _lcd_putsf
                 ;break;
000544 c010      	RJMP _0xFE
                 ;case 7: // Test Capit
                 _0x111:
000545 30e7      	CPI  R30,LOW(0x7)
000546 e0a0      	LDI  R26,HIGH(0x7)
000547 07fa      	CPC  R31,R26
000548 f461      	BRNE _0x115
                 ;if(isSelect) { test_capit(); break; }
000549 81e8      	LD   R30,Y
00054a 30e0      	CPI  R30,0
00054b f011      	BREQ _0x114
00054c d0db      	RCALL _test_capit
00054d c007      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x114:
00054e e0e0      	LDI  R30,LOW(0)
00054f 940e 0aa9 	CALL SUBOPT_0x1A
                 ;lcd_putsf("Capit");
                +
000551 e2a8     +LDI R26 , LOW ( 2 * _0x0 + ( 168 ) )
000552 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 168 ) )
                 	__POINTW2FN _0x0,168
000553 940e 099d 	CALL _lcd_putsf
                 ;break;
                 ;default:
                 _0x115:
                 ;break;
                 _0xFE:
000555 940c 09ae 	JMP  _0x20C0003
                 ; .FEND
                 ;void runBot() {
                 _runBot:
                 ; .FSTART _runBot
                 ;if(!isChildSelect) {
000557 91e0 0184 	LDS  R30,_isChildSelect
000559 30e0      	CPI  R30,0
00055a f471      	BRNE _0x116
                 ;lcd_clear();
00055b 940e 0ac0 	CALL SUBOPT_0x1E
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Run Bot");
                +
00055d efa5     +LDI R26 , LOW ( 2 * _0x0 + ( 117 ) )
00055e e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 117 ) )
                 	__POINTW2FN _0x0,117
00055f 940e 0ac4 	CALL SUBOPT_0x1F
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Click 2 to start");
                +
000561 e2ae     +LDI R26 , LOW ( 2 * _0x0 + ( 174 ) )
000562 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 174 ) )
                 	__POINTW2FN _0x0,174
000563 940e 099d 	CALL _lcd_putsf
                 ;isChildSelect = true;
000565 e0e1      	LDI  R30,LOW(1)
000566 93e0 0184 	STS  _isChildSelect,R30
                 ;} else if(isChildSelect) {
000568 c010      	RJMP _0x117
                 _0x116:
000569 91e0 0184 	LDS  R30,_isChildSelect
00056b 30e0      	CPI  R30,0
00056c f061      	BREQ _0x118
                 ;lcd_clear();
00056d 940e 0952 	CALL _lcd_clear
                 ;lcd_gotoxy(0, 1);
00056f e0e0      	LDI  R30,LOW(0)
000570 940e 0aa9 	CALL SUBOPT_0x1A
                 ;lcd_putsf("Running...");
                +
000572 e3af     +LDI R26 , LOW ( 2 * _0x0 + ( 191 ) )
000573 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 191 ) )
                 	__POINTW2FN _0x0,191
000574 940e 099d 	CALL _lcd_putsf
                 ;Program_Jalan();
000576 df1c      	RCALL _Program_Jalan
                 ;isChildSelect = false;
000577 940e 0ac8 	CALL SUBOPT_0x20
                 ;changeMenu(0, false);
                 _0x118:
                 _0x117:
000579 9508      	RET
                 ; .FEND
                 ;void calibration() {
                 _calibration:
                 ; .FSTART _calibration
                 ;scan_garis();
00057a dc99      	RCALL _scan_garis
                 ;delay(1000);
00057b 940e 0ad2 	CALL SUBOPT_0x21
                 ;scan_back();
00057d dcb6      	RCALL _scan_back
                 ;delay(1000);
00057e 940e 0ad2 	CALL SUBOPT_0x21
                 ;hit_tengah();
000580 dcd3      	RCALL _hit_tengah
                 ;isChildSelect = false;
000581 c040      	RJMP _0x20C0008
                 ;changeMenu(0, false);
                 ; .FEND
                 ;void map_select(int map_num) {
                 _map_select:
                 ; .FSTART _map_select
                 ;if(map_num != 0 && map_num != 1) map_num = 0;
000582 93ba      	ST   -Y,R27
000583 93aa      	ST   -Y,R26
                 ;	map_num -> Y+0
000584 81a8      	LD   R26,Y
000585 81b9      	LDD  R27,Y+1
000586 9710      	SBIW R26,0
000587 f011      	BREQ _0x11A
000588 9711      	SBIW R26,1
000589 f409      	BRNE _0x11B
                 _0x11A:
00058a c003      	RJMP _0x119
                 _0x11B:
00058b e0e0      	LDI  R30,LOW(0)
00058c 83e8      	STD  Y+0,R30
00058d 83e9      	STD  Y+0+1,R30
                 ;mapMirror = map_num;
                 _0x119:
00058e 81e8      	LD   R30,Y
00058f 81f9      	LDD  R31,Y+1
000590 e2aa      	LDI  R26,LOW(_mapMirror)
000591 e0b0      	LDI  R27,HIGH(_mapMirror)
000592 940e 0ba9 	CALL __EEPROMWRW
                 ;isChildSelect = false;
000594 940e 0ac8 	CALL SUBOPT_0x20
                 ;changeMenu(0, false);
000596 940c 0950 	JMP  _0x20C0004
                 ; .FEND
                 ;void test_motor()
                 _test_motor:
                 ; .FSTART _test_motor
                 ;lcd_clear();
000598 940e 0ac0 	CALL SUBOPT_0x1E
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Motor");
                +
00059a e4aa     +LDI R26 , LOW ( 2 * _0x0 + ( 202 ) )
00059b e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 202 ) )
                 	__POINTW2FN _0x0,202
00059c 940e 0ac4 	CALL SUBOPT_0x1F
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+1000 +1000");
                +
00059e e5a5     +LDI R26 , LOW ( 2 * _0x0 + ( 213 ) )
00059f e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 213 ) )
                 	__POINTW2FN _0x0,213
0005a0 940e 099d 	CALL _lcd_putsf
                 ;setMotor(1000, 1000);
0005a2 940e 0aad 	CALL SUBOPT_0x1B
0005a4 940e 0ad6 	CALL SUBOPT_0x22
                 ;delay_ms(2000);
                 ;lcd_gotoxy(0, 1);
0005a6 e0e0      	LDI  R30,LOW(0)
0005a7 940e 0aa9 	CALL SUBOPT_0x1A
                 ;lcd_putsf("-1000 -1000");
                +
0005a9 e6a1     +LDI R26 , LOW ( 2 * _0x0 + ( 225 ) )
0005aa e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 225 ) )
                 	__POINTW2FN _0x0,225
0005ab 940e 0ade 	CALL SUBOPT_0x23
                 ;setMotor(-1000, -1000);
0005ad 940e 0ae5 	CALL SUBOPT_0x24
                 ;delay_ms(2000);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+1000 -1000");
                +
0005af e6ad     +LDI R26 , LOW ( 2 * _0x0 + ( 237 ) )
0005b0 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 237 ) )
                 	__POINTW2FN _0x0,237
0005b1 940e 099d 	CALL _lcd_putsf
                 ;setMotor(1000, -1000);
0005b3 940e 0aad 	CALL SUBOPT_0x1B
0005b5 940e 0ae5 	CALL SUBOPT_0x24
                 ;delay_ms(2000);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("-1000 +1000");
                +
0005b7 e7a9     +LDI R26 , LOW ( 2 * _0x0 + ( 249 ) )
0005b8 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 249 ) )
                 	__POINTW2FN _0x0,249
0005b9 940e 0ade 	CALL SUBOPT_0x23
                 ;setMotor(-1000, 1000);
0005bb 940e 0ad6 	CALL SUBOPT_0x22
                 ;delay_ms(2000);
                 ;rem(1000);
0005bd eea8      	LDI  R26,LOW(1000)
0005be e0b3      	LDI  R27,HIGH(1000)
0005bf dd15      	RCALL _rem
                 ;lcd_clear();
0005c0 940e 0ac0 	CALL SUBOPT_0x1E
                 ;lcd_gotoxy(0, 0);
                 ;isChildSelect = false;
                 _0x20C0008:
0005c2 e0e0      	LDI  R30,LOW(0)
0005c3 93e0 0184 	STS  _isChildSelect,R30
                 ;changeMenu(0, false);
0005c5 940e 0aef 	CALL SUBOPT_0x25
0005c7 9508      	RET
                 ; .FEND
                 ;void test_tombol()
                 _test_tombol:
                 ; .FSTART _test_tombol
                 ;lcd_gotoxy(0, 1);
0005c8 e0e0      	LDI  R30,LOW(0)
0005c9 940e 0aa9 	CALL SUBOPT_0x1A
                 ;lcd_putsf("Click 1 to exit");
                +
0005cb e8a5     +LDI R26 , LOW ( 2 * _0x0 + ( 261 ) )
0005cc e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 261 ) )
                 	__POINTW2FN _0x0,261
0005cd 940e 099d 	CALL _lcd_putsf
                 ;isTestTombol = true;
0005cf e0e1      	LDI  R30,LOW(1)
0005d0 93e0 0185 	STS  _isTestTombol,R30
                 ;while (1)
                 _0x11C:
                 ;if (!isTestTombol) break;
0005d2 91e0 0185 	LDS  R30,_isTestTombol
0005d4 30e0      	CPI  R30,0
0005d5 f139      	BREQ _0x11E
                 ;if ((t1 == 0))
0005d6 9998      	SBIC 0x13,0
0005d7 c009      	RJMP _0x120
                 ;lcd_gotoxy(0, 0);
0005d8 e0e0      	LDI  R30,LOW(0)
0005d9 940e 0a0f 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 1     ");
                +
0005db e9a5     +LDI R26 , LOW ( 2 * _0x0 + ( 277 ) )
0005dc e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 277 ) )
                 	__POINTW2FN _0x0,277
0005dd 940e 0af6 	CALL SUBOPT_0x26
                 ;isTestTombol = false;
                 ;delay(500);
                 ;changeMenu(0, false);
0005df 940e 0aef 	CALL SUBOPT_0x25
                 ;if (t2 == 0)
                 _0x120:
0005e1 9999      	SBIC 0x13,1
0005e2 c007      	RJMP _0x121
                 ;lcd_gotoxy(0, 0);
0005e3 e0e0      	LDI  R30,LOW(0)
0005e4 940e 0a0f 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 2     ");
                +
0005e6 eaa5     +LDI R26 , LOW ( 2 * _0x0 + ( 293 ) )
0005e7 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 293 ) )
                 	__POINTW2FN _0x0,293
0005e8 940e 099d 	CALL _lcd_putsf
                 ;if (t3 == 0)
                 _0x121:
0005ea 999a      	SBIC 0x13,2
0005eb c007      	RJMP _0x122
                 ;lcd_gotoxy(0, 0);
0005ec e0e0      	LDI  R30,LOW(0)
0005ed 940e 0a0f 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 3     ");
                +
0005ef eba5     +LDI R26 , LOW ( 2 * _0x0 + ( 309 ) )
0005f0 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 309 ) )
                 	__POINTW2FN _0x0,309
0005f1 940e 099d 	CALL _lcd_putsf
                 ;if (t4 == 0)
                 _0x122:
0005f3 999b      	SBIC 0x13,3
0005f4 c007      	RJMP _0x123
                 ;lcd_gotoxy(0, 0);
0005f5 e0e0      	LDI  R30,LOW(0)
0005f6 940e 0a0f 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 4     ");
                +
0005f8 eca5     +LDI R26 , LOW ( 2 * _0x0 + ( 325 ) )
0005f9 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 325 ) )
                 	__POINTW2FN _0x0,325
0005fa 940e 099d 	CALL _lcd_putsf
                 _0x123:
0005fc cfd5      	RJMP _0x11C
                 _0x11E:
0005fd 9508      	RET
                 ; .FEND
                 ;void sens_warna()
                 _sens_warna:
                 ; .FSTART _sens_warna
                 ;lcd_clear();
0005fe 940e 0ac0 	CALL SUBOPT_0x1E
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Sens Warna");
                +
000600 efad     +LDI R26 , LOW ( 2 * _0x0 + ( 125 ) )
000601 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 125 ) )
                 	__POINTW2FN _0x0,125
000602 940e 0ac4 	CALL SUBOPT_0x1F
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Warna:");
                +
000604 eda5     +LDI R26 , LOW ( 2 * _0x0 + ( 341 ) )
000605 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 341 ) )
                 	__POINTW2FN _0x0,341
000606 940e 099d 	CALL _lcd_putsf
                 ;isTestTombol = true;
000608 e0e1      	LDI  R30,LOW(1)
000609 93e0 0185 	STS  _isTestTombol,R30
                 ;bawah_lepas();
00060b de71      	RCALL _bawah_lepas
                 ;delay(200);
00060c 940e 0aff 	CALL SUBOPT_0x27
                 ;ambil(20);
00060e e1a4      	LDI  R26,LOW(20)
00060f e0b0      	LDI  R27,0
000610 de60      	RCALL _ambil
                 ;while (1)
                 _0x124:
                 ;bacawarna();
000611 de70      	RCALL _bacawarna
                 ;if (!isTestTombol) { lcd_clear(); capit_lepas; changeMenu(0, false); break; }
000612 91e0 0185 	LDS  R30,_isTestTombol
000614 30e0      	CPI  R30,0
000615 f439      	BRNE _0x127
000616 940e 0952 	CALL _lcd_clear
000618 eee6      	LDI  R30,LOW(230)
000619 2ede      	MOV  R13,R30
00061a 940e 0aef 	CALL SUBOPT_0x25
00061c c00a      	RJMP _0x126
                 ;if ((t1 == 0))
                 _0x127:
00061d 9998      	SBIC 0x13,0
00061e c007      	RJMP _0x128
                 ;lcd_gotoxy(0, 0);
00061f e0e0      	LDI  R30,LOW(0)
000620 940e 0a0f 	CALL SUBOPT_0x3
                 ;lcd_putsf("Exiting...");
                +
000622 edac     +LDI R26 , LOW ( 2 * _0x0 + ( 348 ) )
000623 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 348 ) )
                 	__POINTW2FN _0x0,348
000624 940e 0af6 	CALL SUBOPT_0x26
                 ;isTestTombol = false;
                 ;delay(500);
                 _0x128:
000626 cfea      	RJMP _0x124
                 _0x126:
000627 9508      	RET
                 ; .FEND
                 ;void test_capit()
                 _test_capit:
                 ; .FSTART _test_capit
                 ;lcd_clear();
000628 940e 0ac0 	CALL SUBOPT_0x1E
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Capit");
                +
00062a eea7     +LDI R26 , LOW ( 2 * _0x0 + ( 359 ) )
00062b e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 359 ) )
                 	__POINTW2FN _0x0,359
00062c 940e 0ac4 	CALL SUBOPT_0x1F
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Capit: > <");
                +
00062e efa2     +LDI R26 , LOW ( 2 * _0x0 + ( 370 ) )
00062f e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 370 ) )
                 	__POINTW2FN _0x0,370
000630 940e 099d 	CALL _lcd_putsf
                 ;capit_ambil;
000632 eeed      	LDI  R30,LOW(237)
000633 2ede      	MOV  R13,R30
                 ;delay(500);
000634 efa4      	LDI  R26,LOW(500)
000635 e0b1      	LDI  R27,HIGH(500)
000636 db5e      	RCALL _delay
                 ;lcd_gotoxy(0, 1);
000637 e0e0      	LDI  R30,LOW(0)
000638 940e 0aa9 	CALL SUBOPT_0x1A
                 ;lcd_putsf("Capit: < >");
                +
00063a efad     +LDI R26 , LOW ( 2 * _0x0 + ( 381 ) )
00063b e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 381 ) )
                 	__POINTW2FN _0x0,381
00063c 940e 099d 	CALL _lcd_putsf
                 ;capit_lepas;
00063e eee6      	LDI  R30,LOW(230)
00063f 2ede      	MOV  R13,R30
                 ;delay(1000);
000640 940e 0ad2 	CALL SUBOPT_0x21
                 ;lcd_gotoxy(0, 1);
000642 e0e0      	LDI  R30,LOW(0)
000643 940e 0aa9 	CALL SUBOPT_0x1A
                 ;lcd_putsf("Capit: \\/");
                +
000645 e0a8     +LDI R26 , LOW ( 2 * _0x0 + ( 392 ) )
000646 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 392 ) )
                 	__POINTW2FN _0x0,392
000647 940e 099d 	CALL _lcd_putsf
                 ;lengan_bawah;
000649 efe0      	LDI  R30,LOW(240)
00064a 2ece      	MOV  R12,R30
                 ;delay(1000);
00064b 940e 0ad2 	CALL SUBOPT_0x21
                 ;lcd_gotoxy(0, 1);
00064d e0e0      	LDI  R30,LOW(0)
00064e 940e 0aa9 	CALL SUBOPT_0x1A
                 ;lcd_putsf("Capit: /\\");
                +
000650 e1a2     +LDI R26 , LOW ( 2 * _0x0 + ( 402 ) )
000651 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 402 ) )
                 	__POINTW2FN _0x0,402
000652 940e 099d 	CALL _lcd_putsf
                 ;lengan_atas;
000654 eeea      	LDI  R30,LOW(234)
000655 2ece      	MOV  R12,R30
                 ;delay(1000);
000656 940e 0ad2 	CALL SUBOPT_0x21
000658 9508      	RET
                 ; .FEND
                 ;void tepuk_tangan() {
                 ;lcd_clear();
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Hold 1 to exit");
                 ;lcd_gotoxy(0, 0);
                 ;while (1)
                 ;lcd_putsf("XD");
                 ;if(t1 == 0) break;
                 ;capit_lepas;
                 ;if(t1 == 0) break;
                 ;delay(500);
                 ;if(t1 == 0) break;
                 ;capit_ambil;
                 ;if(t1 == 0) break;
                 ;delay(500);
                 ;if(t1 == 0) break;
                 ;void display_map() {
                 _display_map:
                 ; .FSTART _display_map
                 ;cek_sensor();
000659 db8c      	RCALL _cek_sensor
                 ;lcd_gotoxy(7, 0);
00065a e0e7      	LDI  R30,LOW(7)
00065b 940e 0a0f 	CALL SUBOPT_0x3
                 ;sprintf(buff, "%d", mapMirror);
00065d 940e 0a13 	CALL SUBOPT_0x4
                +
00065f e8ec     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
000660 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
000661 93fa      	ST   -Y,R31
000662 93ea      	ST   -Y,R30
000663 940e 0a9d 	CALL SUBOPT_0x18
000665 940e 0b54 	CALL __CWD1
                 _0x20C0006:
000667 940e 0b94 	CALL __PUTPARD1
000669 e084      	LDI  R24,4
00066a 940e 089f 	CALL _sprintf
00066c 9628      	ADIW R28,8
                 ;lcd_puts(buff);
                 _0x20C0007:
00066d e6a0      	LDI  R26,LOW(_buff)
00066e e0b1      	LDI  R27,HIGH(_buff)
00066f 940e 098e 	CALL _lcd_puts
000671 9508      	RET
                 ; .FEND
                 ;void tes_sensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, "sensor:%d = %d  ", i, read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(100);
                 ;void tampil_count()
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", second);
                 ;lcd_puts(buff);
                 ;interrupt[TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0065 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000672 93aa      	ST   -Y,R26
000673 93ea      	ST   -Y,R30
000674 b7ef      	IN   R30,SREG
000675 93ea      	ST   -Y,R30
                 ; 0000 0066 TCNT0 = 0x96; // BE
000676 e9e6      	LDI  R30,LOW(150)
000677 bfe2      	OUT  0x32,R30
                 ; 0000 0067 a++;
000678 91e0 0181 	LDS  R30,_a
00067a 5fef      	SUBI R30,-LOW(1)
00067b 93e0 0181 	STS  _a,R30
                 ; 0000 0068 
                 ; 0000 0069 if (a <= pos_servo1)
00067d 91a0 0181 	LDS  R26,_a
00067f 16da      	CP   R13,R26
000680 f010      	BRLO _0x134
                 ; 0000 006A {
                 ; 0000 006B servo1 = 0;
000681 98ae      	CBI  0x15,6
                 ; 0000 006C }
                 ; 0000 006D else
000682 c001      	RJMP _0x137
                 _0x134:
                 ; 0000 006E {
                 ; 0000 006F servo1 = 1;
000683 9aae      	SBI  0x15,6
                 ; 0000 0070 }
                 _0x137:
                 ; 0000 0071 if (a <= pos_servo2)
000684 91a0 0181 	LDS  R26,_a
000686 16ca      	CP   R12,R26
000687 f010      	BRLO _0x13A
                 ; 0000 0072 {
                 ; 0000 0073 servo2 = 0;
000688 98af      	CBI  0x15,7
                 ; 0000 0074 }
                 ; 0000 0075 else
000689 c001      	RJMP _0x13D
                 _0x13A:
                 ; 0000 0076 {
                 ; 0000 0077 servo2 = 1;
00068a 9aaf      	SBI  0x15,7
                 ; 0000 0078 }
                 _0x13D:
                 ; 0000 0079 }
00068b 91e9      	LD   R30,Y+
00068c bfef      	OUT  SREG,R30
00068d 91e9      	LD   R30,Y+
00068e 91a9      	LD   R26,Y+
00068f 9518      	RETI
                 ; .FEND
                 ;interrupt[TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 007D {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 007E // Place your code here
                 ; 0000 007F }
000690 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0082 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0083 // Declare your local variables here
                 ; 0000 0084 
                 ; 0000 0085 // Input/Output Ports initialization
                 ; 0000 0086 // Port A initialization
                 ; 0000 0087 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0088 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0089 PORTA=0x00;
000691 e0e0      	LDI  R30,LOW(0)
000692 bbeb      	OUT  0x1B,R30
                 ; 0000 008A DDRA=0x00;
000693 bbea      	OUT  0x1A,R30
                 ; 0000 008B 
                 ; 0000 008C // Port B initialization
                 ; 0000 008D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 008E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 008F PORTB=0x08;
000694 e0e8      	LDI  R30,LOW(8)
000695 bbe8      	OUT  0x18,R30
                 ; 0000 0090 DDRB=0Xff;//0x08;
000696 efef      	LDI  R30,LOW(255)
000697 bbe7      	OUT  0x17,R30
                 ; 0000 0091 
                 ; 0000 0092 // Port C initialization
                 ; 0000 0093 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0094 // State7=T State6=T State5=T State4=T State3=P State2=P State1=P State0=P
                 ; 0000 0095 PORTC=0xFF;
000698 bbe5      	OUT  0x15,R30
                 ; 0000 0096 DDRC=0xF0; //C0
000699 efe0      	LDI  R30,LOW(240)
00069a bbe4      	OUT  0x14,R30
                 ; 0000 0097 
                 ; 0000 0098 // Port D initialization
                 ; 0000 0099 // Func7=In Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 009A // State7=T State6=T State5=0 State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 009B PORTD=0x01;
00069b e0e1      	LDI  R30,LOW(1)
00069c bbe2      	OUT  0x12,R30
                 ; 0000 009C DDRD=0xFE; //3F
00069d efee      	LDI  R30,LOW(254)
00069e bbe1      	OUT  0x11,R30
                 ; 0000 009D 
                 ; 0000 009E // Timer/Counter 0 initialization
                 ; 0000 009F TCCR0=0x4A;
00069f e4ea      	LDI  R30,LOW(74)
0006a0 bfe3      	OUT  0x33,R30
                 ; 0000 00A0 TCNT0=0x96;
0006a1 e9e6      	LDI  R30,LOW(150)
0006a2 bfe2      	OUT  0x32,R30
                 ; 0000 00A1 OCR0=0x00;
0006a3 e0e0      	LDI  R30,LOW(0)
0006a4 bfec      	OUT  0x3C,R30
                 ; 0000 00A2 
                 ; 0000 00A3 // Timer/Counter 1 initialization
                 ; 0000 00A4 TCCR1A=0xA1;
0006a5 eae1      	LDI  R30,LOW(161)
0006a6 bdef      	OUT  0x2F,R30
                 ; 0000 00A5 TCCR1B=0x09;
0006a7 e0e9      	LDI  R30,LOW(9)
0006a8 bdee      	OUT  0x2E,R30
                 ; 0000 00A6 TCNT1H=0x00;
0006a9 e0e0      	LDI  R30,LOW(0)
0006aa bded      	OUT  0x2D,R30
                 ; 0000 00A7 TCNT1L=0x00;
0006ab bdec      	OUT  0x2C,R30
                 ; 0000 00A8 ICR1H=0x00;
0006ac bde7      	OUT  0x27,R30
                 ; 0000 00A9 ICR1L=0x00;
0006ad bde6      	OUT  0x26,R30
                 ; 0000 00AA OCR1AH=0x00;
0006ae bdeb      	OUT  0x2B,R30
                 ; 0000 00AB OCR1AL=0x00;
0006af bdea      	OUT  0x2A,R30
                 ; 0000 00AC OCR1BH=0x00;
0006b0 bde9      	OUT  0x29,R30
                 ; 0000 00AD OCR1BL=0x00;
0006b1 bde8      	OUT  0x28,R30
                 ; 0000 00AE 
                 ; 0000 00AF // Timer/Counter 2 initialization
                 ; 0000 00B0 // Clock source: System Clock
                 ; 0000 00B1 // Clock value: Timer 2 Stopped
                 ; 0000 00B2 // Mode: Normal top=FFh
                 ; 0000 00B3 // OC2 output: Disconnected
                 ; 0000 00B4 ASSR=0x00;
0006b2 bde2      	OUT  0x22,R30
                 ; 0000 00B5 TCCR2=0x00;
0006b3 bde5      	OUT  0x25,R30
                 ; 0000 00B6 TCNT2=0x00;
0006b4 bde4      	OUT  0x24,R30
                 ; 0000 00B7 OCR2=0x00;
0006b5 bde3      	OUT  0x23,R30
                 ; 0000 00B8 
                 ; 0000 00B9 // External Interrupt(s) initialization
                 ; 0000 00BA // INT0: Off
                 ; 0000 00BB // INT1: Off
                 ; 0000 00BC // INT2: Off
                 ; 0000 00BD MCUCR=0x00;
0006b6 bfe5      	OUT  0x35,R30
                 ; 0000 00BE MCUCSR=0x00;
0006b7 bfe4      	OUT  0x34,R30
                 ; 0000 00BF 
                 ; 0000 00C0 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00C1 TIMSK=0x03;
0006b8 e0e3      	LDI  R30,LOW(3)
0006b9 bfe9      	OUT  0x39,R30
                 ; 0000 00C2 
                 ; 0000 00C3 // Analog Comparator initialization
                 ; 0000 00C4 // Analog Comparator: Off
                 ; 0000 00C5 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00C6 ACSR=0x80;
0006ba e8e0      	LDI  R30,LOW(128)
0006bb b9e8      	OUT  0x8,R30
                 ; 0000 00C7 SFIOR=0x00;
0006bc e0e0      	LDI  R30,LOW(0)
0006bd bfe0      	OUT  0x30,R30
                 ; 0000 00C8 
                 ; 0000 00C9 
                 ; 0000 00CA 
                 ; 0000 00CB MCUCR=0x00;
0006be bfe5      	OUT  0x35,R30
                 ; 0000 00CC MCUCSR=0x00;
0006bf bfe4      	OUT  0x34,R30
                 ; 0000 00CD 
                 ; 0000 00CE ////USART, UNTUK KOMUNIKASI BLUETOOTH
                 ; 0000 00CF //UCSRA=0x00;
                 ; 0000 00D0 //UCSRB=0x18;
                 ; 0000 00D1 //UCSRC=0x86;
                 ; 0000 00D2 //UBRRH=0x00;
                 ; 0000 00D3 //UBRRL=0x47;
                 ; 0000 00D4 // USART initialization
                 ; 0000 00D5 // USART disabled
                 ; 0000 00D6 UCSRB=0x00;
0006c0 b9ea      	OUT  0xA,R30
                 ; 0000 00D7 
                 ; 0000 00D8 // ADC initialization
                 ; 0000 00D9 // ADC Clock frequency: 691.200 kHz
                 ; 0000 00DA // ADC Voltage Reference: AVCC pin
                 ; 0000 00DB // ADC Auto Trigger Source: None
                 ; 0000 00DC // Only the 8 most significant bits of
                 ; 0000 00DD // the AD conversion result are used
                 ; 0000 00DE ADMUX=ADC_VREF_TYPE & 0xff;
0006c1 e6e0      	LDI  R30,LOW(96)
0006c2 b9e7      	OUT  0x7,R30
                 ; 0000 00DF ADCSRA=0x84;
0006c3 e8e4      	LDI  R30,LOW(132)
0006c4 b9e6      	OUT  0x6,R30
                 ; 0000 00E0 //ADCSRA=0xA6;
                 ; 0000 00E1 SFIOR&=0x1F;
0006c5 b7e0      	IN   R30,0x30
0006c6 71ef      	ANDI R30,LOW(0x1F)
0006c7 bfe0      	OUT  0x30,R30
                 ; 0000 00E2 
                 ; 0000 00E3 // LCD module initialization
                 ; 0000 00E4 lcd_init(16); //
0006c8 e1a0      	LDI  R26,LOW(16)
0006c9 940e 09c1 	CALL _lcd_init
                 ; 0000 00E5 lcd_clear();  //
0006cb 940e 0952 	CALL _lcd_clear
                 ; 0000 00E6 lampu = 0;    //
0006cd 98c3      	CBI  0x18,3
                 ; 0000 00E7 // k,b
                 ; 0000 00E8 lcd_gotoxy(0, 0);
0006ce e0e0      	LDI  R30,LOW(0)
0006cf 940e 0a0f 	CALL SUBOPT_0x3
                 ; 0000 00E9 lcd_putsf("     LEGION     ");
                +
0006d1 e2ae     +LDI R26 , LOW ( 2 * _0x0 + ( 430 ) )
0006d2 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 430 ) )
                 	__POINTW2FN _0x0,430
0006d3 940e 0ac4 	CALL SUBOPT_0x1F
                 ; 0000 00EA lcd_gotoxy(0, 1);
                 ; 0000 00EB lcd_putsf(" MAN 4 JOMBANG ");
                +
0006d5 e3af     +LDI R26 , LOW ( 2 * _0x0 + ( 447 ) )
0006d6 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 447 ) )
                 	__POINTW2FN _0x0,447
0006d7 940e 099d 	CALL _lcd_putsf
                 ; 0000 00EC delay_ms(500);
0006d9 efa4      	LDI  R26,LOW(500)
0006da e0b1      	LDI  R27,HIGH(500)
0006db 940e 0cad 	CALL _delay_ms
                 ; 0000 00ED lcd_clear();
0006dd 940e 0952 	CALL _lcd_clear
                 ; 0000 00EE 
                 ; 0000 00EF // PROGRAM UTAMA
                 ; 0000 00F0 // Global enable interrupts
                 ; 0000 00F1 #asm("sei")
0006df 9478      	SEI
                 ; 0000 00F2 lengan_atas;
0006e0 eeea      	LDI  R30,LOW(234)
0006e1 2ece      	MOV  R12,R30
                 ; 0000 00F3 capit_lepas;
0006e2 eee6      	LDI  R30,LOW(230)
0006e3 2ede      	MOV  R13,R30
                 ; 0000 00F4 
                 ; 0000 00F5 /// mapMirror = 0 - map/lintasan bagian biru
                 ; 0000 00F6 /// mapMirror = 1 - map/lintasan bagian merah
                 ; 0000 00F7 if(mapMirror != map_biru && mapMirror != map_merah) mapMirror = map_biru;
0006e4 940e 0a9d 	CALL SUBOPT_0x18
0006e6 9730      	SBIW R30,0
0006e7 f021      	BREQ _0x143
0006e8 30e1      	CPI  R30,LOW(0x1)
0006e9 e0a0      	LDI  R26,HIGH(0x1)
0006ea 07fa      	CPC  R31,R26
0006eb f409      	BRNE _0x144
                 _0x143:
0006ec c006      	RJMP _0x142
                 _0x144:
0006ed e2aa      	LDI  R26,LOW(_mapMirror)
0006ee e0b0      	LDI  R27,HIGH(_mapMirror)
0006ef e0e0      	LDI  R30,LOW(0)
0006f0 e0f0      	LDI  R31,HIGH(0)
0006f1 940e 0ba9 	CALL __EEPROMWRW
                 ; 0000 00F8 
                 ; 0000 00F9 lcd_clear();
                 _0x142:
0006f3 940e 0ac0 	CALL SUBOPT_0x1E
                 ; 0000 00FA lcd_gotoxy(0, 0);
                 ; 0000 00FB lcd_putsf("Menu");
                +
0006f5 eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
0006f6 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
0006f7 940e 0ac4 	CALL SUBOPT_0x1F
                 ; 0000 00FC lcd_gotoxy(0, 1);
                 ; 0000 00FD lcd_putsf("Calibration");
                +
0006f9 eea9     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
0006fa e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
0006fb 940e 099d 	CALL _lcd_putsf
                 ; 0000 00FE 
                 ; 0000 00FF while(1) {
                 _0x145:
                 ; 0000 0100 if(!isChildSelect) {
0006fd 91e0 0184 	LDS  R30,_isChildSelect
0006ff 30e0      	CPI  R30,0
000700 f419      	BRNE _0x148
                 ; 0000 0101 display_sensor();
000701 dae7      	RCALL _display_sensor
                 ; 0000 0102 bacawarna();
000702 dd7f      	RCALL _bacawarna
                 ; 0000 0103 display_map();
000703 df55      	RCALL _display_map
                 ; 0000 0104 }
                 ; 0000 0105 
                 ; 0000 0106 if((t1 == 0)) {
                 _0x148:
000704 9998      	SBIC 0x13,0
000705 c019      	RJMP _0x149
                 ; 0000 0107 
                 ; 0000 0108 if(!isChildSelect) count_btn ++;
000706 91e0 0184 	LDS  R30,_isChildSelect
000708 30e0      	CPI  R30,0
000709 f421      	BRNE _0x14A
00070a e8a2      	LDI  R26,LOW(_count_btn)
00070b e0b1      	LDI  R27,HIGH(_count_btn)
00070c 940e 0b03 	CALL SUBOPT_0x28
                 ; 0000 0109 if(count_btn >= 8) count_btn = 0;
                 _0x14A:
00070e 91a0 0182 	LDS  R26,_count_btn
000710 91b0 0183 	LDS  R27,_count_btn+1
000712 9718      	SBIW R26,8
000713 f02c      	BRLT _0x14B
000714 e0e0      	LDI  R30,LOW(0)
000715 93e0 0182 	STS  _count_btn,R30
000717 93e0 0183 	STS  _count_btn+1,R30
                 ; 0000 010A delay(200);
                 _0x14B:
000719 940e 0aff 	CALL SUBOPT_0x27
                 ; 0000 010B changeMenu(count_btn, false);
00071b 940e 0b09 	CALL SUBOPT_0x29
00071d e0a0      	LDI  R26,LOW(0)
00071e dd89      	RCALL _changeMenu
                 ; 0000 010C }
                 ; 0000 010D if((t2 == 0)) {
                 _0x149:
00071f 9999      	SBIC 0x13,1
000720 c006      	RJMP _0x14C
                 ; 0000 010E changeMenu(count_btn, true);
000721 940e 0b09 	CALL SUBOPT_0x29
000723 e0a1      	LDI  R26,LOW(1)
000724 dd83      	RCALL _changeMenu
                 ; 0000 010F delay(200);
000725 940e 0aff 	CALL SUBOPT_0x27
                 ; 0000 0110 }
                 ; 0000 0111 }
                 _0x14C:
000727 cfd5      	RJMP _0x145
                 ; 0000 0112 }
                 _0x14D:
000728 cfff      	RJMP _0x14D
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000729 93ba      	ST   -Y,R27
00072a 93aa      	ST   -Y,R26
00072b 931a      	ST   -Y,R17
00072c 930a      	ST   -Y,R16
00072d 81aa      	LDD  R26,Y+2
00072e 81bb      	LDD  R27,Y+2+1
00072f 9612      	ADIW R26,2
000730 940e 0b8c 	CALL __GETW1P
000732 9730      	SBIW R30,0
000733 f129      	BREQ _0x2000010
000734 81aa      	LDD  R26,Y+2
000735 81bb      	LDD  R27,Y+2+1
000736 9614      	ADIW R26,4
000737 940e 0b8c 	CALL __GETW1P
000739 018f      	MOVW R16,R30
00073a 9730      	SBIW R30,0
00073b f061      	BREQ _0x2000012
                +
00073c 3002     +CPI R16 , LOW ( 2 )
00073d e0e0     +LDI R30 , HIGH ( 2 )
00073e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00073f f080      	BRLO _0x2000013
000740 01f8      	MOVW R30,R16
000741 9731      	SBIW R30,1
000742 018f      	MOVW R16,R30
                +
000743 81aa     +LDD R26 , Y + 2
000744 81bb     +LDD R27 , Y + 2 + 1
000745 9614     +ADIW R26 , 4
000746 93ed     +ST X + , R30
000747 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000748 81aa      	LDD  R26,Y+2
000749 81bb      	LDD  R27,Y+2+1
00074a 9612      	ADIW R26,2
00074b 940e 0b03 	CALL SUBOPT_0x28
00074d 9731      	SBIW R30,1
00074e 81ac      	LDD  R26,Y+4
00074f 83a0      	STD  Z+0,R26
                 _0x2000013:
000750 81aa      	LDD  R26,Y+2
000751 81bb      	LDD  R27,Y+2+1
000752 940e 0b8c 	CALL __GETW1P
000754 23ff      	TST  R31
000755 f012      	BRMI _0x2000014
000756 940e 0b03 	CALL SUBOPT_0x28
                 _0x2000014:
000758 c006      	RJMP _0x2000015
                 _0x2000010:
000759 81aa      	LDD  R26,Y+2
00075a 81bb      	LDD  R27,Y+2+1
00075b efef      	LDI  R30,LOW(65535)
00075c efff      	LDI  R31,HIGH(65535)
00075d 93ed      	ST   X+,R30
00075e 93fc      	ST   X,R31
                 _0x2000015:
00075f 8119      	LDD  R17,Y+1
000760 8108      	LDD  R16,Y+0
000761 9625      	ADIW R28,5
000762 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000763 93ba      	ST   -Y,R27
000764 93aa      	ST   -Y,R26
000765 9726      	SBIW R28,6
000766 940e 0b36 	CALL __SAVELOCR6
000768 e010      	LDI  R17,0
000769 85ac      	LDD  R26,Y+12
00076a 85bd      	LDD  R27,Y+12+1
00076b e0e0      	LDI  R30,LOW(0)
00076c e0f0      	LDI  R31,HIGH(0)
00076d 93ed      	ST   X+,R30
00076e 93fc      	ST   X,R31
                 _0x2000016:
00076f 89ea      	LDD  R30,Y+18
000770 89fb      	LDD  R31,Y+18+1
000771 9631      	ADIW R30,1
000772 8bea      	STD  Y+18,R30
000773 8bfb      	STD  Y+18+1,R31
000774 9731      	SBIW R30,1
000775 91e4      	LPM  R30,Z
000776 2f2e      	MOV  R18,R30
000777 30e0      	CPI  R30,0
000778 f409      	BRNE PC+2
000779 c11d      	RJMP _0x2000018
00077a 2fe1      	MOV  R30,R17
00077b 30e0      	CPI  R30,0
00077c f439      	BRNE _0x200001C
00077d 3225      	CPI  R18,37
00077e f411      	BRNE _0x200001D
00077f e011      	LDI  R17,LOW(1)
000780 c002      	RJMP _0x200001E
                 _0x200001D:
000781 940e 0b10 	CALL SUBOPT_0x2A
                 _0x200001E:
000783 c112      	RJMP _0x200001B
                 _0x200001C:
000784 30e1      	CPI  R30,LOW(0x1)
000785 f4a9      	BRNE _0x200001F
000786 3225      	CPI  R18,37
000787 f419      	BRNE _0x2000020
000788 940e 0b10 	CALL SUBOPT_0x2A
00078a c10a      	RJMP _0x20000CC
                 _0x2000020:
00078b e012      	LDI  R17,LOW(2)
00078c e040      	LDI  R20,LOW(0)
00078d e000      	LDI  R16,LOW(0)
00078e 322d      	CPI  R18,45
00078f f411      	BRNE _0x2000021
000790 e001      	LDI  R16,LOW(1)
000791 c104      	RJMP _0x200001B
                 _0x2000021:
000792 322b      	CPI  R18,43
000793 f411      	BRNE _0x2000022
000794 e24b      	LDI  R20,LOW(43)
000795 c100      	RJMP _0x200001B
                 _0x2000022:
000796 3220      	CPI  R18,32
000797 f411      	BRNE _0x2000023
000798 e240      	LDI  R20,LOW(32)
000799 c0fc      	RJMP _0x200001B
                 _0x2000023:
00079a c002      	RJMP _0x2000024
                 _0x200001F:
00079b 30e2      	CPI  R30,LOW(0x2)
00079c f439      	BRNE _0x2000025
                 _0x2000024:
00079d e050      	LDI  R21,LOW(0)
00079e e013      	LDI  R17,LOW(3)
00079f 3320      	CPI  R18,48
0007a0 f411      	BRNE _0x2000026
0007a1 6800      	ORI  R16,LOW(128)
0007a2 c0f3      	RJMP _0x200001B
                 _0x2000026:
0007a3 c003      	RJMP _0x2000027
                 _0x2000025:
0007a4 30e3      	CPI  R30,LOW(0x3)
0007a5 f009      	BREQ PC+2
0007a6 c0ef      	RJMP _0x200001B
                 _0x2000027:
0007a7 3320      	CPI  R18,48
0007a8 f010      	BRLO _0x200002A
0007a9 332a      	CPI  R18,58
0007aa f008      	BRLO _0x200002B
                 _0x200002A:
0007ab c007      	RJMP _0x2000029
                 _0x200002B:
0007ac e0aa      	LDI  R26,LOW(10)
0007ad 9f5a      	MUL  R21,R26
0007ae 2d50      	MOV  R21,R0
0007af 2fe2      	MOV  R30,R18
0007b0 53e0      	SUBI R30,LOW(48)
0007b1 0f5e      	ADD  R21,R30
0007b2 c0e3      	RJMP _0x200001B
                 _0x2000029:
0007b3 2fe2      	MOV  R30,R18
0007b4 36e3      	CPI  R30,LOW(0x63)
0007b5 f449      	BRNE _0x200002F
0007b6 940e 0b17 	CALL SUBOPT_0x2B
0007b8 89e8      	LDD  R30,Y+16
0007b9 89f9      	LDD  R31,Y+16+1
0007ba 81a4      	LDD  R26,Z+4
0007bb 93aa      	ST   -Y,R26
0007bc 940e 0b1d 	CALL SUBOPT_0x2C
0007be c0d6      	RJMP _0x2000030
                 _0x200002F:
0007bf 37e3      	CPI  R30,LOW(0x73)
0007c0 f441      	BRNE _0x2000032
0007c1 940e 0b17 	CALL SUBOPT_0x2B
0007c3 940e 0b23 	CALL SUBOPT_0x2D
0007c5 940e 08db 	CALL _strlen
0007c7 2f1e      	MOV  R17,R30
0007c8 c00a      	RJMP _0x2000033
                 _0x2000032:
0007c9 37e0      	CPI  R30,LOW(0x70)
0007ca f461      	BRNE _0x2000035
0007cb 940e 0b17 	CALL SUBOPT_0x2B
0007cd 940e 0b23 	CALL SUBOPT_0x2D
0007cf 940e 08e7 	CALL _strlenf
0007d1 2f1e      	MOV  R17,R30
0007d2 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0007d3 6002      	ORI  R16,LOW(2)
0007d4 770f      	ANDI R16,LOW(127)
0007d5 e030      	LDI  R19,LOW(0)
0007d6 c03c      	RJMP _0x2000036
                 _0x2000035:
0007d7 36e4      	CPI  R30,LOW(0x64)
0007d8 f011      	BREQ _0x2000039
0007d9 36e9      	CPI  R30,LOW(0x69)
0007da f411      	BRNE _0x200003A
                 _0x2000039:
0007db 6004      	ORI  R16,LOW(4)
0007dc c002      	RJMP _0x200003B
                 _0x200003A:
0007dd 37e5      	CPI  R30,LOW(0x75)
0007de f431      	BRNE _0x200003C
                 _0x200003B:
0007df e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0007e0 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0007e1 83ee      	STD  Y+6,R30
0007e2 83ff      	STD  Y+6+1,R31
0007e3 e015      	LDI  R17,LOW(5)
0007e4 c00c      	RJMP _0x200003D
                 _0x200003C:
0007e5 35e8      	CPI  R30,LOW(0x58)
0007e6 f411      	BRNE _0x200003F
0007e7 6008      	ORI  R16,LOW(8)
0007e8 c003      	RJMP _0x2000040
                 _0x200003F:
0007e9 37e8      	CPI  R30,LOW(0x78)
0007ea f009      	BREQ PC+2
0007eb c0a9      	RJMP _0x2000071
                 _0x2000040:
0007ec e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0007ed e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0007ee 83ee      	STD  Y+6,R30
0007ef 83ff      	STD  Y+6+1,R31
0007f0 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0007f1 ff02      	SBRS R16,2
0007f2 c017      	RJMP _0x2000042
0007f3 940e 0b17 	CALL SUBOPT_0x2B
0007f5 89a8      	LDD  R26,Y+16
0007f6 89b9      	LDD  R27,Y+16+1
0007f7 9614      	ADIW R26,4
0007f8 91ed      	LD   R30,X+
0007f9 91fd      	LD   R31,X+
0007fa 87ea      	STD  Y+10,R30
0007fb 87fb      	STD  Y+10+1,R31
0007fc 85ab      	LDD  R26,Y+11
0007fd 23aa      	TST  R26
0007fe f42a      	BRPL _0x2000043
0007ff 940e 0b48 	CALL __ANEGW1
000801 87ea      	STD  Y+10,R30
000802 87fb      	STD  Y+10+1,R31
000803 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000804 3040      	CPI  R20,0
000805 f011      	BREQ _0x2000044
000806 5f1f      	SUBI R17,-LOW(1)
000807 c001      	RJMP _0x2000045
                 _0x2000044:
000808 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000809 c009      	RJMP _0x2000046
                 _0x2000042:
00080a 940e 0b17 	CALL SUBOPT_0x2B
00080c 89a8      	LDD  R26,Y+16
00080d 89b9      	LDD  R27,Y+16+1
00080e 9614      	ADIW R26,4
00080f 940e 0b8c 	CALL __GETW1P
000811 87ea      	STD  Y+10,R30
000812 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
000813 fd00      	SBRC R16,0
000814 c011      	RJMP _0x2000047
                 _0x2000048:
000815 1715      	CP   R17,R21
000816 f478      	BRSH _0x200004A
000817 ff07      	SBRS R16,7
000818 c008      	RJMP _0x200004B
000819 ff02      	SBRS R16,2
00081a c004      	RJMP _0x200004C
00081b 7f0b      	ANDI R16,LOW(251)
00081c 2f24      	MOV  R18,R20
00081d 5011      	SUBI R17,LOW(1)
00081e c001      	RJMP _0x200004D
                 _0x200004C:
00081f e320      	LDI  R18,LOW(48)
                 _0x200004D:
000820 c001      	RJMP _0x200004E
                 _0x200004B:
000821 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000822 940e 0b10 	CALL SUBOPT_0x2A
000824 5051      	SUBI R21,LOW(1)
000825 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000826 2f31      	MOV  R19,R17
000827 ff01      	SBRS R16,1
000828 c017      	RJMP _0x200004F
                 _0x2000050:
000829 3030      	CPI  R19,0
00082a f0a1      	BREQ _0x2000052
00082b ff03      	SBRS R16,3
00082c c006      	RJMP _0x2000053
00082d 81ee      	LDD  R30,Y+6
00082e 81ff      	LDD  R31,Y+6+1
00082f 9125      	LPM  R18,Z+
000830 83ee      	STD  Y+6,R30
000831 83ff      	STD  Y+6+1,R31
000832 c005      	RJMP _0x2000054
                 _0x2000053:
000833 81ae      	LDD  R26,Y+6
000834 81bf      	LDD  R27,Y+6+1
000835 912d      	LD   R18,X+
000836 83ae      	STD  Y+6,R26
000837 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000838 940e 0b10 	CALL SUBOPT_0x2A
00083a 3050      	CPI  R21,0
00083b f009      	BREQ _0x2000055
00083c 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00083d 5031      	SUBI R19,LOW(1)
00083e cfea      	RJMP _0x2000050
                 _0x2000052:
00083f c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000840 e320      	LDI  R18,LOW(48)
000841 81ee      	LDD  R30,Y+6
000842 81ff      	LDD  R31,Y+6+1
000843 940e 0b90 	CALL __GETW1PF
000845 87e8      	STD  Y+8,R30
000846 87f9      	STD  Y+8+1,R31
000847 81ee      	LDD  R30,Y+6
000848 81ff      	LDD  R31,Y+6+1
000849 9632      	ADIW R30,2
00084a 83ee      	STD  Y+6,R30
00084b 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00084c 85e8      	LDD  R30,Y+8
00084d 85f9      	LDD  R31,Y+8+1
00084e 85aa      	LDD  R26,Y+10
00084f 85bb      	LDD  R27,Y+10+1
000850 17ae      	CP   R26,R30
000851 07bf      	CPC  R27,R31
000852 f050      	BRLO _0x200005C
000853 5f2f      	SUBI R18,-LOW(1)
000854 85a8      	LDD  R26,Y+8
000855 85b9      	LDD  R27,Y+8+1
000856 85ea      	LDD  R30,Y+10
000857 85fb      	LDD  R31,Y+10+1
000858 1bea      	SUB  R30,R26
000859 0bfb      	SBC  R31,R27
00085a 87ea      	STD  Y+10,R30
00085b 87fb      	STD  Y+10+1,R31
00085c cfef      	RJMP _0x200005A
                 _0x200005C:
00085d 332a      	CPI  R18,58
00085e f028      	BRLO _0x200005D
00085f ff03      	SBRS R16,3
000860 c002      	RJMP _0x200005E
000861 5f29      	SUBI R18,-LOW(7)
000862 c001      	RJMP _0x200005F
                 _0x200005E:
000863 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000864 fd04      	SBRC R16,4
000865 c01a      	RJMP _0x2000061
000866 3321      	CPI  R18,49
000867 f420      	BRSH _0x2000063
000868 85a8      	LDD  R26,Y+8
000869 85b9      	LDD  R27,Y+8+1
00086a 9711      	SBIW R26,1
00086b f409      	BRNE _0x2000062
                 _0x2000063:
00086c c009      	RJMP _0x20000CD
                 _0x2000062:
00086d 1753      	CP   R21,R19
00086e f010      	BRLO _0x2000067
00086f ff00      	SBRS R16,0
000870 c001      	RJMP _0x2000068
                 _0x2000067:
000871 c013      	RJMP _0x2000066
                 _0x2000068:
000872 e220      	LDI  R18,LOW(32)
000873 ff07      	SBRS R16,7
000874 c00b      	RJMP _0x2000069
000875 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000876 6100      	ORI  R16,LOW(16)
000877 ff02      	SBRS R16,2
000878 c007      	RJMP _0x200006A
000879 7f0b      	ANDI R16,LOW(251)
00087a 934a      	ST   -Y,R20
00087b 940e 0b1d 	CALL SUBOPT_0x2C
00087d 3050      	CPI  R21,0
00087e f009      	BREQ _0x200006B
00087f 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000880 940e 0b10 	CALL SUBOPT_0x2A
000882 3050      	CPI  R21,0
000883 f009      	BREQ _0x200006C
000884 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000885 5031      	SUBI R19,LOW(1)
000886 85a8      	LDD  R26,Y+8
000887 85b9      	LDD  R27,Y+8+1
000888 9712      	SBIW R26,2
000889 f008      	BRLO _0x2000059
00088a cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00088b ff00      	SBRS R16,0
00088c c008      	RJMP _0x200006D
                 _0x200006E:
00088d 3050      	CPI  R21,0
00088e f031      	BREQ _0x2000070
00088f 5051      	SUBI R21,LOW(1)
000890 e2e0      	LDI  R30,LOW(32)
000891 93ea      	ST   -Y,R30
000892 940e 0b1d 	CALL SUBOPT_0x2C
000894 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000895 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000896 ced8      	RJMP _0x2000016
                 _0x2000018:
000897 85ac      	LDD  R26,Y+12
000898 85bd      	LDD  R27,Y+12+1
000899 91ed      	LD   R30,X+
00089a 91fd      	LD   R31,X+
00089b 940e 0b3d 	CALL __LOADLOCR6
00089d 9664      	ADIW R28,20
00089e 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00089f 92ff      	PUSH R15
0008a0 2ef8      	MOV  R15,R24
0008a1 9726      	SBIW R28,6
0008a2 940e 0b38 	CALL __SAVELOCR4
0008a4 01de      	MOVW R26,R28
0008a5 961c      	ADIW R26,12
0008a6 940e 0b44 	CALL __ADDW2R15
0008a8 940e 0b8c 	CALL __GETW1P
0008aa 9730      	SBIW R30,0
0008ab f419      	BRNE _0x2000072
0008ac efef      	LDI  R30,LOW(65535)
0008ad efff      	LDI  R31,HIGH(65535)
0008ae c027      	RJMP _0x20C0005
                 _0x2000072:
0008af 01de      	MOVW R26,R28
0008b0 9616      	ADIW R26,6
0008b1 940e 0b44 	CALL __ADDW2R15
0008b3 018d      	MOVW R16,R26
0008b4 01de      	MOVW R26,R28
0008b5 961c      	ADIW R26,12
0008b6 940e 0b44 	CALL __ADDW2R15
0008b8 91ed      	LD   R30,X+
0008b9 91fd      	LD   R31,X+
0008ba 83ee      	STD  Y+6,R30
0008bb 83ff      	STD  Y+6+1,R31
0008bc e0e0      	LDI  R30,LOW(0)
0008bd 87e8      	STD  Y+8,R30
0008be 87e9      	STD  Y+8+1,R30
0008bf 01de      	MOVW R26,R28
0008c0 961a      	ADIW R26,10
0008c1 940e 0b44 	CALL __ADDW2R15
0008c3 91ed      	LD   R30,X+
0008c4 91fd      	LD   R31,X+
0008c5 93fa      	ST   -Y,R31
0008c6 93ea      	ST   -Y,R30
0008c7 931a      	ST   -Y,R17
0008c8 930a      	ST   -Y,R16
0008c9 e2e9      	LDI  R30,LOW(_put_buff_G100)
0008ca e0f7      	LDI  R31,HIGH(_put_buff_G100)
0008cb 93fa      	ST   -Y,R31
0008cc 93ea      	ST   -Y,R30
0008cd 01de      	MOVW R26,R28
0008ce 961a      	ADIW R26,10
0008cf de93      	RCALL __print_G100
0008d0 019f      	MOVW R18,R30
0008d1 81ae      	LDD  R26,Y+6
0008d2 81bf      	LDD  R27,Y+6+1
0008d3 e0e0      	LDI  R30,LOW(0)
0008d4 93ec      	ST   X,R30
0008d5 01f9      	MOVW R30,R18
                 _0x20C0005:
0008d6 940e 0b3f 	CALL __LOADLOCR4
0008d8 962a      	ADIW R28,10
0008d9 90ff      	POP  R15
0008da 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0008db 93ba      	ST   -Y,R27
0008dc 93aa      	ST   -Y,R26
0008dd 91a9          ld   r26,y+
0008de 91b9          ld   r27,y+
0008df 27ee          clr  r30
0008e0 27ff          clr  r31
                 strlen0:
0008e1 916d          ld   r22,x+
0008e2 2366          tst  r22
0008e3 f011          breq strlen1
0008e4 9631          adiw r30,1
0008e5 cffb          rjmp strlen0
                 strlen1:
0008e6 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0008e7 93ba      	ST   -Y,R27
0008e8 93aa      	ST   -Y,R26
0008e9 27aa          clr  r26
0008ea 27bb          clr  r27
0008eb 91e9          ld   r30,y+
0008ec 91f9          ld   r31,y+
                 strlenf0:
0008ed 9005      	lpm  r0,z+
0008ee 2000          tst  r0
0008ef f011          breq strlenf1
0008f0 9611          adiw r26,1
0008f1 cffb          rjmp strlenf0
                 strlenf1:
0008f2 01fd          movw r30,r26
0008f3 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _abs:
                 ; .FSTART _abs
0008f4 93ba      	ST   -Y,R27
0008f5 93aa      	ST   -Y,R26
0008f6 91e9          ld   r30,y+
0008f7 91f9          ld   r31,y+
0008f8 9730          sbiw r30,0
0008f9 f41a          brpl __abs0
0008fa 95e0          com  r30
0008fb 95f0          com  r31
0008fc 9631          adiw r30,1
                 __abs0:
0008fd 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G103:
                 ; .FSTART __lcd_delay_G103
0008fe e0ff          ldi   r31,15
                 __lcd_delay0:
0008ff 95fa          dec   r31
000900 f7f1          brne  __lcd_delay0
000901 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000902 b3a7          in    r26,__lcd_direction
000903 70af          andi  r26,0xf                 ;set as input
000904 bba7          out   __lcd_direction,r26
000905 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000906 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000907 dff6      	RCALL __lcd_delay_G103
000908 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000909 dff4      	RCALL __lcd_delay_G103
00090a b3a6          in    r26,__lcd_pin
00090b 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
00090c dff1      	RCALL __lcd_delay_G103
00090d 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
00090e dfef      	RCALL __lcd_delay_G103
00090f 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000910 fda7          sbrc  r26,__lcd_busy_flag
000911 cff5          rjmp  __lcd_busy
000912 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
000913 7fa0          andi  r26,0xf0
000914 2bab          or    r26,r27
000915 bba8          out   __lcd_port,r26          ;write
000916 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000917 940e 08fe 	CALL __lcd_delay_G103
000919 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
00091a 940e 08fe 	CALL __lcd_delay_G103
00091c 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00091d 93aa      	ST   -Y,R26
00091e 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
00091f b3a7          in    r26,__lcd_direction
000920 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000921 bba7          out   __lcd_direction,r26
000922 b3b8          in    r27,__lcd_port
000923 70bf          andi  r27,0xf
000924 81a8          ld    r26,y
000925 dfed      	RCALL __lcd_write_nibble_G103
000926 81a8          ld    r26,y
000927 95a2          swap  r26
000928 dfea      	RCALL __lcd_write_nibble_G103
000929 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
00092a 940c 09f3 	JMP  _0x20C0001
                 ; .FEND
                 __lcd_read_nibble_G103:
                 ; .FSTART __lcd_read_nibble_G103
00092c 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
00092d 940e 08fe 	CALL __lcd_delay_G103
00092f b3e6          in    r30,__lcd_pin           ;read
000930 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000931 940e 08fe 	CALL __lcd_delay_G103
000933 7fe0          andi  r30,0xf0
000934 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G103:
                 ; .FSTART _lcd_read_byte0_G103
000935 940e 08fe 	CALL __lcd_delay_G103
000937 dff4      	RCALL __lcd_read_nibble_G103
000938 2fae          mov   r26,r30
000939 dff2      	RCALL __lcd_read_nibble_G103
00093a 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
00093b 95e2          swap  r30
00093c 2bea          or    r30,r26
00093d 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00093e 93aa      	ST   -Y,R26
00093f 940e 0902 	CALL __lcd_ready
000941 81e8      	LD   R30,Y
000942 e0f0      	LDI  R31,0
000943 54ef      	SUBI R30,LOW(-__base_y_G103)
000944 4ffe      	SBCI R31,HIGH(-__base_y_G103)
000945 81e0      	LD   R30,Z
000946 81a9      	LDD  R26,Y+1
000947 0fae      	ADD  R26,R30
000948 940e 091d 	CALL __lcd_write_data
00094a 81e9      	LDD  R30,Y+1
00094b 93e0 01b5 	STS  __lcd_x,R30
00094d 81e8      	LD   R30,Y
00094e 93e0 01b6 	STS  __lcd_y,R30
                 _0x20C0004:
000950 9622      	ADIW R28,2
000951 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000952 940e 0902 	CALL __lcd_ready
000954 e0a2      	LDI  R26,LOW(2)
000955 940e 091d 	CALL __lcd_write_data
000957 940e 0902 	CALL __lcd_ready
000959 e0ac      	LDI  R26,LOW(12)
00095a 940e 091d 	CALL __lcd_write_data
00095c 940e 0902 	CALL __lcd_ready
00095e e0a1      	LDI  R26,LOW(1)
00095f 940e 091d 	CALL __lcd_write_data
000961 e0e0      	LDI  R30,LOW(0)
000962 93e0 01b6 	STS  __lcd_y,R30
000964 93e0 01b5 	STS  __lcd_x,R30
000966 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000967 93aa      	ST   -Y,R26
000968 93ef          push r30
000969 93ff          push r31
00096a 81a8          ld   r26,y
00096b 9468          set
00096c 30aa          cpi  r26,10
00096d f039          breq __lcd_putchar1
00096e 94e8          clt
00096f 91e0 01b7 	LDS  R30,__lcd_maxx
000971 91a0 01b5 	LDS  R26,__lcd_x
000973 17ae      	CP   R26,R30
000974 f058      	BRLO _0x2060004
                 	__lcd_putchar1:
000975 91e0 01b6 	LDS  R30,__lcd_y
000977 5fef      	SUBI R30,-LOW(1)
000978 93e0 01b6 	STS  __lcd_y,R30
00097a e0e0      	LDI  R30,LOW(0)
00097b 93ea      	ST   -Y,R30
00097c 91a0 01b6 	LDS  R26,__lcd_y
00097e dfbf      	RCALL _lcd_gotoxy
00097f f056      	brts __lcd_putchar0
                 _0x2060004:
000980 91e0 01b5 	LDS  R30,__lcd_x
000982 5fef      	SUBI R30,-LOW(1)
000983 93e0 01b5 	STS  __lcd_x,R30
000985 df7c          rcall __lcd_ready
000986 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
000987 81a8      	LD   R26,Y
000988 940e 091d 	CALL __lcd_write_data
                 __lcd_putchar0:
00098a 91ff          pop  r31
00098b 91ef          pop  r30
00098c 940c 09f3 	JMP  _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00098e 93ba      	ST   -Y,R27
00098f 93aa      	ST   -Y,R26
000990 931a      	ST   -Y,R17
                 _0x2060005:
000991 81a9      	LDD  R26,Y+1
000992 81ba      	LDD  R27,Y+1+1
000993 91ed      	LD   R30,X+
000994 83a9      	STD  Y+1,R26
000995 83ba      	STD  Y+1+1,R27
000996 2f1e      	MOV  R17,R30
000997 30e0      	CPI  R30,0
000998 f019      	BREQ _0x2060007
000999 2fa1      	MOV  R26,R17
00099a dfcc      	RCALL _lcd_putchar
00099b cff5      	RJMP _0x2060005
                 _0x2060007:
00099c c010      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00099d 93ba      	ST   -Y,R27
00099e 93aa      	ST   -Y,R26
00099f 931a      	ST   -Y,R17
                 _0x2060008:
0009a0 81e9      	LDD  R30,Y+1
0009a1 81fa      	LDD  R31,Y+1+1
0009a2 9631      	ADIW R30,1
0009a3 83e9      	STD  Y+1,R30
0009a4 83fa      	STD  Y+1+1,R31
0009a5 9731      	SBIW R30,1
0009a6 91e4      	LPM  R30,Z
0009a7 2f1e      	MOV  R17,R30
0009a8 30e0      	CPI  R30,0
0009a9 f019      	BREQ _0x206000A
0009aa 2fa1      	MOV  R26,R17
0009ab dfbb      	RCALL _lcd_putchar
0009ac cff3      	RJMP _0x2060008
                 _0x206000A:
                 _0x20C0002:
0009ad 8118      	LDD  R17,Y+0
                 _0x20C0003:
0009ae 9623      	ADIW R28,3
0009af 9508      	RET
                 ; .FEND
                 __long_delay_G103:
                 ; .FSTART __long_delay_G103
0009b0 27aa          clr   r26
0009b1 27bb          clr   r27
                 __long_delay0:
0009b2 9711          sbiw  r26,1         ;2 cycles
0009b3 f7f1          brne  __long_delay0 ;2 cycles
0009b4 9508      	RET
                 ; .FEND
                 __lcd_init_write_G103:
                 ; .FSTART __lcd_init_write_G103
0009b5 93aa      	ST   -Y,R26
0009b6 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0009b7 b3a7          in    r26,__lcd_direction
0009b8 6fa7          ori   r26,0xf7                ;set as output
0009b9 bba7          out   __lcd_direction,r26
0009ba b3b8          in    r27,__lcd_port
0009bb 70bf          andi  r27,0xf
0009bc 81a8          ld    r26,y
0009bd 940e 0913 	CALL __lcd_write_nibble_G103
0009bf 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
0009c0 c032      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0009c1 93aa      	ST   -Y,R26
0009c2 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0009c3 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
0009c4 81e8      	LD   R30,Y
0009c5 93e0 01b7 	STS  __lcd_maxx,R30
0009c7 58e0      	SUBI R30,-LOW(128)
                +
0009c8 93e0 01b3+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
0009ca 81e8      	LD   R30,Y
0009cb 54e0      	SUBI R30,-LOW(192)
                +
0009cc 93e0 01b4+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
0009ce 940e 0b2d 	CALL SUBOPT_0x2E
0009d0 940e 0b2d 	CALL SUBOPT_0x2E
0009d2 940e 0b2d 	CALL SUBOPT_0x2E
0009d4 dfdb      	RCALL __long_delay_G103
0009d5 e2a0      	LDI  R26,LOW(32)
0009d6 dfde      	RCALL __lcd_init_write_G103
0009d7 dfd8      	RCALL __long_delay_G103
0009d8 e2a8      	LDI  R26,LOW(40)
0009d9 940e 0b32 	CALL SUBOPT_0x2F
0009db e0a4      	LDI  R26,LOW(4)
0009dc 940e 0b32 	CALL SUBOPT_0x2F
0009de e8a5      	LDI  R26,LOW(133)
0009df 940e 0b32 	CALL SUBOPT_0x2F
0009e1 b3a7          in    r26,__lcd_direction
0009e2 70af          andi  r26,0xf                 ;set as input
0009e3 bba7          out   __lcd_direction,r26
0009e4 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
0009e5 940e 0935 	CALL _lcd_read_byte0_G103
0009e7 30e5      	CPI  R30,LOW(0x5)
0009e8 f011      	BREQ _0x206000B
0009e9 e0e0      	LDI  R30,LOW(0)
0009ea c008      	RJMP _0x20C0001
                 _0x206000B:
0009eb 940e 0902 	CALL __lcd_ready
0009ed e0a6      	LDI  R26,LOW(6)
0009ee 940e 091d 	CALL __lcd_write_data
0009f0 940e 0952 	CALL _lcd_clear
0009f2 e0e1      	LDI  R30,LOW(1)
                 _0x20C0001:
0009f3 9621      	ADIW R28,1
0009f4 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _buff:
000160           	.BYTE 0x21
                 _a:
000181           	.BYTE 0x1
                 _count_btn:
000182           	.BYTE 0x2
                 _isChildSelect:
000184           	.BYTE 0x1
                 _isTestTombol:
000185           	.BYTE 0x1
                 
                 	.ESEG
                 _garis:
000000           	.BYTE 0xE
                 _back:
00000e           	.BYTE 0xE
                 _tengah:
00001c           	.BYTE 0xE
                 
                 	.DSEG
                 _sen:
000186           	.BYTE 0x7
                 _sensor:
00018d           	.BYTE 0x2
                 _error:
00018f           	.BYTE 0x2
                 _lastError:
000191           	.BYTE 0x2
                 _kp:
000193           	.BYTE 0x2
                 _kd:
000195           	.BYTE 0x2
                 _SPEED:
000197           	.BYTE 0x2
                 _MIN_SPEED:
000199           	.BYTE 0x2
                 _MAX_SPEED:
00019b           	.BYTE 0x2
                 _count:
00019d           	.BYTE 0x2
                 _second:
00019f           	.BYTE 0x2
                 
                 	.ESEG
                 _mapMirror:
00002a           	.BYTE 0x2
                 
                 	.DSEG
                 _maxHijau:
0001a1           	.BYTE 0x2
                 _maxKuning:
0001a3           	.BYTE 0x2
                 _maxMerah:
0001a5           	.BYTE 0x2
                 _minHijau:
0001a7           	.BYTE 0x2
                 _minKuning:
0001a9           	.BYTE 0x2
                 _minMerah:
0001ab           	.BYTE 0x2
                 __seed_G102:
0001ad           	.BYTE 0x4
                 __base_y_G103:
0001b1           	.BYTE 0x4
                 __lcd_x:
0001b5           	.BYTE 0x1
                 __lcd_y:
0001b6           	.BYTE 0x1
                 __lcd_maxx:
0001b7           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0009f5 e0e7      	LDI  R30,LOW(7)
0009f6 e0f0      	LDI  R31,HIGH(7)
0009f7 168e      	CP   R8,R30
0009f8 069f      	CPC  R9,R31
0009f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
0009fa 2da8      	MOV  R26,R8
0009fb 940e 018a 	CALL _read_adc
0009fd 2e0e      	MOV  R0,R30
0009fe 01f4      	MOVW R30,R8
0009ff e1ac      	LDI  R26,LOW(_tengah)
000a00 e0b0      	LDI  R27,HIGH(_tengah)
000a01 0fee      	LSL  R30
000a02 1fff      	ROL  R31
000a03 0fae      	ADD  R26,R30
000a04 1fbf      	ADC  R27,R31
000a05 940e 0b99 	CALL __EEPROMRDW
000a07 2da0      	MOV  R26,R0
000a08 e0b0      	LDI  R27,0
000a09 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000a0a 9fea      	MUL  R30,R26
000a0b 01f0      	MOVW R30,R0
                +
000a0c 0f6e     +ADD R22 , R30
000a0d 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
000a0e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x3:
000a0f 93ea      	ST   -Y,R30
000a10 e0a0      	LDI  R26,LOW(0)
000a11 940c 093e 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
000a13 e6e0      	LDI  R30,LOW(_buff)
000a14 e0f1      	LDI  R31,HIGH(_buff)
000a15 93fa      	ST   -Y,R31
000a16 93ea      	ST   -Y,R30
000a17 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x5:
000a18 27ff      	CLR  R31
000a19 2766      	CLR  R22
000a1a 2777      	CLR  R23
000a1b 940e 0b94 	CALL __PUTPARD1
000a1d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000a1e 01f4      	MOVW R30,R8
000a1f e0a0      	LDI  R26,LOW(_garis)
000a20 e0b0      	LDI  R27,HIGH(_garis)
000a21 0fee      	LSL  R30
000a22 1fff      	ROL  R31
000a23 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000a24 e0f0      	LDI  R31,0
000a25 940e 0ba9 	CALL __EEPROMWRW
000a27 e0e0      	LDI  R30,LOW(0)
000a28 cfe6      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8:
000a29 940e 099d 	CALL _lcd_putsf
000a2b e0e0      	LDI  R30,LOW(0)
000a2c 93ea      	ST   -Y,R30
000a2d e0a1      	LDI  R26,LOW(1)
000a2e 940e 093e 	CALL _lcd_gotoxy
000a30 cfe2      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
                +
000a31 e9e9     +LDI R30 , LOW ( 2 * _0x0 + ( 25 ) )
000a32 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW1FN _0x0,25
000a33 93fa      	ST   -Y,R31
000a34 93ea      	ST   -Y,R30
000a35 01f4      	MOVW R30,R8
000a36 940e 0b54 	CALL __CWD1
000a38 940e 0b94 	CALL __PUTPARD1
000a3a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xA:
000a3b 0fae      	ADD  R26,R30
000a3c 1fbf      	ADC  R27,R31
000a3d 940e 0b99 	CALL __EEPROMRDW
000a3f 940e 0b54 	CALL __CWD1
000a41 940e 0b94 	CALL __PUTPARD1
000a43 e088      	LDI  R24,8
000a44 940e 089f 	CALL _sprintf
000a46 962c      	ADIW R28,12
000a47 e6a0      	LDI  R26,LOW(_buff)
000a48 e0b1      	LDI  R27,HIGH(_buff)
000a49 940e 098e 	CALL _lcd_puts
000a4b 98c3      	CBI  0x18,3
000a4c e6a4      	LDI  R26,LOW(100)
000a4d e0b0      	LDI  R27,0
000a4e 940e 0cad 	CALL _delay_ms
000a50 9ac3      	SBI  0x18,3
000a51 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000a52 01f4      	MOVW R30,R8
000a53 e0ae      	LDI  R26,LOW(_back)
000a54 e0b0      	LDI  R27,HIGH(_back)
000a55 0fee      	LSL  R30
000a56 1fff      	ROL  R31
000a57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000a58 0fae      	ADD  R26,R30
000a59 1fbf      	ADC  R27,R31
000a5a 940e 0b99 	CALL __EEPROMRDW
000a5c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xD:
000a5d 93aa      	ST   -Y,R26
000a5e 81e8      	LD   R30,Y
000a5f e0f0      	LDI  R31,0
000a60 bdf9      	OUT  0x28+1,R31
000a61 bde8      	OUT  0x28,R30
000a62 81e9      	LDD  R30,Y+1
000a63 e0f0      	LDI  R31,0
000a64 bdfb      	OUT  0x2A+1,R31
000a65 bdea      	OUT  0x2A,R30
000a66 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000a67 81a8      	LD   R26,Y
000a68 81b9      	LDD  R27,Y+1
000a69 940e 0bc2 	CALL __CPW02
000a6b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000a6c 81a8      	LD   R26,Y
000a6d 81b9      	LDD  R27,Y+1
000a6e 940c 0195 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x10:
000a70 81e8      	LD   R30,Y
000a71 81f9      	LDD  R31,Y+1
000a72 940e 0b54 	CALL __CWD1
000a74 940e 0c32 	CALL __CDF1
000a76 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000a77 940e 0bfb 	CALL __CFD1
000a79 93ed      	ST   X+,R30
000a7a 93fc      	ST   X,R31
000a7b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
000a7c 91e0 018d 	LDS  R30,_sensor
000a7e 91f0 018e 	LDS  R31,_sensor+1
000a80 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000a81 91e0 019b 	LDS  R30,_MAX_SPEED
000a83 91f0 019c 	LDS  R31,_MAX_SPEED+1
000a85 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000a86 91e0 0199 	LDS  R30,_MIN_SPEED
000a88 91f0 019a 	LDS  R31,_MIN_SPEED+1
000a8a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
000a8b dff0      	RCALL SUBOPT_0x12
000a8c 71ec      	ANDI R30,LOW(0x1C)
000a8d 31ec      	CPI  R30,LOW(0x1C)
000a8e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x16:
000a8f 81ea      	LDD  R30,Y+2
000a90 93ea      	ST   -Y,R30
000a91 81ab      	LDD  R26,Y+3
000a92 940e 02ad 	CALL _kiri
000a94 940c 01e6 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x17:
000a96 81ea      	LDD  R30,Y+2
000a97 93ea      	ST   -Y,R30
000a98 81ab      	LDD  R26,Y+3
000a99 940e 02a6 	CALL _kanan
000a9b 940c 01e6 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
000a9d e2aa      	LDI  R26,LOW(_mapMirror)
000a9e e0b0      	LDI  R27,HIGH(_mapMirror)
000a9f 940e 0b99 	CALL __EEPROMRDW
000aa1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
000aa2 81ea      	LDD  R30,Y+2
000aa3 81fb      	LDD  R31,Y+2+1
000aa4 93fa      	ST   -Y,R31
000aa5 93ea      	ST   -Y,R30
000aa6 81aa      	LDD  R26,Y+2
000aa7 81bb      	LDD  R27,Y+2+1
000aa8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x1A:
000aa9 93ea      	ST   -Y,R30
000aaa e0a1      	LDI  R26,LOW(1)
000aab 940c 093e 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1B:
000aad eee8      	LDI  R30,LOW(1000)
000aae e0f3      	LDI  R31,HIGH(1000)
000aaf 93fa      	ST   -Y,R31
000ab0 93ea      	ST   -Y,R30
000ab1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1C:
000ab2 93fa      	ST   -Y,R31
000ab3 93ea      	ST   -Y,R30
000ab4 eea8      	LDI  R26,LOW(1000)
000ab5 e0b3      	LDI  R27,HIGH(1000)
000ab6 940e 03fc 	CALL _scanX
000ab8 cff4      	RJMP SUBOPT_0x1B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
000ab9 eca8      	LDI  R26,LOW(200)
000aba e0b0      	LDI  R27,0
000abb 940e 0462 	CALL _belokKanan
000abd e0e5      	LDI  R30,LOW(5)
000abe e0f0      	LDI  R31,HIGH(5)
000abf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1E:
000ac0 940e 0952 	CALL _lcd_clear
000ac2 e0e0      	LDI  R30,LOW(0)
000ac3 cf4b      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1F:
000ac4 940e 099d 	CALL _lcd_putsf
000ac6 e0e0      	LDI  R30,LOW(0)
000ac7 cfe1      	RJMP SUBOPT_0x1A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x20:
000ac8 e0e0      	LDI  R30,LOW(0)
000ac9 93e0 0184 	STS  _isChildSelect,R30
000acb e0e0      	LDI  R30,LOW(0)
000acc e0f0      	LDI  R31,HIGH(0)
000acd 93fa      	ST   -Y,R31
000ace 93ea      	ST   -Y,R30
000acf e0a0      	LDI  R26,LOW(0)
000ad0 940c 04a8 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x21:
000ad2 eea8      	LDI  R26,LOW(1000)
000ad3 e0b3      	LDI  R27,HIGH(1000)
000ad4 940c 0195 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x22:
000ad6 eea8      	LDI  R26,LOW(1000)
000ad7 e0b3      	LDI  R27,HIGH(1000)
000ad8 940e 02b4 	CALL _setMotor
000ada eda0      	LDI  R26,LOW(2000)
000adb e0b7      	LDI  R27,HIGH(2000)
000adc 940c 0cad 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
000ade 940e 099d 	CALL _lcd_putsf
000ae0 e1e8      	LDI  R30,LOW(64536)
000ae1 effc      	LDI  R31,HIGH(64536)
000ae2 93fa      	ST   -Y,R31
000ae3 93ea      	ST   -Y,R30
000ae4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x24:
000ae5 e1a8      	LDI  R26,LOW(64536)
000ae6 efbc      	LDI  R27,HIGH(64536)
000ae7 940e 02b4 	CALL _setMotor
000ae9 eda0      	LDI  R26,LOW(2000)
000aea e0b7      	LDI  R27,HIGH(2000)
000aeb 940e 0cad 	CALL _delay_ms
000aed e0e0      	LDI  R30,LOW(0)
000aee cfba      	RJMP SUBOPT_0x1A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x25:
000aef e0e0      	LDI  R30,LOW(0)
000af0 e0f0      	LDI  R31,HIGH(0)
000af1 93fa      	ST   -Y,R31
000af2 93ea      	ST   -Y,R30
000af3 e0a0      	LDI  R26,LOW(0)
000af4 940c 04a8 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x26:
000af6 940e 099d 	CALL _lcd_putsf
000af8 e0e0      	LDI  R30,LOW(0)
000af9 93e0 0185 	STS  _isTestTombol,R30
000afb efa4      	LDI  R26,LOW(500)
000afc e0b1      	LDI  R27,HIGH(500)
000afd 940c 0195 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
000aff eca8      	LDI  R26,LOW(200)
000b00 e0b0      	LDI  R27,0
000b01 940c 0195 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x28:
000b03 91ed      	LD   R30,X+
000b04 91fd      	LD   R31,X+
000b05 9631      	ADIW R30,1
000b06 93fe      	ST   -X,R31
000b07 93ee      	ST   -X,R30
000b08 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x29:
000b09 91e0 0182 	LDS  R30,_count_btn
000b0b 91f0 0183 	LDS  R31,_count_btn+1
000b0d 93fa      	ST   -Y,R31
000b0e 93ea      	ST   -Y,R30
000b0f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2A:
000b10 932a      	ST   -Y,R18
000b11 85ad      	LDD  R26,Y+13
000b12 85be      	LDD  R27,Y+13+1
000b13 85ef      	LDD  R30,Y+15
000b14 89f8      	LDD  R31,Y+15+1
000b15 9509      	ICALL
000b16 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
000b17 89e8      	LDD  R30,Y+16
000b18 89f9      	LDD  R31,Y+16+1
000b19 9734      	SBIW R30,4
000b1a 8be8      	STD  Y+16,R30
000b1b 8bf9      	STD  Y+16+1,R31
000b1c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2C:
000b1d 85ad      	LDD  R26,Y+13
000b1e 85be      	LDD  R27,Y+13+1
000b1f 85ef      	LDD  R30,Y+15
000b20 89f8      	LDD  R31,Y+15+1
000b21 9509      	ICALL
000b22 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2D:
000b23 89a8      	LDD  R26,Y+16
000b24 89b9      	LDD  R27,Y+16+1
000b25 9614      	ADIW R26,4
000b26 91ed      	LD   R30,X+
000b27 91fd      	LD   R31,X+
000b28 83ee      	STD  Y+6,R30
000b29 83ff      	STD  Y+6+1,R31
000b2a 81ae      	LDD  R26,Y+6
000b2b 81bf      	LDD  R27,Y+6+1
000b2c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2E:
000b2d 940e 09b0 	CALL __long_delay_G103
000b2f e3a0      	LDI  R26,LOW(48)
000b30 940c 09b5 	JMP  __lcd_init_write_G103
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
000b32 940e 091d 	CALL __lcd_write_data
000b34 940c 09b0 	JMP  __long_delay_G103
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000b36 935a      	ST   -Y,R21
                 __SAVELOCR5:
000b37 934a      	ST   -Y,R20
                 __SAVELOCR4:
000b38 933a      	ST   -Y,R19
                 __SAVELOCR3:
000b39 932a      	ST   -Y,R18
                 __SAVELOCR2:
000b3a 931a      	ST   -Y,R17
000b3b 930a      	ST   -Y,R16
000b3c 9508      	RET
                 
                 __LOADLOCR6:
000b3d 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000b3e 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000b3f 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000b40 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000b41 8119      	LDD  R17,Y+1
000b42 8108      	LD   R16,Y
000b43 9508      	RET
                 
                 __ADDW2R15:
000b44 2400      	CLR  R0
000b45 0daf      	ADD  R26,R15
000b46 1db0      	ADC  R27,R0
000b47 9508      	RET
                 
                 __ANEGW1:
000b48 95f1      	NEG  R31
000b49 95e1      	NEG  R30
000b4a 40f0      	SBCI R31,0
000b4b 9508      	RET
                 
                 __ANEGD1:
000b4c 95f0      	COM  R31
000b4d 9560      	COM  R22
000b4e 9570      	COM  R23
000b4f 95e1      	NEG  R30
000b50 4fff      	SBCI R31,-1
000b51 4f6f      	SBCI R22,-1
000b52 4f7f      	SBCI R23,-1
000b53 9508      	RET
                 
                 __CWD1:
000b54 2f6f      	MOV  R22,R31
000b55 0f66      	ADD  R22,R22
000b56 0b66      	SBC  R22,R22
000b57 2f76      	MOV  R23,R22
000b58 9508      	RET
                 
                 __MULW12U:
000b59 9ffa      	MUL  R31,R26
000b5a 2df0      	MOV  R31,R0
000b5b 9feb      	MUL  R30,R27
000b5c 0df0      	ADD  R31,R0
000b5d 9fea      	MUL  R30,R26
000b5e 2de0      	MOV  R30,R0
000b5f 0df1      	ADD  R31,R1
000b60 9508      	RET
                 
                 __MULW12:
000b61 d01c      	RCALL __CHKSIGNW
000b62 dff6      	RCALL __MULW12U
000b63 f40e      	BRTC __MULW121
000b64 dfe3      	RCALL __ANEGW1
                 __MULW121:
000b65 9508      	RET
                 
                 __DIVW21U:
000b66 2400      	CLR  R0
000b67 2411      	CLR  R1
000b68 e190      	LDI  R25,16
                 __DIVW21U1:
000b69 0faa      	LSL  R26
000b6a 1fbb      	ROL  R27
000b6b 1c00      	ROL  R0
000b6c 1c11      	ROL  R1
000b6d 1a0e      	SUB  R0,R30
000b6e 0a1f      	SBC  R1,R31
000b6f f418      	BRCC __DIVW21U2
000b70 0e0e      	ADD  R0,R30
000b71 1e1f      	ADC  R1,R31
000b72 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000b73 60a1      	SBR  R26,1
                 __DIVW21U3:
000b74 959a      	DEC  R25
000b75 f799      	BRNE __DIVW21U1
000b76 01fd      	MOVW R30,R26
000b77 01d0      	MOVW R26,R0
000b78 9508      	RET
                 
                 __DIVW21:
000b79 d004      	RCALL __CHKSIGNW
000b7a dfeb      	RCALL __DIVW21U
000b7b f40e      	BRTC __DIVW211
000b7c dfcb      	RCALL __ANEGW1
                 __DIVW211:
000b7d 9508      	RET
                 
                 __CHKSIGNW:
000b7e 94e8      	CLT
000b7f fff7      	SBRS R31,7
000b80 c002      	RJMP __CHKSW1
000b81 dfc6      	RCALL __ANEGW1
000b82 9468      	SET
                 __CHKSW1:
000b83 ffb7      	SBRS R27,7
000b84 c006      	RJMP __CHKSW2
000b85 95b1      	NEG  R27
000b86 95a1      	NEG  R26
000b87 40b0      	SBCI R27,0
000b88 f800      	BLD  R0,0
000b89 9403      	INC  R0
000b8a fa00      	BST  R0,0
                 __CHKSW2:
000b8b 9508      	RET
                 
                 __GETW1P:
000b8c 91ed      	LD   R30,X+
000b8d 91fc      	LD   R31,X
000b8e 9711      	SBIW R26,1
000b8f 9508      	RET
                 
                 __GETW1PF:
000b90 9005      	LPM  R0,Z+
000b91 91f4      	LPM  R31,Z
000b92 2de0      	MOV  R30,R0
000b93 9508      	RET
                 
                 __PUTPARD1:
000b94 937a      	ST   -Y,R23
000b95 936a      	ST   -Y,R22
000b96 93fa      	ST   -Y,R31
000b97 93ea      	ST   -Y,R30
000b98 9508      	RET
                 
                 __EEPROMRDW:
000b99 9611      	ADIW R26,1
000b9a d002      	RCALL __EEPROMRDB
000b9b 2ffe      	MOV  R31,R30
000b9c 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000b9d 99e1      	SBIC EECR,EEWE
000b9e cffe      	RJMP __EEPROMRDB
000b9f 93ff      	PUSH R31
000ba0 b7ff      	IN   R31,SREG
000ba1 94f8      	CLI
000ba2 bbae      	OUT  EEARL,R26
000ba3 bbbf      	OUT  EEARH,R27
000ba4 9ae0      	SBI  EECR,EERE
000ba5 b3ed      	IN   R30,EEDR
000ba6 bfff      	OUT  SREG,R31
000ba7 91ff      	POP  R31
000ba8 9508      	RET
                 
                 __EEPROMWRW:
000ba9 d007      	RCALL __EEPROMWRB
000baa 9611      	ADIW R26,1
000bab 93ef      	PUSH R30
000bac 2fef      	MOV  R30,R31
000bad d003      	RCALL __EEPROMWRB
000bae 91ef      	POP  R30
000baf 9711      	SBIW R26,1
000bb0 9508      	RET
                 
                 __EEPROMWRB:
000bb1 9be1      	SBIS EECR,EEWE
000bb2 c002      	RJMP __EEPROMWRB1
000bb3 95a8      	WDR
000bb4 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000bb5 b79f      	IN   R25,SREG
000bb6 94f8      	CLI
000bb7 bbae      	OUT  EEARL,R26
000bb8 bbbf      	OUT  EEARH,R27
000bb9 9ae0      	SBI  EECR,EERE
000bba b38d      	IN   R24,EEDR
000bbb 17e8      	CP   R30,R24
000bbc f019      	BREQ __EEPROMWRB0
000bbd bbed      	OUT  EEDR,R30
000bbe 9ae2      	SBI  EECR,EEMWE
000bbf 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000bc0 bf9f      	OUT  SREG,R25
000bc1 9508      	RET
                 
                 __CPW02:
000bc2 2400      	CLR  R0
000bc3 160a      	CP   R0,R26
000bc4 060b      	CPC  R0,R27
000bc5 9508      	RET
                 
                 __ANEGF1:
000bc6 9730      	SBIW R30,0
000bc7 4060      	SBCI R22,0
000bc8 4070      	SBCI R23,0
000bc9 f009      	BREQ __ANEGF10
000bca 5870      	SUBI R23,0x80
                 __ANEGF10:
000bcb 9508      	RET
                 
                 __ROUND_REPACK:
000bcc 2355      	TST  R21
000bcd f442      	BRPL __REPACK
000bce 3850      	CPI  R21,0x80
000bcf f411      	BRNE __ROUND_REPACK0
000bd0 ffe0      	SBRS R30,0
000bd1 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000bd2 9631      	ADIW R30,1
000bd3 1f69      	ADC  R22,R25
000bd4 1f79      	ADC  R23,R25
000bd5 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000bd6 e850      	LDI  R21,0x80
000bd7 2757      	EOR  R21,R23
000bd8 f411      	BRNE __REPACK0
000bd9 935f      	PUSH R21
000bda c073      	RJMP __ZERORES
                 __REPACK0:
000bdb 3f5f      	CPI  R21,0xFF
000bdc f031      	BREQ __REPACK1
000bdd 0f66      	LSL  R22
000bde 0c00      	LSL  R0
000bdf 9557      	ROR  R21
000be0 9567      	ROR  R22
000be1 2f75      	MOV  R23,R21
000be2 9508      	RET
                 __REPACK1:
000be3 935f      	PUSH R21
000be4 2000      	TST  R0
000be5 f00a      	BRMI __REPACK2
000be6 c072      	RJMP __MAXRES
                 __REPACK2:
000be7 c06b      	RJMP __MINRES
                 
                 __UNPACK:
000be8 e850      	LDI  R21,0x80
000be9 2e19      	MOV  R1,R25
000bea 2215      	AND  R1,R21
000beb 0f88      	LSL  R24
000bec 1f99      	ROL  R25
000bed 2795      	EOR  R25,R21
000bee 0f55      	LSL  R21
000bef 9587      	ROR  R24
                 
                 __UNPACK1:
000bf0 e850      	LDI  R21,0x80
000bf1 2e07      	MOV  R0,R23
000bf2 2205      	AND  R0,R21
000bf3 0f66      	LSL  R22
000bf4 1f77      	ROL  R23
000bf5 2775      	EOR  R23,R21
000bf6 0f55      	LSL  R21
000bf7 9567      	ROR  R22
000bf8 9508      	RET
                 
                 __CFD1U:
000bf9 9468      	SET
000bfa c001      	RJMP __CFD1U0
                 __CFD1:
000bfb 94e8      	CLT
                 __CFD1U0:
000bfc 935f      	PUSH R21
000bfd dff2      	RCALL __UNPACK1
000bfe 3870      	CPI  R23,0x80
000bff f018      	BRLO __CFD10
000c00 3f7f      	CPI  R23,0xFF
000c01 f408      	BRCC __CFD10
000c02 c04b      	RJMP __ZERORES
                 __CFD10:
000c03 e156      	LDI  R21,22
000c04 1b57      	SUB  R21,R23
000c05 f4aa      	BRPL __CFD11
000c06 9551      	NEG  R21
000c07 3058      	CPI  R21,8
000c08 f40e      	BRTC __CFD19
000c09 3059      	CPI  R21,9
                 __CFD19:
000c0a f030      	BRLO __CFD17
000c0b efef      	SER  R30
000c0c efff      	SER  R31
000c0d ef6f      	SER  R22
000c0e e77f      	LDI  R23,0x7F
000c0f f977      	BLD  R23,7
000c10 c01a      	RJMP __CFD15
                 __CFD17:
000c11 2777      	CLR  R23
000c12 2355      	TST  R21
000c13 f0b9      	BREQ __CFD15
                 __CFD18:
000c14 0fee      	LSL  R30
000c15 1fff      	ROL  R31
000c16 1f66      	ROL  R22
000c17 1f77      	ROL  R23
000c18 955a      	DEC  R21
000c19 f7d1      	BRNE __CFD18
000c1a c010      	RJMP __CFD15
                 __CFD11:
000c1b 2777      	CLR  R23
                 __CFD12:
000c1c 3058      	CPI  R21,8
000c1d f028      	BRLO __CFD13
000c1e 2fef      	MOV  R30,R31
000c1f 2ff6      	MOV  R31,R22
000c20 2f67      	MOV  R22,R23
000c21 5058      	SUBI R21,8
000c22 cff9      	RJMP __CFD12
                 __CFD13:
000c23 2355      	TST  R21
000c24 f031      	BREQ __CFD15
                 __CFD14:
000c25 9576      	LSR  R23
000c26 9567      	ROR  R22
000c27 95f7      	ROR  R31
000c28 95e7      	ROR  R30
000c29 955a      	DEC  R21
000c2a f7d1      	BRNE __CFD14
                 __CFD15:
000c2b 2000      	TST  R0
000c2c f40a      	BRPL __CFD16
000c2d df1e      	RCALL __ANEGD1
                 __CFD16:
000c2e 915f      	POP  R21
000c2f 9508      	RET
                 
                 __CDF1U:
000c30 9468      	SET
000c31 c001      	RJMP __CDF1U0
                 __CDF1:
000c32 94e8      	CLT
                 __CDF1U0:
000c33 9730      	SBIW R30,0
000c34 4060      	SBCI R22,0
000c35 4070      	SBCI R23,0
000c36 f0b1      	BREQ __CDF10
000c37 2400      	CLR  R0
000c38 f026      	BRTS __CDF11
000c39 2377      	TST  R23
000c3a f412      	BRPL __CDF11
000c3b 9400      	COM  R0
000c3c df0f      	RCALL __ANEGD1
                 __CDF11:
000c3d 2e17      	MOV  R1,R23
000c3e e17e      	LDI  R23,30
000c3f 2011      	TST  R1
                 __CDF12:
000c40 f032      	BRMI __CDF13
000c41 957a      	DEC  R23
000c42 0fee      	LSL  R30
000c43 1fff      	ROL  R31
000c44 1f66      	ROL  R22
000c45 1c11      	ROL  R1
000c46 cff9      	RJMP __CDF12
                 __CDF13:
000c47 2fef      	MOV  R30,R31
000c48 2ff6      	MOV  R31,R22
000c49 2d61      	MOV  R22,R1
000c4a 935f      	PUSH R21
000c4b df8a      	RCALL __REPACK
000c4c 915f      	POP  R21
                 __CDF10:
000c4d 9508      	RET
                 
                 __ZERORES:
000c4e 27ee      	CLR  R30
000c4f 27ff      	CLR  R31
000c50 01bf      	MOVW R22,R30
000c51 915f      	POP  R21
000c52 9508      	RET
                 
                 __MINRES:
000c53 efef      	SER  R30
000c54 efff      	SER  R31
000c55 e76f      	LDI  R22,0x7F
000c56 ef7f      	SER  R23
000c57 915f      	POP  R21
000c58 9508      	RET
                 
                 __MAXRES:
000c59 efef      	SER  R30
000c5a efff      	SER  R31
000c5b e76f      	LDI  R22,0x7F
000c5c e77f      	LDI  R23,0x7F
000c5d 915f      	POP  R21
000c5e 9508      	RET
                 
                 __MULF12:
000c5f 935f      	PUSH R21
000c60 df87      	RCALL __UNPACK
000c61 3870      	CPI  R23,0x80
000c62 f359      	BREQ __ZERORES
000c63 3890      	CPI  R25,0x80
000c64 f349      	BREQ __ZERORES
000c65 2401      	EOR  R0,R1
000c66 9408      	SEC
000c67 1f79      	ADC  R23,R25
000c68 f423      	BRVC __MULF124
000c69 f324      	BRLT __ZERORES
                 __MULF125:
000c6a 2000      	TST  R0
000c6b f33a      	BRMI __MINRES
000c6c cfec      	RJMP __MAXRES
                 __MULF124:
000c6d 920f      	PUSH R0
000c6e 931f      	PUSH R17
000c6f 932f      	PUSH R18
000c70 933f      	PUSH R19
000c71 934f      	PUSH R20
000c72 2711      	CLR  R17
000c73 2722      	CLR  R18
000c74 2799      	CLR  R25
000c75 9f68      	MUL  R22,R24
000c76 01a0      	MOVW R20,R0
000c77 9f8f      	MUL  R24,R31
000c78 2d30      	MOV  R19,R0
000c79 0d41      	ADD  R20,R1
000c7a 1f59      	ADC  R21,R25
000c7b 9f6b      	MUL  R22,R27
000c7c 0d30      	ADD  R19,R0
000c7d 1d41      	ADC  R20,R1
000c7e 1f59      	ADC  R21,R25
000c7f 9f8e      	MUL  R24,R30
000c80 d027      	RCALL __MULF126
000c81 9fbf      	MUL  R27,R31
000c82 d025      	RCALL __MULF126
000c83 9f6a      	MUL  R22,R26
000c84 d023      	RCALL __MULF126
000c85 9fbe      	MUL  R27,R30
000c86 d01d      	RCALL __MULF127
000c87 9faf      	MUL  R26,R31
000c88 d01b      	RCALL __MULF127
000c89 9fae      	MUL  R26,R30
000c8a 0d11      	ADD  R17,R1
000c8b 1f29      	ADC  R18,R25
000c8c 1f39      	ADC  R19,R25
000c8d 1f49      	ADC  R20,R25
000c8e 1f59      	ADC  R21,R25
000c8f 2fe3      	MOV  R30,R19
000c90 2ff4      	MOV  R31,R20
000c91 2f65      	MOV  R22,R21
000c92 2f52      	MOV  R21,R18
000c93 914f      	POP  R20
000c94 913f      	POP  R19
000c95 912f      	POP  R18
000c96 911f      	POP  R17
000c97 900f      	POP  R0
000c98 2366      	TST  R22
000c99 f02a      	BRMI __MULF122
000c9a 0f55      	LSL  R21
000c9b 1fee      	ROL  R30
000c9c 1fff      	ROL  R31
000c9d 1f66      	ROL  R22
000c9e c002      	RJMP __MULF123
                 __MULF122:
000c9f 9573      	INC  R23
000ca0 f24b      	BRVS __MULF125
                 __MULF123:
000ca1 df2a      	RCALL __ROUND_REPACK
000ca2 915f      	POP  R21
000ca3 9508      	RET
                 
                 __MULF127:
000ca4 0d10      	ADD  R17,R0
000ca5 1d21      	ADC  R18,R1
000ca6 1f39      	ADC  R19,R25
000ca7 c002      	RJMP __MULF128
                 __MULF126:
000ca8 0d20      	ADD  R18,R0
000ca9 1d31      	ADC  R19,R1
                 __MULF128:
000caa 1f49      	ADC  R20,R25
000cab 1f59      	ADC  R21,R25
000cac 9508      	RET
                 
                 _delay_ms:
000cad 9610      	adiw r26,0
000cae f039      	breq __delay_ms1
                 __delay_ms0:
000caf 95a8      	wdr
                +
000cb0 ec8d     +LDI R24 , LOW ( 0xACD )
000cb1 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000cb2 9701     +SBIW R24 , 1
000cb3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
000cb4 9711      	sbiw r26,1
000cb5 f7c9      	brne __delay_ms0
                 __delay_ms1:
000cb6 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  48 r1 :  18 r2 :   0 r3 :   0 r4 :   4 r5 :   2 r6 :   2 r7 :   1 
r8 :  25 r9 :   7 r10:   0 r11:   0 r12:   6 r13:   7 r14:   0 r15:   4 
r16:  36 r17:  32 r18:  38 r19:  17 r20:  23 r21:  66 r22:  46 r23:  37 
r24:  24 r25:  27 r26: 345 r27: 180 r28:  23 r29:   1 r30: 586 r31: 225 
x  :  32 y  : 315 z  :  16 
Registers used: 30 out of 35 (85.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  30 add   :  25 
adiw  :  42 and   :   2 andi  :  14 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  46 
brge  :  14 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  13 
brlt  :   3 brmi  :   5 brne  :  67 brpl  :   6 brsh  :   2 brtc  :   3 
brts  :   2 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  : 292 
cbi   :  31 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  36 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   6 
cp    :  16 cpc   :  32 cpi   :  92 cpse  :   0 dec   :   6 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  15 inc   :   2 jmp   :  40 ld    :  62 ldd   : 120 ldi   : 401 
lds   :  70 lpm   :  16 lsl   :  15 lsr   :   1 mov   :  54 movw  :  49 
mul   :  16 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   2 
ori   :   9 out   :  67 pop   :  20 push  :  19 rcall :  82 ret   :  92 
reti  :   2 rjmp  : 161 rol   :  19 ror   :   7 sbc   :   5 sbci  :  10 
sbi   :  32 sbic  :   8 sbis  :   2 sbiw  :  32 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 125 std   :  43 sts   :  34 sub   :   5 subi  :  21 swap  :   2 
tst   :  13 wdr   :   2 
Instructions used: 78 out of 116 (67.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00196e   5902    608   6510   16384  39.7%
[.dseg] 0x000060 0x0001b8      0     88     88    1024   8.6%
[.eseg] 0x000000 0x00002c      0     44     44     512   8.6%

Assembly complete, 0 errors, 23 warnings
