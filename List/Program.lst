
AVRASM ver. 2.1.30  d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm Tue Oct 29 13:18:13 2024

d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1083): warning: Register r4 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1084): warning: Register r5 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1085): warning: Register r6 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1086): warning: Register r7 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1087): warning: Register r8 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1088): warning: Register r9 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1089): warning: Register r10 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1090): warning: Register r11 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1091): warning: Register r13 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1092): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 11.059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hitung=R4
                 	.DEF _hitung_msb=R5
                 	.DEF _nadc7=R6
                 	.DEF _nadc7_msb=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _k=R10
                 	.DEF _k_msb=R11
                 	.DEF _pos_servo1=R13
                 	.DEF _pos_servo2=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 015b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 06ac 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 06ca 	JMP  _timer0_comp_isr
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x6:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1134): warning: .cseg .db misalignment - padding zero byte
000035 000a      	.DB  0xA
                 _0x7:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1136): warning: .cseg .db misalignment - padding zero byte
000036 0064      	.DB  0x64
                 _0x8:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1138): warning: .cseg .db misalignment - padding zero byte
000037 00c8      	.DB  0xC8
                 _0x9:
000038 ff60      	.DB  0x60,0xFF
                 _0xA:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1142): warning: .cseg .db misalignment - padding zero byte
000039 00c8      	.DB  0xC8
                 _0xB:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1144): warning: .cseg .db misalignment - padding zero byte
00003a 00dc      	.DB  0xDC
                 _0xC:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1146): warning: .cseg .db misalignment - padding zero byte
00003b 0050      	.DB  0x50
                 _0xD:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1148): warning: .cseg .db misalignment - padding zero byte
00003c 00a5      	.DB  0xA5
                 _0xE:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1150): warning: .cseg .db misalignment - padding zero byte
00003d 00aa      	.DB  0xAA
                 _0xF:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1152): warning: .cseg .db misalignment - padding zero byte
00003e 0005      	.DB  0x5
                 _0x10:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1154): warning: .cseg .db misalignment - padding zero byte
00003f 0055      	.DB  0x55
                 _0x0:
000040 6425
000041 6425
000042 6425
000043 6425      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x25,0x64
000044 6425
000045 6425
000046 6425
000047 4200      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x0,0x42
000048 6361
000049 2061
00004a 694c
00004b 656e      	.DB  0x61,0x63,0x61,0x20,0x4C,0x69,0x6E,0x65
00004c 7300
00004d 6e65
00004e 6f73
00004f 3a72      	.DB  0x0,0x73,0x65,0x6E,0x73,0x6F,0x72,0x3A
000050 6425
000051 3d20
000052 2520
000053 2064      	.DB  0x25,0x64,0x20,0x3D,0x20,0x25,0x64,0x20
000054 0020
000055 6142
000056 6163
000057 4220      	.DB  0x20,0x0,0x42,0x61,0x63,0x61,0x20,0x42
000058 6361
000059 676b
00005a 6f72
00005b 6e75      	.DB  0x61,0x63,0x6B,0x67,0x72,0x6F,0x75,0x6E
00005c 0064
00005d 6543
00005e 746e
00005f 7265      	.DB  0x64,0x0,0x43,0x65,0x6E,0x74,0x65,0x72
000060 5020
000061 696f
000062 746e
000063 2020      	.DB  0x20,0x50,0x6F,0x69,0x6E,0x74,0x20,0x20
000064 2020
000065 7300
000066 6e65
000067 6f73      	.DB  0x20,0x20,0x0,0x73,0x65,0x6E,0x73,0x6F
000068 3a72
000069 6425
00006a 2d20
00006b 3e2d      	.DB  0x72,0x3A,0x25,0x64,0x20,0x2D,0x2D,0x3E
00006c 2520
00006d 2064
00006e 0020
00006f 6425      	.DB  0x20,0x25,0x64,0x20,0x20,0x0,0x25,0x64
000070 2020
000071 0020
000072 654d
000073 756e      	.DB  0x20,0x20,0x20,0x0,0x4D,0x65,0x6E,0x75
000074 4b00
000075 6c61
000076 6269
000077 6172      	.DB  0x0,0x4B,0x61,0x6C,0x69,0x62,0x72,0x61
000078 6973
000079 5200
00007a 6e75
00007b 4220      	.DB  0x73,0x69,0x0,0x52,0x75,0x6E,0x20,0x42
00007c 746f
00007d 5300
00007e 6e65
00007f 2073      	.DB  0x6F,0x74,0x0,0x53,0x65,0x6E,0x73,0x20
000080 6157
000081 6e72
000082 0061
000083 614d      	.DB  0x57,0x61,0x72,0x6E,0x61,0x0,0x4D,0x61
000084 2070
000085 6942
000086 7572
000087 4d00      	.DB  0x70,0x20,0x42,0x69,0x72,0x75,0x0,0x4D
000088 7061
000089 4d20
00008a 7265
00008b 6861      	.DB  0x61,0x70,0x20,0x4D,0x65,0x72,0x61,0x68
00008c 4d00
00008d 746f
00008e 726f
00008f 4200      	.DB  0x0,0x4D,0x6F,0x74,0x6F,0x72,0x0,0x42
000090 7475
000091 6f74
000092 006e
000093 6143      	.DB  0x75,0x74,0x74,0x6F,0x6E,0x0,0x43,0x61
000094 6970
000095 0074
000096 6c43
000097 6369      	.DB  0x70,0x69,0x74,0x0,0x43,0x6C,0x69,0x63
000098 206b
000099 2032
00009a 6f74
00009b 7320      	.DB  0x6B,0x20,0x32,0x20,0x74,0x6F,0x20,0x73
00009c 6174
00009d 7472
00009e 5200
00009f 6e75      	.DB  0x74,0x61,0x72,0x74,0x0,0x52,0x75,0x6E
0000a0 696e
0000a1 676e
0000a2 2e2e
0000a3 002e      	.DB  0x6E,0x69,0x6E,0x67,0x2E,0x2E,0x2E,0x0
0000a4 6554
0000a5 7473
0000a6 4d20
0000a7 746f      	.DB  0x54,0x65,0x73,0x74,0x20,0x4D,0x6F,0x74
0000a8 726f
0000a9 2b00
0000aa 3031
0000ab 3030      	.DB  0x6F,0x72,0x0,0x2B,0x31,0x30,0x30,0x30
0000ac 2b20
0000ad 3031
0000ae 3030
0000af 2d00      	.DB  0x20,0x2B,0x31,0x30,0x30,0x30,0x0,0x2D
0000b0 3031
0000b1 3030
0000b2 2d20
0000b3 3031      	.DB  0x31,0x30,0x30,0x30,0x20,0x2D,0x31,0x30
0000b4 3030
0000b5 2b00
0000b6 3031
0000b7 3030      	.DB  0x30,0x30,0x0,0x2B,0x31,0x30,0x30,0x30
0000b8 2d20
0000b9 3031
0000ba 3030
0000bb 2d00      	.DB  0x20,0x2D,0x31,0x30,0x30,0x30,0x0,0x2D
0000bc 3031
0000bd 3030
0000be 2b20
0000bf 3031      	.DB  0x31,0x30,0x30,0x30,0x20,0x2B,0x31,0x30
0000c0 3030
0000c1 4300
0000c2 696c
0000c3 6b63      	.DB  0x30,0x30,0x0,0x43,0x6C,0x69,0x63,0x6B
0000c4 3120
0000c5 7420
0000c6 206f
0000c7 7865      	.DB  0x20,0x31,0x20,0x74,0x6F,0x20,0x65,0x78
0000c8 7469
0000c9 7400
0000ca 6d6f
0000cb 6f62      	.DB  0x69,0x74,0x0,0x74,0x6F,0x6D,0x62,0x6F
0000cc 206c
0000cd 203d
0000ce 2031
0000cf 2020      	.DB  0x6C,0x20,0x3D,0x20,0x31,0x20,0x20,0x20
0000d0 2020
0000d1 7400
0000d2 6d6f
0000d3 6f62      	.DB  0x20,0x20,0x0,0x74,0x6F,0x6D,0x62,0x6F
0000d4 206c
0000d5 203d
0000d6 2032
0000d7 2020      	.DB  0x6C,0x20,0x3D,0x20,0x32,0x20,0x20,0x20
0000d8 2020
0000d9 7400
0000da 6d6f
0000db 6f62      	.DB  0x20,0x20,0x0,0x74,0x6F,0x6D,0x62,0x6F
0000dc 206c
0000dd 203d
0000de 2033
0000df 2020      	.DB  0x6C,0x20,0x3D,0x20,0x33,0x20,0x20,0x20
0000e0 2020
0000e1 7400
0000e2 6d6f
0000e3 6f62      	.DB  0x20,0x20,0x0,0x74,0x6F,0x6D,0x62,0x6F
0000e4 206c
0000e5 203d
0000e6 2034
0000e7 2020      	.DB  0x6C,0x20,0x3D,0x20,0x34,0x20,0x20,0x20
0000e8 2020
0000e9 5700
0000ea 7261
0000eb 616e      	.DB  0x20,0x20,0x0,0x57,0x61,0x72,0x6E,0x61
0000ec 003a
0000ed 7845
0000ee 7469
0000ef 6e69      	.DB  0x3A,0x0,0x45,0x78,0x69,0x74,0x69,0x6E
0000f0 2e67
0000f1 2e2e
0000f2 5400
0000f3 7365      	.DB  0x67,0x2E,0x2E,0x2E,0x0,0x54,0x65,0x73
0000f4 2074
0000f5 6143
0000f6 6970
0000f7 0074      	.DB  0x74,0x20,0x43,0x61,0x70,0x69,0x74,0x0
0000f8 6143
0000f9 6970
0000fa 3a74
0000fb 3e20      	.DB  0x43,0x61,0x70,0x69,0x74,0x3A,0x20,0x3E
0000fc 3c20
0000fd 4300
0000fe 7061
0000ff 7469      	.DB  0x20,0x3C,0x0,0x43,0x61,0x70,0x69,0x74
000100 203a
000101 203c
000102 003e
000103 6143      	.DB  0x3A,0x20,0x3C,0x20,0x3E,0x0,0x43,0x61
000104 6970
000105 3a74
000106 5c20
000107 002f      	.DB  0x70,0x69,0x74,0x3A,0x20,0x5C,0x2F,0x0
000108 6143
000109 6970
00010a 3a74
00010b 2f20      	.DB  0x43,0x61,0x70,0x69,0x74,0x3A,0x20,0x2F
00010c 005c
00010d 6f48
00010e 646c
00010f 3120      	.DB  0x5C,0x0,0x48,0x6F,0x6C,0x64,0x20,0x31
000110 7420
000111 206f
000112 7865
000113 7469      	.DB  0x20,0x74,0x6F,0x20,0x65,0x78,0x69,0x74
000114 5800
000115 0044
000116 6325
000117 6425      	.DB  0x0,0x58,0x44,0x0,0x25,0x63,0x25,0x64
000118 2000
000119 2020
00011a 2020
00011b 454c      	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x4C,0x45
00011c 4947
00011d 4e4f
00011e 2020
00011f 2020      	.DB  0x47,0x49,0x4F,0x4E,0x20,0x20,0x20,0x20
000120 0020
000121 4d20
000122 4e41
000123 3420      	.DB  0x20,0x0,0x20,0x4D,0x41,0x4E,0x20,0x34
000124 4a20
000125 4d4f
000126 4142
000127 474e      	.DB  0x20,0x4A,0x4F,0x4D,0x42,0x41,0x4E,0x47
000128 0020      	.DB  0x20,0x0
                 _0x2040060:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1216): warning: .cseg .db misalignment - padding zero byte
000129 0001      	.DB  0x1
                 _0x2040000:
00012a 4e2d
00012b 4e41
00012c 4900
00012d 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1219): warning: .cseg .db misalignment - padding zero byte
00012e 0000      	.DB  0x0
                 _0x2060003:
00012f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000130 0004      	.DW  0x04
000131 0004      	.DW  0x04
000132 0066      	.DW  __REG_VARS*2
                 
000133 0001      	.DW  0x01
000134 0193      	.DW  _kp
000135 006a      	.DW  _0x6*2
                 
000136 0001      	.DW  0x01
000137 0195      	.DW  _kd
000138 006c      	.DW  _0x7*2
                 
000139 0001      	.DW  0x01
00013a 0197      	.DW  _SPEED
00013b 006e      	.DW  _0x8*2
                 
00013c 0002      	.DW  0x02
00013d 0199      	.DW  _MIN_SPEED
00013e 0070      	.DW  _0x9*2
                 
00013f 0001      	.DW  0x01
000140 019b      	.DW  _MAX_SPEED
000141 0072      	.DW  _0xA*2
                 
000142 0001      	.DW  0x01
000143 01a1      	.DW  _maxHijau
000144 0074      	.DW  _0xB*2
                 
000145 0001      	.DW  0x01
000146 01a3      	.DW  _maxKuning
000147 0076      	.DW  _0xC*2
                 
000148 0001      	.DW  0x01
000149 01a5      	.DW  _maxMerah
00014a 0078      	.DW  _0xD*2
                 
00014b 0001      	.DW  0x01
00014c 01a7      	.DW  _minHijau
00014d 007a      	.DW  _0xE*2
                 
00014e 0001      	.DW  0x01
00014f 01a9      	.DW  _minKuning
000150 007c      	.DW  _0xF*2
                 
000151 0001      	.DW  0x01
000152 01ab      	.DW  _minMerah
000153 007e      	.DW  _0x10*2
                 
000154 0001      	.DW  0x01
000155 01ad      	.DW  __seed_G102
000156 0252      	.DW  _0x2040060*2
                 
000157 0002      	.DW  0x02
000158 01b1      	.DW  __base_y_G103
000159 025e      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
00015a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00015b 94f8      	CLI
00015c 27ee      	CLR  R30
00015d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00015e e0f1      	LDI  R31,1
00015f bffb      	OUT  GICR,R31
000160 bfeb      	OUT  GICR,R30
000161 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000162 e1f8      	LDI  R31,0x18
000163 bdf1      	OUT  WDTCR,R31
000164 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000165 e08d      	LDI  R24,(14-2)+1
000166 e0a2      	LDI  R26,2
000167 27bb      	CLR  R27
                 __CLEAR_REG:
000168 93ed      	ST   X+,R30
000169 958a      	DEC  R24
00016a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00016b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00016c e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00016d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00016e 93ed      	ST   X+,R30
00016f 9701      	SBIW R24,1
000170 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000171 e6e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000172 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000173 9185      	LPM  R24,Z+
000174 9195      	LPM  R25,Z+
000175 9700      	SBIW R24,0
000176 f061      	BREQ __GLOBAL_INI_END
000177 91a5      	LPM  R26,Z+
000178 91b5      	LPM  R27,Z+
000179 9005      	LPM  R0,Z+
00017a 9015      	LPM  R1,Z+
00017b 01bf      	MOVW R22,R30
00017c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00017d 9005      	LPM  R0,Z+
00017e 920d      	ST   X+,R0
00017f 9701      	SBIW R24,1
000180 f7e1      	BRNE __GLOBAL_INI_LOOP
000181 01fb      	MOVW R30,R22
000182 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000183 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000184 bfed      	OUT  SPL,R30
000185 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000186 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000187 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000188 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000189 940c 06cb 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                    .equ __lcd_port=0x18 ;PORTB
                 ; 0000 0029 #endasm
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0030 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0031 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
00018b 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00018c 81e8      	LD   R30,Y
00018d 66e0      	ORI  R30,LOW(0x60)
00018e b9e7      	OUT  0x7,R30
                 ; 0000 0032 // Start the AD conversion
                 ; 0000 0033 ADCSRA|=0x40;
00018f 9a36      	SBI  0x6,6
                 ; 0000 0034 // Wait for the AD conversion to complete
                 ; 0000 0035 while ((ADCSRA & 0x10)==0);
                 _0x3:
000190 9b34      	SBIS 0x6,4
000191 cffe      	RJMP _0x3
                 ; 0000 0036 ADCSRA|=0x10;
000192 9a34      	SBI  0x6,4
                 ; 0000 0037 return ADCH;
000193 b1e5      	IN   R30,0x5
000194 9621      	ADIW R28,1
000195 9508      	RET
                 ; 0000 0038 }
                 ; .FEND
                 ;int hitung = 0;
                 ;unsigned int nadc7 = 0;
                 ;char buff[33];
                 ;int i, k;
                 ;unsigned char pos_servo1, pos_servo2, a;
                 ;int count_btn = 0;
                 ;int count_child_btn = 0;
                 ;bool isChildSelect = false;
                 ;bool isTestTombol = false;
                 ;eeprom int garis[7], back[7], tengah[7];
                 ;char sen[7];
                 ;int sensor;
                 ;int error = 0;
                 ;int lastError = 0;
                 ;int kp = 10;
                 
                 	.DSEG
                 ;int kd = 100;
                 ;int SPEED = 200;
                 ;int MIN_SPEED = -160;
                 ;int MAX_SPEED = 200;
                 ;int count = 0;
                 ;int second = 0;
                 ;int positionD = 0;
                 ;eeprom int mapMirror; // 0 - map/lintasan bagian biru, 1 - map/lintasan bagian m ...
                 ;eeprom char pointPos;
                 ;eeprom int ringPos;
                 ;int maxHijau = 220;
                 ;int maxKuning = 80;
                 ;int maxMerah = 165;
                 ;int minHijau = 170;
                 ;int minKuning = 5;
                 ;int minMerah = 85;
                 ;void delay(int ms)
                 ; 0000 0059 {
                 
                 	.CSEG
                 _delay:
                 ; .FSTART _delay
                 ;delay_ms(ms);
000196 93ba      	ST   -Y,R27
000197 93aa      	ST   -Y,R26
                 ;	ms -> Y+0
000198 81a8      	LD   R26,Y
000199 81b9      	LDD  R27,Y+1
00019a 940e 0d52 	CALL _delay_ms
00019c c17f      	RJMP _0x20C0009
                 ; .FEND
                 ;void lcd_kedip(int ulangi)
                 ;for(i = 0; i < ulangi; i++)
                 ;	ulangi -> Y+0
                 ;lampu=0;
                 ;delay_ms(100);
                 ;lampu=1;
                 ;delay_ms(100);
                 ;void konvert_logic()
                 ; 0000 005A {
                 _konvert_logic:
                 ; .FSTART _konvert_logic
                 ;for(i = 0; i < 7; i++)
00019d 2488      	CLR  R8
00019e 2499      	CLR  R9
                 _0x19:
00019f 940e 0a8c 	CALL SUBOPT_0x0
0001a1 f4d4      	BRGE _0x1A
                 ;if(read_adc(i) > tengah[i]) {
0001a2 940e 0a91 	CALL SUBOPT_0x1
0001a4 17ea      	CP   R30,R26
0001a5 07fb      	CPC  R31,R27
0001a6 f434      	BRGE _0x1B
                 ;sen[i]=1;
0001a7 e8a6      	LDI  R26,LOW(_sen)
0001a8 e0b1      	LDI  R27,HIGH(_sen)
0001a9 0da8      	ADD  R26,R8
0001aa 1db9      	ADC  R27,R9
0001ab e0e1      	LDI  R30,LOW(1)
0001ac c00a      	RJMP _0x164
                 ;else if(read_adc(i) < tengah[i]) {
                 _0x1B:
0001ad 940e 0a91 	CALL SUBOPT_0x1
0001af 17ae      	CP   R26,R30
0001b0 07bf      	CPC  R27,R31
0001b1 f434      	BRGE _0x1D
                 ;sen[i]=0;
0001b2 e8a6      	LDI  R26,LOW(_sen)
0001b3 e0b1      	LDI  R27,HIGH(_sen)
0001b4 0da8      	ADD  R26,R8
0001b5 1db9      	ADC  R27,R9
0001b6 e0e0      	LDI  R30,LOW(0)
                 _0x164:
0001b7 93ec      	ST   X,R30
                 _0x1D:
0001b8 01f4      	MOVW R30,R8
0001b9 9631      	ADIW R30,1
0001ba 014f      	MOVW R8,R30
0001bb cfe3      	RJMP _0x19
                 _0x1A:
0001bc 9508      	RET
                 ; .FEND
                 ;void logika()
                 _logika:
                 ; .FSTART _logika
                 ;sensor = (sen[6] * 64) + (sen[5] * 32) + (sen[4] * 16) + (sen[3] * 8) + (sen[2]  ...
                +
0001bd 91a0 018c+LDS R26 , _sen + ( 6 )
                 	__GETB2MN _sen,6
0001bf e4e0      	LDI  R30,LOW(64)
0001c0 9fea      	MUL  R30,R26
0001c1 01b0      	MOVW R22,R0
                +
0001c2 91a0 018b+LDS R26 , _sen + ( 5 )
                 	__GETB2MN _sen,5
0001c4 e2e0      	LDI  R30,LOW(32)
0001c5 940e 0aa1 	CALL SUBOPT_0x2
                +
0001c7 91a0 018a+LDS R26 , _sen + ( 4 )
                 	__GETB2MN _sen,4
0001c9 e1e0      	LDI  R30,LOW(16)
0001ca 940e 0aa1 	CALL SUBOPT_0x2
                +
0001cc 91a0 0189+LDS R26 , _sen + ( 3 )
                 	__GETB2MN _sen,3
0001ce e0e8      	LDI  R30,LOW(8)
0001cf 940e 0aa1 	CALL SUBOPT_0x2
                +
0001d1 91a0 0188+LDS R26 , _sen + ( 2 )
                 	__GETB2MN _sen,2
0001d3 e0e4      	LDI  R30,LOW(4)
0001d4 940e 0aa1 	CALL SUBOPT_0x2
                +
0001d6 91a0 0187+LDS R26 , _sen + ( 1 )
                 	__GETB2MN _sen,1
0001d8 e0e2      	LDI  R30,LOW(2)
0001d9 940e 0aa1 	CALL SUBOPT_0x2
0001db 91a0 0186 	LDS  R26,_sen
0001dd e0e1      	LDI  R30,LOW(1)
0001de 9fea      	MUL  R30,R26
0001df 01f0      	MOVW R30,R0
0001e0 0fe6      	ADD  R30,R22
0001e1 1ff7      	ADC  R31,R23
0001e2 93e0 018d 	STS  _sensor,R30
0001e4 93f0 018e 	STS  _sensor+1,R31
0001e6 9508      	RET
                 ; .FEND
                 ;void cek_sensor()
                 _cek_sensor:
                 ; .FSTART _cek_sensor
                 ;konvert_logic();
0001e7 dfb5      	RCALL _konvert_logic
                 ;logika();
0001e8 dfd4      	RCALL _logika
0001e9 9508      	RET
                 ; .FEND
                 ;void display_sensor()
                 _display_sensor:
                 ; .FSTART _display_sensor
                 ;konvert_logic();
0001ea dfb2      	RCALL _konvert_logic
                 ;lcd_gotoxy(9, 0);
0001eb e0e9      	LDI  R30,LOW(9)
0001ec 940e 0aa6 	CALL SUBOPT_0x3
                 ;sprintf(buff, "%d%d%d%d%d%d%d", sen[0] , sen[1] , sen[2], sen[3], sen[4], sen[5] ...
0001ee 940e 0aaa 	CALL SUBOPT_0x4
                +
0001f0 e8e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001f1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001f2 93fa      	ST   -Y,R31
0001f3 93ea      	ST   -Y,R30
0001f4 91e0 0186 	LDS  R30,_sen
0001f6 940e 0aaf 	CALL SUBOPT_0x5
                +
0001f8 91e0 0187+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
0001fa 940e 0aaf 	CALL SUBOPT_0x5
                +
0001fc 91e0 0188+LDS R30 , _sen + ( 2 )
                 	__GETB1MN _sen,2
0001fe 940e 0aaf 	CALL SUBOPT_0x5
                +
000200 91e0 0189+LDS R30 , _sen + ( 3 )
                 	__GETB1MN _sen,3
000202 940e 0aaf 	CALL SUBOPT_0x5
                +
000204 91e0 018a+LDS R30 , _sen + ( 4 )
                 	__GETB1MN _sen,4
000206 940e 0aaf 	CALL SUBOPT_0x5
                +
000208 91e0 018b+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
00020a 940e 0aaf 	CALL SUBOPT_0x5
                +
00020c 91e0 018c+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
00020e 940e 0aaf 	CALL SUBOPT_0x5
000210 e18c      	LDI  R24,28
000211 940e 0936 	CALL _sprintf
000213 96a0      	ADIW R28,32
                 ;lcd_puts(buff);
000214 c492      	RJMP _0x20C0006
                 ; .FEND
                 ;void scan_garis()
                 _scan_garis:
                 ; .FSTART _scan_garis
                 ;for (i = 0; i < 7; i++)
000215 2488      	CLR  R8
000216 2499      	CLR  R9
                 _0x1F:
000217 940e 0a8c 	CALL SUBOPT_0x0
000219 f4d4      	BRGE _0x20
                 ;garis[i] = read_adc(i);
00021a 940e 0ab5 	CALL SUBOPT_0x6
00021c 0fea      	ADD  R30,R26
00021d 1ffb      	ADC  R31,R27
00021e 93ff      	PUSH R31
00021f 93ef      	PUSH R30
000220 2da8      	MOV  R26,R8
000221 df69      	RCALL _read_adc
000222 91af      	POP  R26
000223 91bf      	POP  R27
000224 940e 0abb 	CALL SUBOPT_0x7
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Line");
                +
000226 e8af     +LDI R26 , LOW ( 2 * _0x0 + ( 15 ) )
000227 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW2FN _0x0,15
000228 940e 0ac0 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, garis[i]);
00022a 940e 0ac8 	CALL SUBOPT_0x9
00022c 940e 0ab5 	CALL SUBOPT_0x6
00022e 940e 0ad2 	CALL SUBOPT_0xA
                 ;lcd_puts(buff);
                 ;lampu = 0;
                 ;delay_ms(100);
                 ;lampu = 1;
000230 01f4      	MOVW R30,R8
000231 9631      	ADIW R30,1
000232 014f      	MOVW R8,R30
000233 cfe3      	RJMP _0x1F
                 _0x20:
000234 9508      	RET
                 ; .FEND
                 ;void scan_back()
                 _scan_back:
                 ; .FSTART _scan_back
                 ;for (i = 0; i < 7; i++)
000235 2488      	CLR  R8
000236 2499      	CLR  R9
                 _0x26:
000237 940e 0a8c 	CALL SUBOPT_0x0
000239 f4d4      	BRGE _0x27
                 ;back[i] = read_adc(i);
00023a 940e 0ae9 	CALL SUBOPT_0xB
00023c 0fea      	ADD  R30,R26
00023d 1ffb      	ADC  R31,R27
00023e 93ff      	PUSH R31
00023f 93ef      	PUSH R30
000240 2da8      	MOV  R26,R8
000241 df49      	RCALL _read_adc
000242 91af      	POP  R26
000243 91bf      	POP  R27
000244 940e 0abb 	CALL SUBOPT_0x7
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Background");
                +
000246 eaaa     +LDI R26 , LOW ( 2 * _0x0 + ( 42 ) )
000247 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 42 ) )
                 	__POINTW2FN _0x0,42
000248 940e 0ac0 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, back[i]);
00024a 940e 0ac8 	CALL SUBOPT_0x9
00024c 940e 0ae9 	CALL SUBOPT_0xB
00024e 940e 0ad2 	CALL SUBOPT_0xA
                 ;lcd_puts(buff);
                 ;lampu = 0;
                 ;delay_ms(100);
                 ;lampu = 1;
000250 01f4      	MOVW R30,R8
000251 9631      	ADIW R30,1
000252 014f      	MOVW R8,R30
000253 cfe3      	RJMP _0x26
                 _0x27:
000254 9508      	RET
                 ; .FEND
                 ;void hit_tengah()
                 _hit_tengah:
                 ; .FSTART _hit_tengah
                 ;for (i = 0; i < 7; i++)
000255 2488      	CLR  R8
000256 2499      	CLR  R9
                 _0x2D:
000257 940e 0a8c 	CALL SUBOPT_0x0
000259 f00c      	BRLT PC+2
00025a c040      	RJMP _0x2E
                 ;tengah[i] = (back[i] + garis[i]) / 2;
00025b 01f4      	MOVW R30,R8
00025c e1ac      	LDI  R26,LOW(_tengah)
00025d e0b0      	LDI  R27,HIGH(_tengah)
00025e 0fee      	LSL  R30
00025f 1fff      	ROL  R31
000260 0fea      	ADD  R30,R26
000261 1ffb      	ADC  R31,R27
000262 01bf      	MOVW R22,R30
000263 940e 0ae9 	CALL SUBOPT_0xB
000265 940e 0aef 	CALL SUBOPT_0xC
000267 010f      	MOVW R0,R30
000268 940e 0ab5 	CALL SUBOPT_0x6
00026a 940e 0aef 	CALL SUBOPT_0xC
00026c 01d0      	MOVW R26,R0
00026d 0fae      	ADD  R26,R30
00026e 1fbf      	ADC  R27,R31
00026f e0e2      	LDI  R30,LOW(2)
000270 e0f0      	LDI  R31,HIGH(2)
000271 940e 0c1e 	CALL __DIVW21
000273 01db      	MOVW R26,R22
000274 940e 0c4e 	CALL __EEPROMWRW
                 ;lcd_gotoxy(0, 0);
000276 e0e0      	LDI  R30,LOW(0)
000277 940e 0aa6 	CALL SUBOPT_0x3
                 ;lcd_putsf("Center Point    ");
                +
000279 ebaa     +LDI R26 , LOW ( 2 * _0x0 + ( 58 ) )
00027a e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 58 ) )
                 	__POINTW2FN _0x0,58
00027b 940e 0ac0 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d --> %d  ", i, tengah[i]);
                +
00027d eceb     +LDI R30 , LOW ( 2 * _0x0 + ( 75 ) )
00027e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 75 ) )
                 	__POINTW1FN _0x0,75
00027f 93fa      	ST   -Y,R31
000280 93ea      	ST   -Y,R30
000281 01f4      	MOVW R30,R8
000282 940e 0af4 	CALL SUBOPT_0xD
000284 01f4      	MOVW R30,R8
000285 e1ac      	LDI  R26,LOW(_tengah)
000286 e0b0      	LDI  R27,HIGH(_tengah)
000287 0fee      	LSL  R30
000288 1fff      	ROL  R31
000289 940e 0aef 	CALL SUBOPT_0xC
00028b 940e 0af4 	CALL SUBOPT_0xD
00028d e088      	LDI  R24,8
00028e 940e 0936 	CALL _sprintf
000290 962c      	ADIW R28,12
                 ;lcd_puts(buff);
000291 e6a0      	LDI  R26,LOW(_buff)
000292 e0b1      	LDI  R27,HIGH(_buff)
000293 940e 0a25 	CALL _lcd_puts
                 ;lampu = 0;
000295 98c3      	CBI  0x18,3
                 ;lampu = 1;
000296 9ac3      	SBI  0x18,3
000297 01f4      	MOVW R30,R8
000298 9631      	ADIW R30,1
000299 014f      	MOVW R8,R30
00029a cfbc      	RJMP _0x2D
                 _0x2E:
00029b 9508      	RET
                 ; .FEND
                 ;void cekdatasensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", garis[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 0);
                 ;sprintf(buff, " %d  ", back[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, " %d  ", tengah[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 1);
                 ;sprintf(buff, " %d  ", read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(200);
                 ;void maju(unsigned char ki, unsigned char ka)
                 ; 0000 005B {
                 _maju:
                 ; .FSTART _maju
                 ;pwmka = ka;
00029c 940e 0af9 	CALL SUBOPT_0xE
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
00029e 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
00029f 9893      	CBI  0x12,3
                 ;PORTD.6 = 0;
0002a0 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
0002a1 9a97      	SBI  0x12,7
0002a2 c079      	RJMP _0x20C0009
                 ; .FEND
                 ;void mundur(unsigned char ki, unsigned char ka)
                 ;pwmka = ka;
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
                 ;PORTD.3 = 1;
                 ;PORTD.6 = 1;
                 ;PORTD.7 = 0;
                 ;void kanan(unsigned char ki, unsigned char ka)
                 _kanan:
                 ; .FSTART _kanan
                 ;pwmka = ka;
0002a3 940e 0af9 	CALL SUBOPT_0xE
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
0002a5 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002a6 9a93      	SBI  0x12,3
                 ;PORTD.6 = 0;
0002a7 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
0002a8 9a97      	SBI  0x12,7
0002a9 c072      	RJMP _0x20C0009
                 ; .FEND
                 ;void kiri(unsigned char ki, unsigned char ka)
                 _kiri:
                 ; .FSTART _kiri
                 ;pwmka = ka;
0002aa 940e 0af9 	CALL SUBOPT_0xE
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
0002ac 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
0002ad 9893      	CBI  0x12,3
                 ;PORTD.6 = 1;
0002ae 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
0002af 9897      	CBI  0x12,7
0002b0 c06b      	RJMP _0x20C0009
                 ; .FEND
                 ;void setMotor(int ki, int ka)
                 _setMotor:
                 ; .FSTART _setMotor
                 ;pwmki = abs(ki);
0002b1 93ba      	ST   -Y,R27
0002b2 93aa      	ST   -Y,R26
                 ;	ki -> Y+2
                 ;	ka -> Y+0
0002b3 81aa      	LDD  R26,Y+2
0002b4 81bb      	LDD  R27,Y+2+1
0002b5 940e 098b 	CALL _abs
0002b7 bdfb      	OUT  0x2A+1,R31
0002b8 bdea      	OUT  0x2A,R30
                 ;if (ki > 0)
0002b9 81aa      	LDD  R26,Y+2
0002ba 81bb      	LDD  R27,Y+2+1
0002bb 940e 0c67 	CALL __CPW02
0002bd f41c      	BRGE _0x56
                 ;PORTD.2 = 1;
0002be 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
0002bf 9893      	CBI  0x12,3
                 ;else
0002c0 c002      	RJMP _0x5B
                 _0x56:
                 ;PORTD.2 = 0;
0002c1 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002c2 9a93      	SBI  0x12,3
                 _0x5B:
                 ;pwmka = abs(ka);
0002c3 81a8      	LD   R26,Y
0002c4 81b9      	LDD  R27,Y+1
0002c5 940e 098b 	CALL _abs
0002c7 bdf9      	OUT  0x28+1,R31
0002c8 bde8      	OUT  0x28,R30
                 ;if (ka > 0)
0002c9 940e 0b03 	CALL SUBOPT_0xF
0002cb f41c      	BRGE _0x60
                 ;PORTD.7 = 1;
0002cc 9a97      	SBI  0x12,7
                 ;PORTD.6 = 0;
0002cd 9896      	CBI  0x12,6
                 ;else
0002ce c002      	RJMP _0x65
                 _0x60:
                 ;PORTD.7 = 0;
0002cf 9897      	CBI  0x12,7
                 ;PORTD.6 = 1;
0002d0 9a96      	SBI  0x12,6
                 _0x65:
0002d1 c19a      	RJMP _0x20C0008
                 ; .FEND
                 ;void rem(int nilai_rem)
                 _rem:
                 ; .FSTART _rem
                 ;PORTD .4 = 1;
0002d2 93ba      	ST   -Y,R27
0002d3 93aa      	ST   -Y,R26
                 ;	nilai_rem -> Y+0
0002d4 9a94      	SBI  0x12,4
                 ;PORTD .5 = 1;
0002d5 9a95      	SBI  0x12,5
                 ;PORTD .2 = 0;
0002d6 9892      	CBI  0x12,2
                 ;PORTD .3 = 0;
0002d7 9893      	CBI  0x12,3
                 ;PORTD .6 = 0;
0002d8 9896      	CBI  0x12,6
                 ;PORTD .7 = 0;
0002d9 9897      	CBI  0x12,7
                 ;delay_ms(nilai_rem);
0002da 81a8      	LD   R26,Y
0002db 81b9      	LDD  R27,Y+1
0002dc 940e 0d52 	CALL _delay_ms
0002de c03d      	RJMP _0x20C0009
                 ; .FEND
                 ;void maju_delay(int kec, int lama)
                 _maju_delay:
                 ; .FSTART _maju_delay
                 ;maju(kec, kec);
0002df 93ba      	ST   -Y,R27
0002e0 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
0002e1 81ea      	LDD  R30,Y+2
0002e2 93ea      	ST   -Y,R30
0002e3 81ab      	LDD  R26,Y+3
0002e4 dfb7      	RCALL _maju
                 ;delay(lama);
0002e5 940e 0b08 	CALL SUBOPT_0x10
0002e7 c184      	RJMP _0x20C0008
                 ; .FEND
                 ;void pilihSpeed(int kec)
                 _pilihSpeed:
                 ; .FSTART _pilihSpeed
                 ;kp = kec * 0.15;
0002e8 93ba      	ST   -Y,R27
0002e9 93aa      	ST   -Y,R26
                 ;	kec -> Y+0
0002ea 940e 0b0c 	CALL SUBOPT_0x11
                +
0002ec e9aa     +LDI R26 , LOW ( 0x3E19999A )
0002ed e9b9     +LDI R27 , HIGH ( 0x3E19999A )
0002ee e189     +LDI R24 , BYTE3 ( 0x3E19999A )
0002ef e39e     +LDI R25 , BYTE4 ( 0x3E19999A )
                 	__GETD2N 0x3E19999A
0002f0 940e 0d04 	CALL __MULF12
0002f2 e9a3      	LDI  R26,LOW(_kp)
0002f3 e0b1      	LDI  R27,HIGH(_kp)
0002f4 940e 0b13 	CALL SUBOPT_0x12
                 ;kd = kec * 0.6;
0002f6 940e 0b0c 	CALL SUBOPT_0x11
                +
0002f8 e9aa     +LDI R26 , LOW ( 0x3F19999A )
0002f9 e9b9     +LDI R27 , HIGH ( 0x3F19999A )
0002fa e189     +LDI R24 , BYTE3 ( 0x3F19999A )
0002fb e39f     +LDI R25 , BYTE4 ( 0x3F19999A )
                 	__GETD2N 0x3F19999A
0002fc 940e 0d04 	CALL __MULF12
0002fe e9a5      	LDI  R26,LOW(_kd)
0002ff e0b1      	LDI  R27,HIGH(_kd)
000300 940e 0b13 	CALL SUBOPT_0x12
                 ;SPEED = kec;
000302 81e8      	LD   R30,Y
000303 81f9      	LDD  R31,Y+1
000304 93e0 0197 	STS  _SPEED,R30
000306 93f0 0198 	STS  _SPEED+1,R31
                 ;MIN_SPEED = -(kec * 0.75);
000308 940e 0b0c 	CALL SUBOPT_0x11
                +
00030a e0a0     +LDI R26 , LOW ( 0x3F400000 )
00030b e0b0     +LDI R27 , HIGH ( 0x3F400000 )
00030c e480     +LDI R24 , BYTE3 ( 0x3F400000 )
00030d e39f     +LDI R25 , BYTE4 ( 0x3F400000 )
                 	__GETD2N 0x3F400000
00030e 940e 0d04 	CALL __MULF12
000310 940e 0c6b 	CALL __ANEGF1
000312 e9a9      	LDI  R26,LOW(_MIN_SPEED)
000313 e0b1      	LDI  R27,HIGH(_MIN_SPEED)
000314 940e 0b13 	CALL SUBOPT_0x12
                 ;MAX_SPEED = kec;
000316 81e8      	LD   R30,Y
000317 81f9      	LDD  R31,Y+1
000318 93e0 019b 	STS  _MAX_SPEED,R30
00031a 93f0 019c 	STS  _MAX_SPEED+1,R31
                 _0x20C0009:
00031c 9622      	ADIW R28,2
00031d 9508      	RET
                 ; .FEND
                 ;void maju_cari_garis()
                 ;maju(180, 182);
                 ;cek_sensor(); // 0b01000000)!=0b00000000)
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;rem(100);
                 ;void parkir()
                 ;lampu = 0;
                 ;while (1)
                 ;rem(100);
                 ;void scan(int kec)
                 _scan:
                 ; .FSTART _scan
                 ;int rateError;
                 ;int moveVal, moveLeft, moveRight;
                 ;pilihSpeed(kec);
00031e 93ba      	ST   -Y,R27
00031f 93aa      	ST   -Y,R26
000320 9722      	SBIW R28,2
000321 940e 0bdb 	CALL __SAVELOCR6
                 ;	kec -> Y+8
                 ;	rateError -> R16,R17
                 ;	moveVal -> R18,R19
                 ;	moveLeft -> R20,R21
                 ;	moveRight -> Y+6
000323 85a8      	LDD  R26,Y+8
000324 85b9      	LDD  R27,Y+8+1
000325 dfc2      	RCALL _pilihSpeed
                 ;sensor = sensor & 0b01111111;
000326 940e 0b18 	CALL SUBOPT_0x13
000328 77ef      	ANDI R30,LOW(0x7F)
000329 70f0      	ANDI R31,HIGH(0x7F)
00032a 93e0 018d 	STS  _sensor,R30
00032c 93f0 018e 	STS  _sensor+1,R31
                 ;switch (sensor) //  1=kiri 8=kanan
00032e 940e 0b18 	CALL SUBOPT_0x13
                 ;{               //  7......1
                 ;case 0b00000001:
000330 30e1      	CPI  R30,LOW(0x1)
000331 e0a0      	LDI  R26,HIGH(0x1)
000332 07fa      	CPC  R31,R26
000333 f419      	BRNE _0x81
                 ;error = -6;
000334 efea      	LDI  R30,LOW(65530)
000335 efff      	LDI  R31,HIGH(65530)
000336 c056      	RJMP _0x165
                 ;break; // DOMINAN KANAN
                 ;case 0b00000011:
                 _0x81:
000337 30e3      	CPI  R30,LOW(0x3)
000338 e0a0      	LDI  R26,HIGH(0x3)
000339 07fa      	CPC  R31,R26
00033a f419      	BRNE _0x82
                 ;error = -5;
00033b efeb      	LDI  R30,LOW(65531)
00033c efff      	LDI  R31,HIGH(65531)
00033d c04f      	RJMP _0x165
                 ;break;
                 ;case 0b00000010:
                 _0x82:
00033e 30e2      	CPI  R30,LOW(0x2)
00033f e0a0      	LDI  R26,HIGH(0x2)
000340 07fa      	CPC  R31,R26
000341 f419      	BRNE _0x83
                 ;error = -4;
000342 efec      	LDI  R30,LOW(65532)
000343 efff      	LDI  R31,HIGH(65532)
000344 c048      	RJMP _0x165
                 ;break;
                 ;case 0b00000110:
                 _0x83:
000345 30e6      	CPI  R30,LOW(0x6)
000346 e0a0      	LDI  R26,HIGH(0x6)
000347 07fa      	CPC  R31,R26
000348 f419      	BRNE _0x84
                 ;error = -3;
000349 efed      	LDI  R30,LOW(65533)
00034a efff      	LDI  R31,HIGH(65533)
00034b c041      	RJMP _0x165
                 ;break;
                 ;case 0b00000100:
                 _0x84:
00034c 30e4      	CPI  R30,LOW(0x4)
00034d e0a0      	LDI  R26,HIGH(0x4)
00034e 07fa      	CPC  R31,R26
00034f f419      	BRNE _0x85
                 ;error = -2;
000350 efee      	LDI  R30,LOW(65534)
000351 efff      	LDI  R31,HIGH(65534)
000352 c03a      	RJMP _0x165
                 ;break;
                 ;case 0b00001100:
                 _0x85:
000353 30ec      	CPI  R30,LOW(0xC)
000354 e0a0      	LDI  R26,HIGH(0xC)
000355 07fa      	CPC  R31,R26
000356 f419      	BRNE _0x86
                 ;error = -1;
000357 efef      	LDI  R30,LOW(65535)
000358 efff      	LDI  R31,HIGH(65535)
000359 c033      	RJMP _0x165
                 ;break;
                 ;case 0b00001000:
                 _0x86:
00035a 30e8      	CPI  R30,LOW(0x8)
00035b e0a0      	LDI  R26,HIGH(0x8)
00035c 07fa      	CPC  R31,R26
00035d f431      	BRNE _0x87
                 ;error = 0;
00035e e0e0      	LDI  R30,LOW(0)
00035f 93e0 018f 	STS  _error,R30
000361 93e0 0190 	STS  _error+1,R30
                 ;break;
000363 c02d      	RJMP _0x80
                 ;case 0b00011000:
                 _0x87:
000364 31e8      	CPI  R30,LOW(0x18)
000365 e0a0      	LDI  R26,HIGH(0x18)
000366 07fa      	CPC  R31,R26
000367 f419      	BRNE _0x88
                 ;error = 1;
000368 e0e1      	LDI  R30,LOW(1)
000369 e0f0      	LDI  R31,HIGH(1)
00036a c022      	RJMP _0x165
                 ;break;
                 ;case 0b00010000:
                 _0x88:
00036b 31e0      	CPI  R30,LOW(0x10)
00036c e0a0      	LDI  R26,HIGH(0x10)
00036d 07fa      	CPC  R31,R26
00036e f419      	BRNE _0x89
                 ;error = 2;
00036f e0e2      	LDI  R30,LOW(2)
000370 e0f0      	LDI  R31,HIGH(2)
000371 c01b      	RJMP _0x165
                 ;break;
                 ;case 0b00110000:
                 _0x89:
000372 33e0      	CPI  R30,LOW(0x30)
000373 e0a0      	LDI  R26,HIGH(0x30)
000374 07fa      	CPC  R31,R26
000375 f419      	BRNE _0x8A
                 ;error = 3;
000376 e0e3      	LDI  R30,LOW(3)
000377 e0f0      	LDI  R31,HIGH(3)
000378 c014      	RJMP _0x165
                 ;break;
                 ;case 0b00100000:
                 _0x8A:
000379 32e0      	CPI  R30,LOW(0x20)
00037a e0a0      	LDI  R26,HIGH(0x20)
00037b 07fa      	CPC  R31,R26
00037c f419      	BRNE _0x8B
                 ;error = 4;
00037d e0e4      	LDI  R30,LOW(4)
00037e e0f0      	LDI  R31,HIGH(4)
00037f c00d      	RJMP _0x165
                 ;break;
                 ;case 0b01100000:
                 _0x8B:
000380 36e0      	CPI  R30,LOW(0x60)
000381 e0a0      	LDI  R26,HIGH(0x60)
000382 07fa      	CPC  R31,R26
000383 f419      	BRNE _0x8C
                 ;error = 5;
000384 e0e5      	LDI  R30,LOW(5)
000385 e0f0      	LDI  R31,HIGH(5)
000386 c006      	RJMP _0x165
                 ;break;
                 ;case 0b01000000:
                 _0x8C:
000387 34e0      	CPI  R30,LOW(0x40)
000388 e0a0      	LDI  R26,HIGH(0x40)
000389 07fa      	CPC  R31,R26
00038a f431      	BRNE _0x80
                 ;error = 6;
00038b e0e6      	LDI  R30,LOW(6)
00038c e0f0      	LDI  R31,HIGH(6)
                 _0x165:
00038d 93e0 018f 	STS  _error,R30
00038f 93f0 0190 	STS  _error+1,R31
                 ;break; // DOMINAN KIRI
                 _0x80:
                 ;rateError = error - lastError;
000391 91a0 0191 	LDS  R26,_lastError
000393 91b0 0192 	LDS  R27,_lastError+1
000395 91e0 018f 	LDS  R30,_error
000397 91f0 0190 	LDS  R31,_error+1
000399 1bea      	SUB  R30,R26
00039a 0bfb      	SBC  R31,R27
00039b 018f      	MOVW R16,R30
                 ;lastError = error;
00039c 91e0 018f 	LDS  R30,_error
00039e 91f0 0190 	LDS  R31,_error+1
0003a0 93e0 0191 	STS  _lastError,R30
0003a2 93f0 0192 	STS  _lastError+1,R31
                 ;moveVal = (int)(error * kp) + (rateError * kd);
0003a4 91e0 0193 	LDS  R30,_kp
0003a6 91f0 0194 	LDS  R31,_kp+1
0003a8 91a0 018f 	LDS  R26,_error
0003aa 91b0 0190 	LDS  R27,_error+1
0003ac 940e 0c06 	CALL __MULW12
0003ae 01bf      	MOVW R22,R30
0003af 91e0 0195 	LDS  R30,_kd
0003b1 91f0 0196 	LDS  R31,_kd+1
0003b3 01d8      	MOVW R26,R16
0003b4 940e 0c06 	CALL __MULW12
0003b6 0fe6      	ADD  R30,R22
0003b7 1ff7      	ADC  R31,R23
0003b8 019f      	MOVW R18,R30
                 ;moveLeft = SPEED + moveVal;
0003b9 91a0 0197 	LDS  R26,_SPEED
0003bb 91b0 0198 	LDS  R27,_SPEED+1
0003bd 0fea      	ADD  R30,R26
0003be 1ffb      	ADC  R31,R27
0003bf 01af      	MOVW R20,R30
                 ;moveRight = SPEED - moveVal;
0003c0 91e0 0197 	LDS  R30,_SPEED
0003c2 91f0 0198 	LDS  R31,_SPEED+1
0003c4 1be2      	SUB  R30,R18
0003c5 0bf3      	SBC  R31,R19
0003c6 83ee      	STD  Y+6,R30
0003c7 83ff      	STD  Y+6+1,R31
                 ;if (moveLeft > MAX_SPEED)
0003c8 940e 0b1d 	CALL SUBOPT_0x14
0003ca 17e4      	CP   R30,R20
0003cb 07f5      	CPC  R31,R21
0003cc f424      	BRGE _0x8E
                 ;moveLeft = MAX_SPEED;
                +
0003cd 9140 019b+LDS R20 , 0 + ( _MAX_SPEED )
0003cf 9150 019c+LDS R21 , 0 + ( _MAX_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MAX_SPEED
                 ;if (moveLeft < MIN_SPEED)
                 _0x8E:
0003d1 940e 0b22 	CALL SUBOPT_0x15
0003d3 174e      	CP   R20,R30
0003d4 075f      	CPC  R21,R31
0003d5 f424      	BRGE _0x8F
                 ;moveLeft = MIN_SPEED;
                +
0003d6 9140 0199+LDS R20 , 0 + ( _MIN_SPEED )
0003d8 9150 019a+LDS R21 , 0 + ( _MIN_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MIN_SPEED
                 ;if (moveRight > MAX_SPEED)
                 _0x8F:
0003da 940e 0b1d 	CALL SUBOPT_0x14
0003dc 81ae      	LDD  R26,Y+6
0003dd 81bf      	LDD  R27,Y+6+1
0003de 17ea      	CP   R30,R26
0003df 07fb      	CPC  R31,R27
0003e0 f424      	BRGE _0x90
                 ;moveRight = MAX_SPEED;
0003e1 940e 0b1d 	CALL SUBOPT_0x14
0003e3 83ee      	STD  Y+6,R30
0003e4 83ff      	STD  Y+6+1,R31
                 ;if (moveRight < MIN_SPEED)
                 _0x90:
0003e5 940e 0b22 	CALL SUBOPT_0x15
0003e7 81ae      	LDD  R26,Y+6
0003e8 81bf      	LDD  R27,Y+6+1
0003e9 17ae      	CP   R26,R30
0003ea 07bf      	CPC  R27,R31
0003eb f424      	BRGE _0x91
                 ;moveRight = MIN_SPEED;
0003ec 940e 0b22 	CALL SUBOPT_0x15
0003ee 83ee      	STD  Y+6,R30
0003ef 83ff      	STD  Y+6+1,R31
                 ;setMotor(moveLeft, moveRight);
                 _0x91:
0003f0 935a      	ST   -Y,R21
0003f1 934a      	ST   -Y,R20
0003f2 85a8      	LDD  R26,Y+8
0003f3 85b9      	LDD  R27,Y+8+1
0003f4 debc      	RCALL _setMotor
0003f5 940e 0be2 	CALL __LOADLOCR6
0003f7 962a      	ADIW R28,10
0003f8 9508      	RET
                 ; .FEND
                 ;void scanX(int brpkali, int kec)
                 _scanX:
                 ; .FSTART _scanX
                 ;while (hitung < brpkali)
0003f9 93ba      	ST   -Y,R27
0003fa 93aa      	ST   -Y,R26
                 ;	brpkali -> Y+2
                 ;	kec -> Y+0
                 _0x92:
0003fb 81ea      	LDD  R30,Y+2
0003fc 81fb      	LDD  R31,Y+2+1
0003fd 164e      	CP   R4,R30
0003fe 065f      	CPC  R5,R31
0003ff f4d4      	BRGE _0x94
                 ;while ((sensor & 0b00011100) != 0b00011100)
                 _0x95:
000400 940e 0b27 	CALL SUBOPT_0x16
000402 f029      	BREQ _0x97
                 ;cek_sensor();
000403 dde3      	RCALL _cek_sensor
                 ;scan(kec);
000404 81a8      	LD   R26,Y
000405 81b9      	LDD  R27,Y+1
000406 df17      	RCALL _scan
000407 cff8      	RJMP _0x95
                 _0x97:
                 ;while ((sensor & 0b00011100) == 0b00011100)
                 _0x98:
000408 940e 0b27 	CALL SUBOPT_0x16
00040a f471      	BRNE _0x9A
                 ;cek_sensor();
00040b dddb      	RCALL _cek_sensor
                 ;lampu = 0;
00040c 98c3      	CBI  0x18,3
                 ;scan(kec);
00040d 81a8      	LD   R26,Y
00040e 81b9      	LDD  R27,Y+1
00040f df0e      	RCALL _scan
                 ;if ((sensor & 0b00011100) != 0b00011100)
000410 940e 0b27 	CALL SUBOPT_0x16
000412 f029      	BREQ _0x9D
                 ;hitung++;
000413 01f2      	MOVW R30,R4
000414 9631      	ADIW R30,1
000415 012f      	MOVW R4,R30
000416 9731      	SBIW R30,1
                 ;lampu = 1;
000417 9ac3      	SBI  0x18,3
                 ;};
                 _0x9D:
000418 cfef      	RJMP _0x98
                 _0x9A:
                 ;};
000419 cfe1      	RJMP _0x92
                 _0x94:
                 ;hitung = 0;
00041a 2444      	CLR  R4
00041b 2455      	CLR  R5
00041c c04f      	RJMP _0x20C0008
                 ; .FEND
                 ;void scanTimer(int countGoal, int kec, int lama)
                 ;count = 0;
                 ;	countGoal -> Y+4
                 ;	kec -> Y+2
                 ;	lama -> Y+0
                 ;while (count < countGoal)
                 ;cek_sensor();
                 ;scan(kec);
                 ;count++;
                 ;rem(lama);
                 ;void scanKotak(int brpkali, int kec, int lama_rem) {
                 ;while (hitung < brpkali) {
                 ;	brpkali -> Y+4
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
                 ;while(1)
                 ;cek_sensor();
                 ;scan(kec);
                 ;if((sensor & 0b01111111) == 0b01111111) {
                 ;hitung++; mundur(kec, kec); delay(lama_rem); rem(10); break;
                 ;hitung = 0;
                 ;void scanTka(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b01110000) != 0b01110000) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b01110000) == 0b01110000)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b01110000) != 0b01110000)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scanTki(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b00000111) != 0b00000111) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b00000111) == 0b00000111)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b00000111) != 0b00000111)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scan7ki()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b01000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ka()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b00000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ki2()
                 ;cek_sensor();
                 ;while (sensor == 0b00000000) // sensor !=0b00111111||0b00000011|| 0b00000001
                 ;cek_sensor();
                 ;scan(170);
                 ;void belki(int kec, int lama)
                 _belki:
                 ; .FSTART _belki
                 ;cek_sensor();
00041d 93ba      	ST   -Y,R27
00041e 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
00041f ddc7      	RCALL _cek_sensor
                 ;while (sen[0] || sen[1])
                 _0xC7:
000420 91e0 0186 	LDS  R30,_sen
000422 30e0      	CPI  R30,0
000423 f421      	BRNE _0xCA
                +
000424 91e0 0187+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
000426 30e0      	CPI  R30,0
000427 f019      	BREQ _0xC9
                 _0xCA:
                 ;kiri(kec, kec);
000428 940e 0b2b 	CALL SUBOPT_0x17
                 ;cek_sensor();
00042a cff5      	RJMP _0xC7
                 _0xC9:
                 ;while (!sen[0] && !sen[1])
                 _0xCC:
00042b 91e0 0186 	LDS  R30,_sen
00042d 30e0      	CPI  R30,0
00042e f421      	BRNE _0xCF
                +
00042f 91e0 0187+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
000431 30e0      	CPI  R30,0
000432 f009      	BREQ _0xD0
                 _0xCF:
000433 c003      	RJMP _0xCE
                 _0xD0:
                 ;kiri(kec, kec);
000434 940e 0b2b 	CALL SUBOPT_0x17
                 ;cek_sensor();
000436 cff4      	RJMP _0xCC
                 _0xCE:
                 ;if (lama > 0)
000437 940e 0b03 	CALL SUBOPT_0xF
000439 f41c      	BRGE _0xD1
                 ;rem(lama);
00043a 81a8      	LD   R26,Y
00043b 81b9      	LDD  R27,Y+1
00043c de95      	RCALL _rem
                 _0xD1:
00043d c02e      	RJMP _0x20C0008
                 ; .FEND
                 ;void belki2()
                 ;cek_sensor();
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;kiri(150, 150);
                 ;void belka(int kec, int lama)
                 _belka:
                 ; .FSTART _belka
                 ;cek_sensor();
00043e 93ba      	ST   -Y,R27
00043f 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
000440 dda6      	RCALL _cek_sensor
                 ;while (sen[5] || sen[6])
                 _0xD5:
                +
000441 91e0 018b+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
000443 30e0      	CPI  R30,0
000444 f421      	BRNE _0xD8
                +
000445 91e0 018c+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
000447 30e0      	CPI  R30,0
000448 f019      	BREQ _0xD7
                 _0xD8:
                 ;kanan(kec, kec);
000449 940e 0b32 	CALL SUBOPT_0x18
                 ;cek_sensor();
00044b cff5      	RJMP _0xD5
                 _0xD7:
                 ;while (!sen[5] && !sen[6])
                 _0xDA:
                +
00044c 91e0 018b+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
00044e 30e0      	CPI  R30,0
00044f f421      	BRNE _0xDD
                +
000450 91e0 018c+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
000452 30e0      	CPI  R30,0
000453 f009      	BREQ _0xDE
                 _0xDD:
000454 c003      	RJMP _0xDC
                 _0xDE:
                 ;kanan(kec, kec);
000455 940e 0b32 	CALL SUBOPT_0x18
                 ;cek_sensor();
000457 cff4      	RJMP _0xDA
                 _0xDC:
                 ;if (lama > 0)
000458 940e 0b03 	CALL SUBOPT_0xF
00045a f41c      	BRGE _0xDF
                 ;rem(lama);
00045b 81a8      	LD   R26,Y
00045c 81b9      	LDD  R27,Y+1
00045d de74      	RCALL _rem
                 _0xDF:
00045e c00d      	RJMP _0x20C0008
                 ; .FEND
                 ;void belkacenter()
                 ;cek_sensor();
                 ;while ((sensor & 0b00001000) != 0b00001000)
                 ;cek_sensor();
                 ;kanan(180, 180);
                 ;if ((sensor & 0b10000000) == 0b10000000)
                 ;lcd_kedip(1);
                 ;void scan_delay(int ms)
                 ;k = 0;
                 ;	ms -> Y+0
                 ;maju(172, 170);
                 ;while (k < ms / 10)
                 ;delay_ms(10);
                 ;k++;
                 ;cek_sensor();
                 ;scan(180);
                 ;void belokKanan(int kec, int lama_rem) {
                 ;if(mapMirror == map_biru) {
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
                 ;belka(kec, lama_rem);
                 ;} else {
                 ;belki(kec, lama_rem);
                 ;void belokKiri(int kec, int lama_rem) {
                 _belokKiri:
                 ; .FSTART _belokKiri
                 ;if(mapMirror == map_biru) {
00045f 93ba      	ST   -Y,R27
000460 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
000461 940e 0b39 	CALL SUBOPT_0x19
000463 9730      	SBIW R30,0
000464 f421      	BRNE _0xE9
                 ;belki(kec, lama_rem);
000465 940e 0b3e 	CALL SUBOPT_0x1A
000467 dfb5      	RCALL _belki
                 ;} else {
000468 c003      	RJMP _0xEA
                 _0xE9:
                 ;belka(kec, lama_rem);
000469 940e 0b3e 	CALL SUBOPT_0x1A
00046b dfd2      	RCALL _belka
                 _0xEA:
                 _0x20C0008:
00046c 9624      	ADIW R28,4
00046d 9508      	RET
                 ; .FEND
                 ;void griper()
                 ; 0000 005D {
                 ;capit_lepas;
                 ;lengan_tengah;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_ambil;
                 ;delay_ms(7000);
                 ;lengan_atas;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_lepas;
                 ;void ambil(int lama)
                 _ambil:
                 ; .FSTART _ambil
                 ;capit_ambil;
00046e 93ba      	ST   -Y,R27
00046f 93aa      	ST   -Y,R26
                 ;	lama -> Y+0
000470 eeed      	LDI  R30,LOW(237)
000471 2ede      	MOV  R13,R30
                 ;delay(lama);
000472 940e 0b08 	CALL SUBOPT_0x10
                 ;lengan_atas;
000474 eeea      	LDI  R30,LOW(234)
000475 2ece      	MOV  R12,R30
                 ;delay(lama);
000476 940e 0b08 	CALL SUBOPT_0x10
000478 940c 09e7 	JMP  _0x20C0004
                 ; .FEND
                 ;void taruh(int lama)
                 ;lengan_bawah;
                 ;	lama -> Y+0
                 ;delay(lama);
                 ;capit_lepas;
                 ;delay(lama);
                 ;lengan_atas;
                 ;void bawah_lepas()
                 _bawah_lepas:
                 ; .FSTART _bawah_lepas
                 ;lengan_bawah;
00047a efe0      	LDI  R30,LOW(240)
00047b 2ece      	MOV  R12,R30
                 ;capit_lepas;
00047c eee6      	LDI  R30,LOW(230)
00047d 2ede      	MOV  R13,R30
00047e 9508      	RET
                 ; .FEND
                 ;void atas_lepas()
                 ;lengan_atas;
                 ;capit_lepas;
                 ;void bacawarna()
                 ; 0000 005E {
                 _bacawarna:
                 ; .FSTART _bacawarna
                 ;nadc7 = read_adc(7);
00047f e0a7      	LDI  R26,LOW(7)
000480 dd0a      	RCALL _read_adc
000481 2e6e      	MOV  R6,R30
000482 2477      	CLR  R7
                 ;lcd_gotoxy(13, 1);
000483 e0ed      	LDI  R30,LOW(13)
000484 940e 0b45 	CALL SUBOPT_0x1B
                 ;sprintf(buff, "%d   ", nadc7);
000486 940e 0aaa 	CALL SUBOPT_0x4
                +
000488 edee     +LDI R30 , LOW ( 2 * _0x0 + ( 94 ) )
000489 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 94 ) )
                 	__POINTW1FN _0x0,94
00048a 93fa      	ST   -Y,R31
00048b 93ea      	ST   -Y,R30
00048c 01f3      	MOVW R30,R6
00048d 2766      	CLR  R22
00048e 2777      	CLR  R23
00048f 940e 0c39 	CALL __PUTPARD1
000491 e084      	LDI  R24,4
000492 940e 0936 	CALL _sprintf
000494 9628      	ADIW R28,8
                 ;lcd_puts(buff);
000495 c211      	RJMP _0x20C0006
                 ; .FEND
                 ;int checkWarna() {
                 ;int warna;
                 ;nadc7 = read_adc(7);
                 ;	warna -> R16,R17
                 ;if(nadc7 > minMerah && nadc7 < maxMerah){
                 ;warna = 0;
                 ;} else if(nadc7 > minKuning && nadc7 < maxKuning){
                 ;warna = 1;
                 ;} else if(nadc7 > minHijau && nadc7 < maxHijau){
                 ;warna = 2;
                 ;} else {
                 ;warna = 3;
                 ;return warna;
                 ;void Program_Jalan() {
                 ; 0000 005F void Program_Jalan() {
                 _Program_Jalan:
                 ; .FSTART _Program_Jalan
                 ;maju_delay(2000, 400);
000496 ede0      	LDI  R30,LOW(2000)
000497 e0f7      	LDI  R31,HIGH(2000)
000498 93fa      	ST   -Y,R31
000499 93ea      	ST   -Y,R30
00049a e9a0      	LDI  R26,LOW(400)
00049b e0b1      	LDI  R27,HIGH(400)
00049c de42      	RCALL _maju_delay
                 ;scanX(1, 2000); belokKiri(2000, 200);
00049d e0e1      	LDI  R30,LOW(1)
00049e e0f0      	LDI  R31,HIGH(1)
00049f 940e 0b49 	CALL SUBOPT_0x1C
0004a1 ede0      	LDI  R30,LOW(2000)
0004a2 e0f7      	LDI  R31,HIGH(2000)
0004a3 93fa      	ST   -Y,R31
0004a4 93ea      	ST   -Y,R30
0004a5 eca8      	LDI  R26,LOW(200)
0004a6 e0b0      	LDI  R27,0
0004a7 dfb7      	RCALL _belokKiri
                 ;scanX(5, 2000);
0004a8 e0e5      	LDI  R30,LOW(5)
0004a9 e0f0      	LDI  R31,HIGH(5)
0004aa 940e 0b49 	CALL SUBOPT_0x1C
0004ac 9508      	RET
                 ; .FEND
                 ;void balikKanan() {
                 ;mundur(1000, 1000); delay(380);
                 ;belokKanan(1200, 0); belokKanan(1200, 100);
                 ;void balikKiri() {
                 ;belki(1000, 50); belki(1000, 200);
                 ;void runBot(void);
                 ;void calibration(void);
                 ;void Program_Jalan(void);
                 ;void test_motor(void);
                 ;void test_tombol(void);
                 ;void map_select(int map_num);
                 ;void sens_warna(void);
                 ;void test_capit(void);
                 ;void changeMenu(int menuSelect, bool isSelect) {
                 ; 0000 0060 void changeMenu(int menuSelect, _Bool isSelect) {
                 _changeMenu:
                 ; .FSTART _changeMenu
                 ;lampu = 0;
0004ad 93aa      	ST   -Y,R26
                 ;	menuSelect -> Y+1
                 ;	isSelect -> Y+0
0004ae 98c3      	CBI  0x18,3
                 ;count_btn = menuSelect;
0004af 81e9      	LDD  R30,Y+1
0004b0 81fa      	LDD  R31,Y+1+1
0004b1 93e0 0182 	STS  _count_btn,R30
0004b3 93f0 0183 	STS  _count_btn+1,R31
                 ;if(!isSelect && !isChildSelect) {
0004b5 81e8      	LD   R30,Y
0004b6 30e0      	CPI  R30,0
0004b7 f421      	BRNE _0xFA
0004b8 91e0 0184 	LDS  R30,_isChildSelect
0004ba 30e0      	CPI  R30,0
0004bb f009      	BREQ _0xFB
                 _0xFA:
0004bc c006      	RJMP _0xF9
                 _0xFB:
                 ;lcd_clear();
0004bd 940e 0b4f 	CALL SUBOPT_0x1D
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Menu");
                +
0004bf eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
0004c0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
0004c1 940e 0a34 	CALL _lcd_putsf
                 ;switch (menuSelect) {
                 _0xF9:
0004c3 81e9      	LDD  R30,Y+1
0004c4 81fa      	LDD  R31,Y+1+1
                 ;case 0: // Calibration
0004c5 9730      	SBIW R30,0
0004c6 f469      	BRNE _0xFF
                 ;if(isSelect) { calibration(); break; }
0004c7 81e8      	LD   R30,Y
0004c8 30e0      	CPI  R30,0
0004c9 f011      	BREQ _0x100
0004ca d0b4      	RCALL _calibration
0004cb c08e      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x100:
0004cc e0e0      	LDI  R30,LOW(0)
0004cd 940e 0b45 	CALL SUBOPT_0x1B
                 ;lcd_putsf("Kalibrasi");
                +
0004cf eea9     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
0004d0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
0004d1 940e 0a34 	CALL _lcd_putsf
                 ;break;
0004d3 c086      	RJMP _0xFE
                 ;case 1: // Run bot
                 _0xFF:
0004d4 30e1      	CPI  R30,LOW(0x1)
0004d5 e0a0      	LDI  R26,HIGH(0x1)
0004d6 07fa      	CPC  R31,R26
0004d7 f489      	BRNE _0x101
                 ;if(isSelect || isChildSelect) { runBot(); break; }
0004d8 81e8      	LD   R30,Y
0004d9 30e0      	CPI  R30,0
0004da f421      	BRNE _0x103
0004db 91e0 0184 	LDS  R30,_isChildSelect
0004dd 30e0      	CPI  R30,0
0004de f011      	BREQ _0x102
                 _0x103:
0004df d07c      	RCALL _runBot
0004e0 c079      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x102:
0004e1 e0e0      	LDI  R30,LOW(0)
0004e2 940e 0b45 	CALL SUBOPT_0x1B
                 ;lcd_putsf("Run Bot");
                +
0004e4 efa3     +LDI R26 , LOW ( 2 * _0x0 + ( 115 ) )
0004e5 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 115 ) )
                 	__POINTW2FN _0x0,115
0004e6 940e 0a34 	CALL _lcd_putsf
                 ;break;
0004e8 c071      	RJMP _0xFE
                 ;case 2: // Sensor Warna
                 _0x101:
0004e9 30e2      	CPI  R30,LOW(0x2)
0004ea e0a0      	LDI  R26,HIGH(0x2)
0004eb 07fa      	CPC  R31,R26
0004ec f469      	BRNE _0x105
                 ;if(isSelect) { sens_warna(); break; }
0004ed 81e8      	LD   R30,Y
0004ee 30e0      	CPI  R30,0
0004ef f011      	BREQ _0x106
0004f0 d10e      	RCALL _sens_warna
0004f1 c068      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x106:
0004f2 e0e0      	LDI  R30,LOW(0)
0004f3 940e 0b45 	CALL SUBOPT_0x1B
                 ;lcd_putsf("Sens Warna");
                +
0004f5 efab     +LDI R26 , LOW ( 2 * _0x0 + ( 123 ) )
0004f6 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 123 ) )
                 	__POINTW2FN _0x0,123
0004f7 940e 0a34 	CALL _lcd_putsf
                 ;break;
0004f9 c060      	RJMP _0xFE
                 ;case 3: // Map Select
                 _0x105:
0004fa 30e3      	CPI  R30,LOW(0x3)
0004fb e0a0      	LDI  R26,HIGH(0x3)
0004fc 07fa      	CPC  R31,R26
0004fd f499      	BRNE _0x107
                 ;if(isSelect || isChildSelect) { map_select(map_biru); break; }
0004fe 81e8      	LD   R30,Y
0004ff 30e0      	CPI  R30,0
000500 f421      	BRNE _0x109
000501 91e0 0184 	LDS  R30,_isChildSelect
000503 30e0      	CPI  R30,0
000504 f021      	BREQ _0x108
                 _0x109:
000505 e0a0      	LDI  R26,LOW(0)
000506 e0b0      	LDI  R27,0
000507 d07f      	RCALL _map_select
000508 c051      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x108:
000509 e0e0      	LDI  R30,LOW(0)
00050a 940e 0b45 	CALL SUBOPT_0x1B
                 ;lcd_putsf("Map Biru");
                +
00050c e0a6     +LDI R26 , LOW ( 2 * _0x0 + ( 134 ) )
00050d e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 134 ) )
                 	__POINTW2FN _0x0,134
00050e 940e 0a34 	CALL _lcd_putsf
                 ;break;
000510 c049      	RJMP _0xFE
                 ;case 4: // Map Select
                 _0x107:
000511 30e4      	CPI  R30,LOW(0x4)
000512 e0a0      	LDI  R26,HIGH(0x4)
000513 07fa      	CPC  R31,R26
000514 f499      	BRNE _0x10B
                 ;if(isSelect || isChildSelect) { map_select(map_merah); break; }
000515 81e8      	LD   R30,Y
000516 30e0      	CPI  R30,0
000517 f421      	BRNE _0x10D
000518 91e0 0184 	LDS  R30,_isChildSelect
00051a 30e0      	CPI  R30,0
00051b f021      	BREQ _0x10C
                 _0x10D:
00051c e0a1      	LDI  R26,LOW(1)
00051d e0b0      	LDI  R27,0
00051e d068      	RCALL _map_select
00051f c03a      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x10C:
000520 e0e0      	LDI  R30,LOW(0)
000521 940e 0b45 	CALL SUBOPT_0x1B
                 ;lcd_putsf("Map Merah");
                +
000523 e0af     +LDI R26 , LOW ( 2 * _0x0 + ( 143 ) )
000524 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 143 ) )
                 	__POINTW2FN _0x0,143
000525 940e 0a34 	CALL _lcd_putsf
                 ;break;
000527 c032      	RJMP _0xFE
                 ;case 5: // Test Motor
                 _0x10B:
000528 30e5      	CPI  R30,LOW(0x5)
000529 e0a0      	LDI  R26,HIGH(0x5)
00052a 07fa      	CPC  R31,R26
00052b f469      	BRNE _0x10F
                 ;if(isSelect) { test_motor(); break; }
00052c 81e8      	LD   R30,Y
00052d 30e0      	CPI  R30,0
00052e f011      	BREQ _0x110
00052f d06d      	RCALL _test_motor
000530 c029      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x110:
000531 e0e0      	LDI  R30,LOW(0)
000532 940e 0b45 	CALL SUBOPT_0x1B
                 ;lcd_putsf("Motor");
                +
000534 e1a9     +LDI R26 , LOW ( 2 * _0x0 + ( 153 ) )
000535 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 153 ) )
                 	__POINTW2FN _0x0,153
000536 940e 0a34 	CALL _lcd_putsf
                 ;break;
000538 c021      	RJMP _0xFE
                 ;case 6: // Test tombol
                 _0x10F:
000539 30e6      	CPI  R30,LOW(0x6)
00053a e0a0      	LDI  R26,HIGH(0x6)
00053b 07fa      	CPC  R31,R26
00053c f469      	BRNE _0x111
                 ;if(isSelect) { test_tombol(); break; }
00053d 81e8      	LD   R30,Y
00053e 30e0      	CPI  R30,0
00053f f011      	BREQ _0x112
000540 d088      	RCALL _test_tombol
000541 c018      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x112:
000542 e0e0      	LDI  R30,LOW(0)
000543 940e 0b45 	CALL SUBOPT_0x1B
                 ;lcd_putsf("Button");
                +
000545 e1af     +LDI R26 , LOW ( 2 * _0x0 + ( 159 ) )
000546 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 159 ) )
                 	__POINTW2FN _0x0,159
000547 940e 0a34 	CALL _lcd_putsf
                 ;break;
000549 c010      	RJMP _0xFE
                 ;case 7: // Test Capit
                 _0x111:
00054a 30e7      	CPI  R30,LOW(0x7)
00054b e0a0      	LDI  R26,HIGH(0x7)
00054c 07fa      	CPC  R31,R26
00054d f461      	BRNE _0x115
                 ;if(isSelect) { test_capit(); break; }
00054e 81e8      	LD   R30,Y
00054f 30e0      	CPI  R30,0
000550 f011      	BREQ _0x114
000551 d0d7      	RCALL _test_capit
000552 c007      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x114:
000553 e0e0      	LDI  R30,LOW(0)
000554 940e 0b45 	CALL SUBOPT_0x1B
                 ;lcd_putsf("Capit");
                +
000556 e2a6     +LDI R26 , LOW ( 2 * _0x0 + ( 166 ) )
000557 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 166 ) )
                 	__POINTW2FN _0x0,166
000558 940e 0a34 	CALL _lcd_putsf
                 ;break;
                 ;default:
                 _0x115:
                 ;break;
                 _0xFE:
00055a 940c 0a45 	JMP  _0x20C0003
                 ; .FEND
                 ;void runBot() {
                 _runBot:
                 ; .FSTART _runBot
                 ;if(!isChildSelect) {
00055c 91e0 0184 	LDS  R30,_isChildSelect
00055e 30e0      	CPI  R30,0
00055f f471      	BRNE _0x116
                 ;lcd_clear();
000560 940e 0b4f 	CALL SUBOPT_0x1D
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Run Bot");
                +
000562 efa3     +LDI R26 , LOW ( 2 * _0x0 + ( 115 ) )
000563 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 115 ) )
                 	__POINTW2FN _0x0,115
000564 940e 0b53 	CALL SUBOPT_0x1E
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Click 2 to start");
                +
000566 e2ac     +LDI R26 , LOW ( 2 * _0x0 + ( 172 ) )
000567 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 172 ) )
                 	__POINTW2FN _0x0,172
000568 940e 0a34 	CALL _lcd_putsf
                 ;isChildSelect = true;
00056a e0e1      	LDI  R30,LOW(1)
00056b 93e0 0184 	STS  _isChildSelect,R30
                 ;} else if(isChildSelect) {
00056d c010      	RJMP _0x117
                 _0x116:
00056e 91e0 0184 	LDS  R30,_isChildSelect
000570 30e0      	CPI  R30,0
000571 f061      	BREQ _0x118
                 ;lcd_clear();
000572 940e 09e9 	CALL _lcd_clear
                 ;lcd_gotoxy(0, 1);
000574 e0e0      	LDI  R30,LOW(0)
000575 940e 0b45 	CALL SUBOPT_0x1B
                 ;lcd_putsf("Running...");
                +
000577 e3ad     +LDI R26 , LOW ( 2 * _0x0 + ( 189 ) )
000578 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 189 ) )
                 	__POINTW2FN _0x0,189
000579 940e 0a34 	CALL _lcd_putsf
                 ;Program_Jalan();
00057b df1a      	RCALL _Program_Jalan
                 ;isChildSelect = false;
00057c 940e 0b57 	CALL SUBOPT_0x1F
                 ;changeMenu(0, false);
                 _0x118:
                 _0x117:
00057e 9508      	RET
                 ; .FEND
                 ;void calibration() {
                 _calibration:
                 ; .FSTART _calibration
                 ;scan_garis();
00057f dc95      	RCALL _scan_garis
                 ;delay(1000);
000580 940e 0b61 	CALL SUBOPT_0x20
                 ;scan_back();
000582 dcb2      	RCALL _scan_back
                 ;delay(1000);
000583 940e 0b61 	CALL SUBOPT_0x20
                 ;hit_tengah();
000585 dccf      	RCALL _hit_tengah
                 ;isChildSelect = false;
000586 c03c      	RJMP _0x20C0007
                 ;changeMenu(0, false);
                 ; .FEND
                 ;void map_select(int map_num) {
                 _map_select:
                 ; .FSTART _map_select
                 ;if(map_num != 0 && map_num != 1) map_num = 0;
000587 93ba      	ST   -Y,R27
000588 93aa      	ST   -Y,R26
                 ;	map_num -> Y+0
000589 81a8      	LD   R26,Y
00058a 81b9      	LDD  R27,Y+1
00058b 9710      	SBIW R26,0
00058c f011      	BREQ _0x11A
00058d 9711      	SBIW R26,1
00058e f409      	BRNE _0x11B
                 _0x11A:
00058f c003      	RJMP _0x119
                 _0x11B:
000590 e0e0      	LDI  R30,LOW(0)
000591 83e8      	STD  Y+0,R30
000592 83e9      	STD  Y+0+1,R30
                 ;mapMirror = map_num;
                 _0x119:
000593 81e8      	LD   R30,Y
000594 81f9      	LDD  R31,Y+1
000595 e2aa      	LDI  R26,LOW(_mapMirror)
000596 e0b0      	LDI  R27,HIGH(_mapMirror)
000597 940e 0c4e 	CALL __EEPROMWRW
                 ;isChildSelect = false;
000599 940e 0b57 	CALL SUBOPT_0x1F
                 ;changeMenu(0, false);
00059b 940c 09e7 	JMP  _0x20C0004
                 ; .FEND
                 ;void test_motor()
                 _test_motor:
                 ; .FSTART _test_motor
                 ;lcd_clear();
00059d 940e 0b4f 	CALL SUBOPT_0x1D
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Motor");
                +
00059f e4a8     +LDI R26 , LOW ( 2 * _0x0 + ( 200 ) )
0005a0 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 200 ) )
                 	__POINTW2FN _0x0,200
0005a1 940e 0b53 	CALL SUBOPT_0x1E
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+1000 +1000");
                +
0005a3 e5a3     +LDI R26 , LOW ( 2 * _0x0 + ( 211 ) )
0005a4 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 211 ) )
                 	__POINTW2FN _0x0,211
0005a5 940e 0b65 	CALL SUBOPT_0x21
                 ;setMotor(1000, 1000);
0005a7 940e 0b6c 	CALL SUBOPT_0x22
                 ;delay_ms(2000);
                 ;lcd_gotoxy(0, 1);
0005a9 e0e0      	LDI  R30,LOW(0)
0005aa 940e 0b45 	CALL SUBOPT_0x1B
                 ;lcd_putsf("-1000 -1000");
                +
0005ac e5af     +LDI R26 , LOW ( 2 * _0x0 + ( 223 ) )
0005ad e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 223 ) )
                 	__POINTW2FN _0x0,223
0005ae 940e 0b74 	CALL SUBOPT_0x23
                 ;setMotor(-1000, -1000);
0005b0 940e 0b7b 	CALL SUBOPT_0x24
                 ;delay_ms(2000);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+1000 -1000");
                +
0005b2 e6ab     +LDI R26 , LOW ( 2 * _0x0 + ( 235 ) )
0005b3 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 235 ) )
                 	__POINTW2FN _0x0,235
0005b4 940e 0b65 	CALL SUBOPT_0x21
                 ;setMotor(1000, -1000);
0005b6 940e 0b7b 	CALL SUBOPT_0x24
                 ;delay_ms(2000);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("-1000 +1000");
                +
0005b8 e7a7     +LDI R26 , LOW ( 2 * _0x0 + ( 247 ) )
0005b9 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 247 ) )
                 	__POINTW2FN _0x0,247
0005ba 940e 0b74 	CALL SUBOPT_0x23
                 ;setMotor(-1000, 1000);
0005bc 940e 0b6c 	CALL SUBOPT_0x22
                 ;delay_ms(2000);
                 ;rem(1000);
0005be eea8      	LDI  R26,LOW(1000)
0005bf e0b3      	LDI  R27,HIGH(1000)
0005c0 dd11      	RCALL _rem
                 ;lcd_clear();
0005c1 940e 0b4f 	CALL SUBOPT_0x1D
                 ;lcd_gotoxy(0, 0);
                 ;isChildSelect = false;
                 _0x20C0007:
0005c3 e0e0      	LDI  R30,LOW(0)
0005c4 93e0 0184 	STS  _isChildSelect,R30
                 ;changeMenu(0, false);
0005c6 940e 0b85 	CALL SUBOPT_0x25
0005c8 9508      	RET
                 ; .FEND
                 ;void test_tombol()
                 _test_tombol:
                 ; .FSTART _test_tombol
                 ;lcd_gotoxy(0, 1);
0005c9 e0e0      	LDI  R30,LOW(0)
0005ca 940e 0b45 	CALL SUBOPT_0x1B
                 ;lcd_putsf("Click 1 to exit");
                +
0005cc e8a3     +LDI R26 , LOW ( 2 * _0x0 + ( 259 ) )
0005cd e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 259 ) )
                 	__POINTW2FN _0x0,259
0005ce 940e 0a34 	CALL _lcd_putsf
                 ;isTestTombol = true;
0005d0 e0e1      	LDI  R30,LOW(1)
0005d1 93e0 0185 	STS  _isTestTombol,R30
                 ;while (1)
                 _0x11C:
                 ;if (!isTestTombol) break;
0005d3 91e0 0185 	LDS  R30,_isTestTombol
0005d5 30e0      	CPI  R30,0
0005d6 f139      	BREQ _0x11E
                 ;if ((t1 == 0))
0005d7 9998      	SBIC 0x13,0
0005d8 c009      	RJMP _0x120
                 ;lcd_gotoxy(0, 0);
0005d9 e0e0      	LDI  R30,LOW(0)
0005da 940e 0aa6 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 1     ");
                +
0005dc e9a3     +LDI R26 , LOW ( 2 * _0x0 + ( 275 ) )
0005dd e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 275 ) )
                 	__POINTW2FN _0x0,275
0005de 940e 0b8c 	CALL SUBOPT_0x26
                 ;isTestTombol = false;
                 ;delay(500);
                 ;changeMenu(0, false);
0005e0 940e 0b85 	CALL SUBOPT_0x25
                 ;if (t2 == 0)
                 _0x120:
0005e2 9999      	SBIC 0x13,1
0005e3 c007      	RJMP _0x121
                 ;lcd_gotoxy(0, 0);
0005e4 e0e0      	LDI  R30,LOW(0)
0005e5 940e 0aa6 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 2     ");
                +
0005e7 eaa3     +LDI R26 , LOW ( 2 * _0x0 + ( 291 ) )
0005e8 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 291 ) )
                 	__POINTW2FN _0x0,291
0005e9 940e 0a34 	CALL _lcd_putsf
                 ;if (t3 == 0)
                 _0x121:
0005eb 999a      	SBIC 0x13,2
0005ec c007      	RJMP _0x122
                 ;lcd_gotoxy(0, 0);
0005ed e0e0      	LDI  R30,LOW(0)
0005ee 940e 0aa6 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 3     ");
                +
0005f0 eba3     +LDI R26 , LOW ( 2 * _0x0 + ( 307 ) )
0005f1 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 307 ) )
                 	__POINTW2FN _0x0,307
0005f2 940e 0a34 	CALL _lcd_putsf
                 ;if (t4 == 0)
                 _0x122:
0005f4 999b      	SBIC 0x13,3
0005f5 c007      	RJMP _0x123
                 ;lcd_gotoxy(0, 0);
0005f6 e0e0      	LDI  R30,LOW(0)
0005f7 940e 0aa6 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 4     ");
                +
0005f9 eca3     +LDI R26 , LOW ( 2 * _0x0 + ( 323 ) )
0005fa e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 323 ) )
                 	__POINTW2FN _0x0,323
0005fb 940e 0a34 	CALL _lcd_putsf
                 _0x123:
0005fd cfd5      	RJMP _0x11C
                 _0x11E:
0005fe 9508      	RET
                 ; .FEND
                 ;void sens_warna()
                 _sens_warna:
                 ; .FSTART _sens_warna
                 ;lcd_clear();
0005ff 940e 0b4f 	CALL SUBOPT_0x1D
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Sens Warna");
                +
000601 efab     +LDI R26 , LOW ( 2 * _0x0 + ( 123 ) )
000602 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 123 ) )
                 	__POINTW2FN _0x0,123
000603 940e 0b53 	CALL SUBOPT_0x1E
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Warna:");
                +
000605 eda3     +LDI R26 , LOW ( 2 * _0x0 + ( 339 ) )
000606 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 339 ) )
                 	__POINTW2FN _0x0,339
000607 940e 0a34 	CALL _lcd_putsf
                 ;isTestTombol = true;
000609 e0e1      	LDI  R30,LOW(1)
00060a 93e0 0185 	STS  _isTestTombol,R30
                 ;bawah_lepas();
00060c de6d      	RCALL _bawah_lepas
                 ;delay(200);
00060d 940e 0b95 	CALL SUBOPT_0x27
                 ;ambil(20);
00060f e1a4      	LDI  R26,LOW(20)
000610 e0b0      	LDI  R27,0
000611 de5c      	RCALL _ambil
                 ;while (1)
                 _0x124:
                 ;bacawarna();
000612 de6c      	RCALL _bacawarna
                 ;if (!isTestTombol) { lcd_clear(); capit_lepas; changeMenu(0, false); break; }
000613 91e0 0185 	LDS  R30,_isTestTombol
000615 30e0      	CPI  R30,0
000616 f439      	BRNE _0x127
000617 940e 09e9 	CALL _lcd_clear
000619 eee6      	LDI  R30,LOW(230)
00061a 2ede      	MOV  R13,R30
00061b 940e 0b85 	CALL SUBOPT_0x25
00061d c00a      	RJMP _0x126
                 ;if ((t1 == 0))
                 _0x127:
00061e 9998      	SBIC 0x13,0
00061f c007      	RJMP _0x128
                 ;lcd_gotoxy(0, 0);
000620 e0e0      	LDI  R30,LOW(0)
000621 940e 0aa6 	CALL SUBOPT_0x3
                 ;lcd_putsf("Exiting...");
                +
000623 edaa     +LDI R26 , LOW ( 2 * _0x0 + ( 346 ) )
000624 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 346 ) )
                 	__POINTW2FN _0x0,346
000625 940e 0b8c 	CALL SUBOPT_0x26
                 ;isTestTombol = false;
                 ;delay(500);
                 _0x128:
000627 cfea      	RJMP _0x124
                 _0x126:
000628 9508      	RET
                 ; .FEND
                 ;void test_capit()
                 _test_capit:
                 ; .FSTART _test_capit
                 ;lcd_clear();
000629 940e 0b4f 	CALL SUBOPT_0x1D
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Capit");
                +
00062b eea5     +LDI R26 , LOW ( 2 * _0x0 + ( 357 ) )
00062c e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 357 ) )
                 	__POINTW2FN _0x0,357
00062d 940e 0b53 	CALL SUBOPT_0x1E
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Capit: > <");
                +
00062f efa0     +LDI R26 , LOW ( 2 * _0x0 + ( 368 ) )
000630 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 368 ) )
                 	__POINTW2FN _0x0,368
000631 940e 0a34 	CALL _lcd_putsf
                 ;capit_ambil;
000633 eeed      	LDI  R30,LOW(237)
000634 2ede      	MOV  R13,R30
                 ;delay(500);
000635 efa4      	LDI  R26,LOW(500)
000636 e0b1      	LDI  R27,HIGH(500)
000637 db5e      	RCALL _delay
                 ;lcd_gotoxy(0, 1);
000638 e0e0      	LDI  R30,LOW(0)
000639 940e 0b45 	CALL SUBOPT_0x1B
                 ;lcd_putsf("Capit: < >");
                +
00063b efab     +LDI R26 , LOW ( 2 * _0x0 + ( 379 ) )
00063c e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 379 ) )
                 	__POINTW2FN _0x0,379
00063d 940e 0a34 	CALL _lcd_putsf
                 ;capit_lepas;
00063f eee6      	LDI  R30,LOW(230)
000640 2ede      	MOV  R13,R30
                 ;delay(1000);
000641 940e 0b61 	CALL SUBOPT_0x20
                 ;lcd_gotoxy(0, 1);
000643 e0e0      	LDI  R30,LOW(0)
000644 940e 0b45 	CALL SUBOPT_0x1B
                 ;lcd_putsf("Capit: \\/");
                +
000646 e0a6     +LDI R26 , LOW ( 2 * _0x0 + ( 390 ) )
000647 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 390 ) )
                 	__POINTW2FN _0x0,390
000648 940e 0a34 	CALL _lcd_putsf
                 ;lengan_bawah;
00064a efe0      	LDI  R30,LOW(240)
00064b 2ece      	MOV  R12,R30
                 ;delay(1000);
00064c 940e 0b61 	CALL SUBOPT_0x20
                 ;lcd_gotoxy(0, 1);
00064e e0e0      	LDI  R30,LOW(0)
00064f 940e 0b45 	CALL SUBOPT_0x1B
                 ;lcd_putsf("Capit: /\\");
                +
000651 e1a0     +LDI R26 , LOW ( 2 * _0x0 + ( 400 ) )
000652 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 400 ) )
                 	__POINTW2FN _0x0,400
000653 940e 0a34 	CALL _lcd_putsf
                 ;lengan_atas;
000655 eeea      	LDI  R30,LOW(234)
000656 2ece      	MOV  R12,R30
                 ;delay(1000);
000657 940e 0b61 	CALL SUBOPT_0x20
000659 9508      	RET
                 ; .FEND
                 ;void tepuk_tangan() {
                 ;lcd_clear();
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Hold 1 to exit");
                 ;lcd_gotoxy(0, 0);
                 ;while (1)
                 ;lcd_putsf("XD");
                 ;if(t1 == 0) break;
                 ;capit_lepas;
                 ;if(t1 == 0) break;
                 ;delay(500);
                 ;if(t1 == 0) break;
                 ;capit_ambil;
                 ;if(t1 == 0) break;
                 ;delay(500);
                 ;if(t1 == 0) break;
                 ;void display_map() {
                 _display_map:
                 ; .FSTART _display_map
                 ;cek_sensor();
00065a db8c      	RCALL _cek_sensor
                 ;lcd_gotoxy(7, 0);
00065b e0e7      	LDI  R30,LOW(7)
00065c 940e 0aa6 	CALL SUBOPT_0x3
                 ;sprintf(buff, "%d", mapMirror);
00065e 940e 0aaa 	CALL SUBOPT_0x4
                +
000660 e8ec     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
000661 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
000662 93fa      	ST   -Y,R31
000663 93ea      	ST   -Y,R30
000664 940e 0b39 	CALL SUBOPT_0x19
000666 940e 0af4 	CALL SUBOPT_0xD
000668 e084      	LDI  R24,4
000669 940e 0936 	CALL _sprintf
00066b 9628      	ADIW R28,8
                 ;lcd_puts(buff);
00066c c03a      	RJMP _0x20C0006
                 ; .FEND
                 ;void display_checkpoint() {
                 _display_checkpoint:
                 ; .FSTART _display_checkpoint
                 ;if(pointPos != 'A' && pointPos != 'B' && pointPos != 'Z') pointPos = 'A';
00066d 940e 0b99 	CALL SUBOPT_0x28
00066f 34e1      	CPI  R30,LOW(0x41)
000670 f021      	BREQ _0x132
000671 34e2      	CPI  R30,LOW(0x42)
000672 f011      	BREQ _0x132
000673 35ea      	CPI  R30,LOW(0x5A)
000674 f409      	BRNE _0x133
                 _0x132:
000675 c005      	RJMP _0x131
                 _0x133:
000676 e2ac      	LDI  R26,LOW(_pointPos)
000677 e0b0      	LDI  R27,HIGH(_pointPos)
000678 e4e1      	LDI  R30,LOW(65)
000679 940e 0c56 	CALL __EEPROMWRB
                 ;if(ringPos != 1 && ringPos != 2 && ringPos != 3 && ringPos != 4) ringPos = 1;
                 _0x131:
00067b 940e 0b9e 	CALL SUBOPT_0x29
00067d 01bf      	MOVW R22,R30
00067e 010f      	MOVW R0,R30
00067f 01df      	MOVW R26,R30
000680 9731      	SBIW R30,1
000681 f059      	BREQ _0x135
000682 01fd      	MOVW R30,R26
000683 9732      	SBIW R30,2
000684 f041      	BREQ _0x135
000685 01f0      	MOVW R30,R0
000686 9733      	SBIW R30,3
000687 f029      	BREQ _0x135
000688 01fb      	MOVW R30,R22
000689 30e4      	CPI  R30,LOW(0x4)
00068a e0a0      	LDI  R26,HIGH(0x4)
00068b 07fa      	CPC  R31,R26
00068c f409      	BRNE _0x136
                 _0x135:
00068d c004      	RJMP _0x134
                 _0x136:
00068e 940e 0ba3 	CALL SUBOPT_0x2A
000690 940e 0c4e 	CALL __EEPROMWRW
                 ;lcd_gotoxy(10, 1);
                 _0x134:
000692 e0ea      	LDI  R30,LOW(10)
000693 940e 0b45 	CALL SUBOPT_0x1B
                 ;sprintf(buff, "%c%d", pointPos, ringPos);
000695 940e 0aaa 	CALL SUBOPT_0x4
                +
000697 e2ec     +LDI R30 , LOW ( 2 * _0x0 + ( 428 ) )
000698 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 428 ) )
                 	__POINTW1FN _0x0,428
000699 93fa      	ST   -Y,R31
00069a 93ea      	ST   -Y,R30
00069b 940e 0b99 	CALL SUBOPT_0x28
00069d 940e 0aaf 	CALL SUBOPT_0x5
00069f 940e 0b9e 	CALL SUBOPT_0x29
0006a1 940e 0af4 	CALL SUBOPT_0xD
0006a3 e088      	LDI  R24,8
0006a4 940e 0936 	CALL _sprintf
0006a6 962c      	ADIW R28,12
                 ;lcd_puts(buff);
                 _0x20C0006:
0006a7 e6a0      	LDI  R26,LOW(_buff)
0006a8 e0b1      	LDI  R27,HIGH(_buff)
0006a9 940e 0a25 	CALL _lcd_puts
0006ab 9508      	RET
                 ; .FEND
                 ;void tes_sensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, "sensor:%d = %d  ", i, read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(100);
                 ;void tampil_count()
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", second);
                 ;lcd_puts(buff);
                 ;interrupt[TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0065 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0006ac 93aa      	ST   -Y,R26
0006ad 93ea      	ST   -Y,R30
0006ae b7ef      	IN   R30,SREG
0006af 93ea      	ST   -Y,R30
                 ; 0000 0066 TCNT0 = 0x96; // BE
0006b0 e9e6      	LDI  R30,LOW(150)
0006b1 bfe2      	OUT  0x32,R30
                 ; 0000 0067 a++;
0006b2 91e0 0181 	LDS  R30,_a
0006b4 5fef      	SUBI R30,-LOW(1)
0006b5 93e0 0181 	STS  _a,R30
                 ; 0000 0068 
                 ; 0000 0069 if (a <= pos_servo1)
0006b7 91a0 0181 	LDS  R26,_a
0006b9 16da      	CP   R13,R26
0006ba f010      	BRLO _0x13A
                 ; 0000 006A {
                 ; 0000 006B servo1 = 0;
0006bb 98ae      	CBI  0x15,6
                 ; 0000 006C }
                 ; 0000 006D else
0006bc c001      	RJMP _0x13D
                 _0x13A:
                 ; 0000 006E {
                 ; 0000 006F servo1 = 1;
0006bd 9aae      	SBI  0x15,6
                 ; 0000 0070 }
                 _0x13D:
                 ; 0000 0071 if (a <= pos_servo2)
0006be 91a0 0181 	LDS  R26,_a
0006c0 16ca      	CP   R12,R26
0006c1 f010      	BRLO _0x140
                 ; 0000 0072 {
                 ; 0000 0073 servo2 = 0;
0006c2 98af      	CBI  0x15,7
                 ; 0000 0074 }
                 ; 0000 0075 else
0006c3 c001      	RJMP _0x143
                 _0x140:
                 ; 0000 0076 {
                 ; 0000 0077 servo2 = 1;
0006c4 9aaf      	SBI  0x15,7
                 ; 0000 0078 }
                 _0x143:
                 ; 0000 0079 }
0006c5 91e9      	LD   R30,Y+
0006c6 bfef      	OUT  SREG,R30
0006c7 91e9      	LD   R30,Y+
0006c8 91a9      	LD   R26,Y+
0006c9 9518      	RETI
                 ; .FEND
                 ;interrupt[TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 007D {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 007E // Place your code here
                 ; 0000 007F }
0006ca 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0082 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0083 // Declare your local variables here
                 ; 0000 0084 
                 ; 0000 0085 // Input/Output Ports initialization
                 ; 0000 0086 // Port A initialization
                 ; 0000 0087 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0088 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0089 PORTA=0x00;
0006cb e0e0      	LDI  R30,LOW(0)
0006cc bbeb      	OUT  0x1B,R30
                 ; 0000 008A DDRA=0x00;
0006cd bbea      	OUT  0x1A,R30
                 ; 0000 008B 
                 ; 0000 008C // Port B initialization
                 ; 0000 008D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 008E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 008F PORTB=0x08;
0006ce e0e8      	LDI  R30,LOW(8)
0006cf bbe8      	OUT  0x18,R30
                 ; 0000 0090 DDRB=0Xff;//0x08;
0006d0 efef      	LDI  R30,LOW(255)
0006d1 bbe7      	OUT  0x17,R30
                 ; 0000 0091 
                 ; 0000 0092 // Port C initialization
                 ; 0000 0093 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0094 // State7=T State6=T State5=T State4=T State3=P State2=P State1=P State0=P
                 ; 0000 0095 PORTC=0xFF;
0006d2 bbe5      	OUT  0x15,R30
                 ; 0000 0096 DDRC=0xF0; //C0
0006d3 efe0      	LDI  R30,LOW(240)
0006d4 bbe4      	OUT  0x14,R30
                 ; 0000 0097 
                 ; 0000 0098 // Port D initialization
                 ; 0000 0099 // Func7=In Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 009A // State7=T State6=T State5=0 State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 009B PORTD=0x01;
0006d5 e0e1      	LDI  R30,LOW(1)
0006d6 bbe2      	OUT  0x12,R30
                 ; 0000 009C DDRD=0xFE; //3F
0006d7 efee      	LDI  R30,LOW(254)
0006d8 bbe1      	OUT  0x11,R30
                 ; 0000 009D 
                 ; 0000 009E // Timer/Counter 0 initialization
                 ; 0000 009F TCCR0=0x4A;
0006d9 e4ea      	LDI  R30,LOW(74)
0006da bfe3      	OUT  0x33,R30
                 ; 0000 00A0 TCNT0=0x96;
0006db e9e6      	LDI  R30,LOW(150)
0006dc bfe2      	OUT  0x32,R30
                 ; 0000 00A1 OCR0=0x00;
0006dd e0e0      	LDI  R30,LOW(0)
0006de bfec      	OUT  0x3C,R30
                 ; 0000 00A2 
                 ; 0000 00A3 // Timer/Counter 1 initialization
                 ; 0000 00A4 TCCR1A=0xA1;
0006df eae1      	LDI  R30,LOW(161)
0006e0 bdef      	OUT  0x2F,R30
                 ; 0000 00A5 TCCR1B=0x09;
0006e1 e0e9      	LDI  R30,LOW(9)
0006e2 bdee      	OUT  0x2E,R30
                 ; 0000 00A6 TCNT1H=0x00;
0006e3 e0e0      	LDI  R30,LOW(0)
0006e4 bded      	OUT  0x2D,R30
                 ; 0000 00A7 TCNT1L=0x00;
0006e5 bdec      	OUT  0x2C,R30
                 ; 0000 00A8 ICR1H=0x00;
0006e6 bde7      	OUT  0x27,R30
                 ; 0000 00A9 ICR1L=0x00;
0006e7 bde6      	OUT  0x26,R30
                 ; 0000 00AA OCR1AH=0x00;
0006e8 bdeb      	OUT  0x2B,R30
                 ; 0000 00AB OCR1AL=0x00;
0006e9 bdea      	OUT  0x2A,R30
                 ; 0000 00AC OCR1BH=0x00;
0006ea bde9      	OUT  0x29,R30
                 ; 0000 00AD OCR1BL=0x00;
0006eb bde8      	OUT  0x28,R30
                 ; 0000 00AE 
                 ; 0000 00AF // Timer/Counter 2 initialization
                 ; 0000 00B0 // Clock source: System Clock
                 ; 0000 00B1 // Clock value: Timer 2 Stopped
                 ; 0000 00B2 // Mode: Normal top=FFh
                 ; 0000 00B3 // OC2 output: Disconnected
                 ; 0000 00B4 ASSR=0x00;
0006ec bde2      	OUT  0x22,R30
                 ; 0000 00B5 TCCR2=0x00;
0006ed bde5      	OUT  0x25,R30
                 ; 0000 00B6 TCNT2=0x00;
0006ee bde4      	OUT  0x24,R30
                 ; 0000 00B7 OCR2=0x00;
0006ef bde3      	OUT  0x23,R30
                 ; 0000 00B8 
                 ; 0000 00B9 // External Interrupt(s) initialization
                 ; 0000 00BA // INT0: Off
                 ; 0000 00BB // INT1: Off
                 ; 0000 00BC // INT2: Off
                 ; 0000 00BD MCUCR=0x00;
0006f0 bfe5      	OUT  0x35,R30
                 ; 0000 00BE MCUCSR=0x00;
0006f1 bfe4      	OUT  0x34,R30
                 ; 0000 00BF 
                 ; 0000 00C0 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00C1 TIMSK=0x03;
0006f2 e0e3      	LDI  R30,LOW(3)
0006f3 bfe9      	OUT  0x39,R30
                 ; 0000 00C2 
                 ; 0000 00C3 // Analog Comparator initialization
                 ; 0000 00C4 // Analog Comparator: Off
                 ; 0000 00C5 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00C6 ACSR=0x80;
0006f4 e8e0      	LDI  R30,LOW(128)
0006f5 b9e8      	OUT  0x8,R30
                 ; 0000 00C7 SFIOR=0x00;
0006f6 e0e0      	LDI  R30,LOW(0)
0006f7 bfe0      	OUT  0x30,R30
                 ; 0000 00C8 
                 ; 0000 00C9 
                 ; 0000 00CA 
                 ; 0000 00CB MCUCR=0x00;
0006f8 bfe5      	OUT  0x35,R30
                 ; 0000 00CC MCUCSR=0x00;
0006f9 bfe4      	OUT  0x34,R30
                 ; 0000 00CD 
                 ; 0000 00CE ////USART, UNTUK KOMUNIKASI BLUETOOTH
                 ; 0000 00CF //UCSRA=0x00;
                 ; 0000 00D0 //UCSRB=0x18;
                 ; 0000 00D1 //UCSRC=0x86;
                 ; 0000 00D2 //UBRRH=0x00;
                 ; 0000 00D3 //UBRRL=0x47;
                 ; 0000 00D4 // USART initialization
                 ; 0000 00D5 // USART disabled
                 ; 0000 00D6 UCSRB=0x00;
0006fa b9ea      	OUT  0xA,R30
                 ; 0000 00D7 
                 ; 0000 00D8 // ADC initialization
                 ; 0000 00D9 // ADC Clock frequency: 691.200 kHz
                 ; 0000 00DA // ADC Voltage Reference: AVCC pin
                 ; 0000 00DB // ADC Auto Trigger Source: None
                 ; 0000 00DC // Only the 8 most significant bits of
                 ; 0000 00DD // the AD conversion result are used
                 ; 0000 00DE ADMUX=ADC_VREF_TYPE & 0xff;
0006fb e6e0      	LDI  R30,LOW(96)
0006fc b9e7      	OUT  0x7,R30
                 ; 0000 00DF ADCSRA=0x84;
0006fd e8e4      	LDI  R30,LOW(132)
0006fe b9e6      	OUT  0x6,R30
                 ; 0000 00E0 //ADCSRA=0xA6;
                 ; 0000 00E1 SFIOR&=0x1F;
0006ff b7e0      	IN   R30,0x30
000700 71ef      	ANDI R30,LOW(0x1F)
000701 bfe0      	OUT  0x30,R30
                 ; 0000 00E2 
                 ; 0000 00E3 // LCD module initialization
                 ; 0000 00E4 lcd_init(16); //
000702 e1a0      	LDI  R26,LOW(16)
000703 940e 0a58 	CALL _lcd_init
                 ; 0000 00E5 lcd_clear();  //
000705 940e 09e9 	CALL _lcd_clear
                 ; 0000 00E6 lampu = 0;    //
000707 98c3      	CBI  0x18,3
                 ; 0000 00E7 // k,b
                 ; 0000 00E8 lcd_gotoxy(0, 0);
000708 e0e0      	LDI  R30,LOW(0)
000709 940e 0aa6 	CALL SUBOPT_0x3
                 ; 0000 00E9 lcd_putsf("     LEGION     ");
                +
00070b e3a1     +LDI R26 , LOW ( 2 * _0x0 + ( 433 ) )
00070c e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 433 ) )
                 	__POINTW2FN _0x0,433
00070d 940e 0b53 	CALL SUBOPT_0x1E
                 ; 0000 00EA lcd_gotoxy(0, 1);
                 ; 0000 00EB lcd_putsf(" MAN 4 JOMBANG ");
                +
00070f e4a2     +LDI R26 , LOW ( 2 * _0x0 + ( 450 ) )
000710 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 450 ) )
                 	__POINTW2FN _0x0,450
000711 940e 0a34 	CALL _lcd_putsf
                 ; 0000 00EC delay_ms(500);
000713 efa4      	LDI  R26,LOW(500)
000714 e0b1      	LDI  R27,HIGH(500)
000715 940e 0d52 	CALL _delay_ms
                 ; 0000 00ED lcd_clear();
000717 940e 09e9 	CALL _lcd_clear
                 ; 0000 00EE 
                 ; 0000 00EF // PROGRAM UTAMA
                 ; 0000 00F0 // Global enable interrupts
                 ; 0000 00F1 #asm("sei")
000719 9478      	SEI
                 ; 0000 00F2 lengan_atas;
00071a eeea      	LDI  R30,LOW(234)
00071b 2ece      	MOV  R12,R30
                 ; 0000 00F3 capit_lepas;
00071c eee6      	LDI  R30,LOW(230)
00071d 2ede      	MOV  R13,R30
                 ; 0000 00F4 
                 ; 0000 00F5 /// mapMirror = 0 - map/lintasan bagian biru
                 ; 0000 00F6 /// mapMirror = 1 - map/lintasan bagian merah
                 ; 0000 00F7 if(mapMirror != map_biru && mapMirror != map_merah) mapMirror = map_biru;
00071e 940e 0b39 	CALL SUBOPT_0x19
000720 9730      	SBIW R30,0
000721 f021      	BREQ _0x149
000722 30e1      	CPI  R30,LOW(0x1)
000723 e0a0      	LDI  R26,HIGH(0x1)
000724 07fa      	CPC  R31,R26
000725 f409      	BRNE _0x14A
                 _0x149:
000726 c006      	RJMP _0x148
                 _0x14A:
000727 e2aa      	LDI  R26,LOW(_mapMirror)
000728 e0b0      	LDI  R27,HIGH(_mapMirror)
000729 e0e0      	LDI  R30,LOW(0)
00072a e0f0      	LDI  R31,HIGH(0)
00072b 940e 0c4e 	CALL __EEPROMWRW
                 ; 0000 00F8 
                 ; 0000 00F9 lcd_clear();
                 _0x148:
00072d 940e 0b4f 	CALL SUBOPT_0x1D
                 ; 0000 00FA lcd_gotoxy(0, 0);
                 ; 0000 00FB lcd_putsf("Menu");
                +
00072f eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
000730 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
000731 940e 0b53 	CALL SUBOPT_0x1E
                 ; 0000 00FC lcd_gotoxy(0, 1);
                 ; 0000 00FD lcd_putsf("Kalibrasi");
                +
000733 eea9     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
000734 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
000735 940e 0a34 	CALL _lcd_putsf
                 ; 0000 00FE 
                 ; 0000 00FF while(1) {
                 _0x14B:
                 ; 0000 0100 if(!isChildSelect) {
000737 91e0 0184 	LDS  R30,_isChildSelect
000739 30e0      	CPI  R30,0
00073a f421      	BRNE _0x14E
                 ; 0000 0101 display_sensor();
00073b daae      	RCALL _display_sensor
                 ; 0000 0102 bacawarna();
00073c dd42      	RCALL _bacawarna
                 ; 0000 0103 display_map();
00073d df1c      	RCALL _display_map
                 ; 0000 0104 display_checkpoint();
00073e df2e      	RCALL _display_checkpoint
                 ; 0000 0105 }
                 ; 0000 0106 
                 ; 0000 0107 if((t1 == 0)) {
                 _0x14E:
00073f 9998      	SBIC 0x13,0
000740 c019      	RJMP _0x14F
                 ; 0000 0108 
                 ; 0000 0109 if(!isChildSelect) count_btn ++;
000741 91e0 0184 	LDS  R30,_isChildSelect
000743 30e0      	CPI  R30,0
000744 f421      	BRNE _0x150
000745 e8a2      	LDI  R26,LOW(_count_btn)
000746 e0b1      	LDI  R27,HIGH(_count_btn)
000747 940e 0ba8 	CALL SUBOPT_0x2B
                 ; 0000 010A if(count_btn >= 8) count_btn = 0;
                 _0x150:
000749 91a0 0182 	LDS  R26,_count_btn
00074b 91b0 0183 	LDS  R27,_count_btn+1
00074d 9718      	SBIW R26,8
00074e f02c      	BRLT _0x151
00074f e0e0      	LDI  R30,LOW(0)
000750 93e0 0182 	STS  _count_btn,R30
000752 93e0 0183 	STS  _count_btn+1,R30
                 ; 0000 010B delay(200);
                 _0x151:
000754 940e 0b95 	CALL SUBOPT_0x27
                 ; 0000 010C changeMenu(count_btn, false);
000756 940e 0bae 	CALL SUBOPT_0x2C
000758 e0a0      	LDI  R26,LOW(0)
000759 dd53      	RCALL _changeMenu
                 ; 0000 010D }
                 ; 0000 010E if((t2 == 0)) {
                 _0x14F:
00075a 9999      	SBIC 0x13,1
00075b c006      	RJMP _0x152
                 ; 0000 010F changeMenu(count_btn, true);
00075c 940e 0bae 	CALL SUBOPT_0x2C
00075e e0a1      	LDI  R26,LOW(1)
00075f dd4d      	RCALL _changeMenu
                 ; 0000 0110 delay(200);
000760 940e 0b95 	CALL SUBOPT_0x27
                 ; 0000 0111 }
                 ; 0000 0112 if((t3 == 0)) {
                 _0x152:
000762 999a      	SBIC 0x13,2
000763 c02b      	RJMP _0x153
                 ; 0000 0113 if(!ringPos) {
000764 940e 0b9e 	CALL SUBOPT_0x29
000766 9730      	SBIW R30,0
000767 f419      	BRNE _0x154
                 ; 0000 0114 ringPos = 1;
000768 940e 0ba3 	CALL SUBOPT_0x2A
00076a c005      	RJMP _0x166
                 ; 0000 0115 } else {
                 _0x154:
                 ; 0000 0116 ringPos += 1;
00076b 940e 0b9e 	CALL SUBOPT_0x29
00076d 9631      	ADIW R30,1
00076e e2ad      	LDI  R26,LOW(_ringPos)
00076f e0b0      	LDI  R27,HIGH(_ringPos)
                 _0x166:
000770 940e 0c4e 	CALL __EEPROMWRW
                 ; 0000 0117 }
                 ; 0000 0118 
                 ; 0000 0119 if((ringPos > 3) && (pointPos != 'Z')) {
000772 940e 0b9e 	CALL SUBOPT_0x29
000774 9734      	SBIW R30,4
000775 f024      	BRLT _0x157
000776 940e 0b99 	CALL SUBOPT_0x28
000778 35ea      	CPI  R30,LOW(0x5A)
000779 f409      	BRNE _0x158
                 _0x157:
00077a c003      	RJMP _0x156
                 _0x158:
                 ; 0000 011A ringPos = 1;
00077b 940e 0ba3 	CALL SUBOPT_0x2A
00077d c00d      	RJMP _0x167
                 ; 0000 011B } else if((ringPos > 3) && (pointPos == 'Z')) {
                 _0x156:
00077e 940e 0b9e 	CALL SUBOPT_0x29
000780 9734      	SBIW R30,4
000781 f024      	BRLT _0x15B
000782 940e 0b99 	CALL SUBOPT_0x28
000784 35ea      	CPI  R30,LOW(0x5A)
000785 f009      	BREQ _0x15C
                 _0x15B:
000786 c006      	RJMP _0x15A
                 _0x15C:
                 ; 0000 011C ringPos = 4;
000787 e2ad      	LDI  R26,LOW(_ringPos)
000788 e0b0      	LDI  R27,HIGH(_ringPos)
000789 e0e4      	LDI  R30,LOW(4)
00078a e0f0      	LDI  R31,HIGH(4)
                 _0x167:
00078b 940e 0c4e 	CALL __EEPROMWRW
                 ; 0000 011D }
                 ; 0000 011E delay(200);
                 _0x15A:
00078d 940e 0b95 	CALL SUBOPT_0x27
                 ; 0000 011F }
                 ; 0000 0120 if((t4 == 0)) {
                 _0x153:
00078f 999b      	SBIC 0x13,3
000790 c02d      	RJMP _0x15D
                 ; 0000 0121 if(pointPos == 'A') {
000791 940e 0b99 	CALL SUBOPT_0x28
000793 34e1      	CPI  R30,LOW(0x41)
000794 f481      	BRNE _0x15E
                 ; 0000 0122 pointPos = 'B';
000795 e2ac      	LDI  R26,LOW(_pointPos)
000796 e0b0      	LDI  R27,HIGH(_pointPos)
000797 e4e2      	LDI  R30,LOW(66)
000798 940e 0c56 	CALL __EEPROMWRB
                 ; 0000 0123 if(ringPos == 4) ringPos = 1;
00079a 940e 0b9e 	CALL SUBOPT_0x29
00079c 30e4      	CPI  R30,LOW(0x4)
00079d e0a0      	LDI  R26,HIGH(0x4)
00079e 07fa      	CPC  R31,R26
00079f f421      	BRNE _0x15F
0007a0 940e 0ba3 	CALL SUBOPT_0x2A
0007a2 940e 0c4e 	CALL __EEPROMWRW
                 ; 0000 0124 } else if(pointPos == 'B') {
                 _0x15F:
0007a4 c017      	RJMP _0x160
                 _0x15E:
0007a5 940e 0b99 	CALL SUBOPT_0x28
0007a7 34e2      	CPI  R30,LOW(0x42)
0007a8 f451      	BRNE _0x161
                 ; 0000 0125 pointPos = 'Z';
0007a9 e2ac      	LDI  R26,LOW(_pointPos)
0007aa e0b0      	LDI  R27,HIGH(_pointPos)
0007ab e5ea      	LDI  R30,LOW(90)
0007ac 940e 0c56 	CALL __EEPROMWRB
                 ; 0000 0126 ringPos = 4;
0007ae e2ad      	LDI  R26,LOW(_ringPos)
0007af e0b0      	LDI  R27,HIGH(_ringPos)
0007b0 e0e4      	LDI  R30,LOW(4)
0007b1 e0f0      	LDI  R31,HIGH(4)
0007b2 c007      	RJMP _0x168
                 ; 0000 0127 } else {
                 _0x161:
                 ; 0000 0128 pointPos = 'A';
0007b3 e2ac      	LDI  R26,LOW(_pointPos)
0007b4 e0b0      	LDI  R27,HIGH(_pointPos)
0007b5 e4e1      	LDI  R30,LOW(65)
0007b6 940e 0c56 	CALL __EEPROMWRB
                 ; 0000 0129 ringPos = 1;
0007b8 940e 0ba3 	CALL SUBOPT_0x2A
                 _0x168:
0007ba 940e 0c4e 	CALL __EEPROMWRW
                 ; 0000 012A }
                 _0x160:
                 ; 0000 012B delay(200);
0007bc 940e 0b95 	CALL SUBOPT_0x27
                 ; 0000 012C }
                 ; 0000 012D }
                 _0x15D:
0007be cf78      	RJMP _0x14B
                 ; 0000 012E }
                 _0x163:
0007bf cfff      	RJMP _0x163
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0007c0 93ba      	ST   -Y,R27
0007c1 93aa      	ST   -Y,R26
0007c2 931a      	ST   -Y,R17
0007c3 930a      	ST   -Y,R16
0007c4 81aa      	LDD  R26,Y+2
0007c5 81bb      	LDD  R27,Y+2+1
0007c6 9612      	ADIW R26,2
0007c7 940e 0c31 	CALL __GETW1P
0007c9 9730      	SBIW R30,0
0007ca f129      	BREQ _0x2000010
0007cb 81aa      	LDD  R26,Y+2
0007cc 81bb      	LDD  R27,Y+2+1
0007cd 9614      	ADIW R26,4
0007ce 940e 0c31 	CALL __GETW1P
0007d0 018f      	MOVW R16,R30
0007d1 9730      	SBIW R30,0
0007d2 f061      	BREQ _0x2000012
                +
0007d3 3002     +CPI R16 , LOW ( 2 )
0007d4 e0e0     +LDI R30 , HIGH ( 2 )
0007d5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0007d6 f080      	BRLO _0x2000013
0007d7 01f8      	MOVW R30,R16
0007d8 9731      	SBIW R30,1
0007d9 018f      	MOVW R16,R30
                +
0007da 81aa     +LDD R26 , Y + 2
0007db 81bb     +LDD R27 , Y + 2 + 1
0007dc 9614     +ADIW R26 , 4
0007dd 93ed     +ST X + , R30
0007de 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0007df 81aa      	LDD  R26,Y+2
0007e0 81bb      	LDD  R27,Y+2+1
0007e1 9612      	ADIW R26,2
0007e2 940e 0ba8 	CALL SUBOPT_0x2B
0007e4 9731      	SBIW R30,1
0007e5 81ac      	LDD  R26,Y+4
0007e6 83a0      	STD  Z+0,R26
                 _0x2000013:
0007e7 81aa      	LDD  R26,Y+2
0007e8 81bb      	LDD  R27,Y+2+1
0007e9 940e 0c31 	CALL __GETW1P
0007eb 23ff      	TST  R31
0007ec f012      	BRMI _0x2000014
0007ed 940e 0ba8 	CALL SUBOPT_0x2B
                 _0x2000014:
0007ef c006      	RJMP _0x2000015
                 _0x2000010:
0007f0 81aa      	LDD  R26,Y+2
0007f1 81bb      	LDD  R27,Y+2+1
0007f2 efef      	LDI  R30,LOW(65535)
0007f3 efff      	LDI  R31,HIGH(65535)
0007f4 93ed      	ST   X+,R30
0007f5 93fc      	ST   X,R31
                 _0x2000015:
0007f6 8119      	LDD  R17,Y+1
0007f7 8108      	LDD  R16,Y+0
0007f8 9625      	ADIW R28,5
0007f9 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0007fa 93ba      	ST   -Y,R27
0007fb 93aa      	ST   -Y,R26
0007fc 9726      	SBIW R28,6
0007fd 940e 0bdb 	CALL __SAVELOCR6
0007ff e010      	LDI  R17,0
000800 85ac      	LDD  R26,Y+12
000801 85bd      	LDD  R27,Y+12+1
000802 e0e0      	LDI  R30,LOW(0)
000803 e0f0      	LDI  R31,HIGH(0)
000804 93ed      	ST   X+,R30
000805 93fc      	ST   X,R31
                 _0x2000016:
000806 89ea      	LDD  R30,Y+18
000807 89fb      	LDD  R31,Y+18+1
000808 9631      	ADIW R30,1
000809 8bea      	STD  Y+18,R30
00080a 8bfb      	STD  Y+18+1,R31
00080b 9731      	SBIW R30,1
00080c 91e4      	LPM  R30,Z
00080d 2f2e      	MOV  R18,R30
00080e 30e0      	CPI  R30,0
00080f f409      	BRNE PC+2
000810 c11d      	RJMP _0x2000018
000811 2fe1      	MOV  R30,R17
000812 30e0      	CPI  R30,0
000813 f439      	BRNE _0x200001C
000814 3225      	CPI  R18,37
000815 f411      	BRNE _0x200001D
000816 e011      	LDI  R17,LOW(1)
000817 c002      	RJMP _0x200001E
                 _0x200001D:
000818 940e 0bb5 	CALL SUBOPT_0x2D
                 _0x200001E:
00081a c112      	RJMP _0x200001B
                 _0x200001C:
00081b 30e1      	CPI  R30,LOW(0x1)
00081c f4a9      	BRNE _0x200001F
00081d 3225      	CPI  R18,37
00081e f419      	BRNE _0x2000020
00081f 940e 0bb5 	CALL SUBOPT_0x2D
000821 c10a      	RJMP _0x20000CC
                 _0x2000020:
000822 e012      	LDI  R17,LOW(2)
000823 e040      	LDI  R20,LOW(0)
000824 e000      	LDI  R16,LOW(0)
000825 322d      	CPI  R18,45
000826 f411      	BRNE _0x2000021
000827 e001      	LDI  R16,LOW(1)
000828 c104      	RJMP _0x200001B
                 _0x2000021:
000829 322b      	CPI  R18,43
00082a f411      	BRNE _0x2000022
00082b e24b      	LDI  R20,LOW(43)
00082c c100      	RJMP _0x200001B
                 _0x2000022:
00082d 3220      	CPI  R18,32
00082e f411      	BRNE _0x2000023
00082f e240      	LDI  R20,LOW(32)
000830 c0fc      	RJMP _0x200001B
                 _0x2000023:
000831 c002      	RJMP _0x2000024
                 _0x200001F:
000832 30e2      	CPI  R30,LOW(0x2)
000833 f439      	BRNE _0x2000025
                 _0x2000024:
000834 e050      	LDI  R21,LOW(0)
000835 e013      	LDI  R17,LOW(3)
000836 3320      	CPI  R18,48
000837 f411      	BRNE _0x2000026
000838 6800      	ORI  R16,LOW(128)
000839 c0f3      	RJMP _0x200001B
                 _0x2000026:
00083a c003      	RJMP _0x2000027
                 _0x2000025:
00083b 30e3      	CPI  R30,LOW(0x3)
00083c f009      	BREQ PC+2
00083d c0ef      	RJMP _0x200001B
                 _0x2000027:
00083e 3320      	CPI  R18,48
00083f f010      	BRLO _0x200002A
000840 332a      	CPI  R18,58
000841 f008      	BRLO _0x200002B
                 _0x200002A:
000842 c007      	RJMP _0x2000029
                 _0x200002B:
000843 e0aa      	LDI  R26,LOW(10)
000844 9f5a      	MUL  R21,R26
000845 2d50      	MOV  R21,R0
000846 2fe2      	MOV  R30,R18
000847 53e0      	SUBI R30,LOW(48)
000848 0f5e      	ADD  R21,R30
000849 c0e3      	RJMP _0x200001B
                 _0x2000029:
00084a 2fe2      	MOV  R30,R18
00084b 36e3      	CPI  R30,LOW(0x63)
00084c f449      	BRNE _0x200002F
00084d 940e 0bbc 	CALL SUBOPT_0x2E
00084f 89e8      	LDD  R30,Y+16
000850 89f9      	LDD  R31,Y+16+1
000851 81a4      	LDD  R26,Z+4
000852 93aa      	ST   -Y,R26
000853 940e 0bc2 	CALL SUBOPT_0x2F
000855 c0d6      	RJMP _0x2000030
                 _0x200002F:
000856 37e3      	CPI  R30,LOW(0x73)
000857 f441      	BRNE _0x2000032
000858 940e 0bbc 	CALL SUBOPT_0x2E
00085a 940e 0bc8 	CALL SUBOPT_0x30
00085c 940e 0972 	CALL _strlen
00085e 2f1e      	MOV  R17,R30
00085f c00a      	RJMP _0x2000033
                 _0x2000032:
000860 37e0      	CPI  R30,LOW(0x70)
000861 f461      	BRNE _0x2000035
000862 940e 0bbc 	CALL SUBOPT_0x2E
000864 940e 0bc8 	CALL SUBOPT_0x30
000866 940e 097e 	CALL _strlenf
000868 2f1e      	MOV  R17,R30
000869 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00086a 6002      	ORI  R16,LOW(2)
00086b 770f      	ANDI R16,LOW(127)
00086c e030      	LDI  R19,LOW(0)
00086d c03c      	RJMP _0x2000036
                 _0x2000035:
00086e 36e4      	CPI  R30,LOW(0x64)
00086f f011      	BREQ _0x2000039
000870 36e9      	CPI  R30,LOW(0x69)
000871 f411      	BRNE _0x200003A
                 _0x2000039:
000872 6004      	ORI  R16,LOW(4)
000873 c002      	RJMP _0x200003B
                 _0x200003A:
000874 37e5      	CPI  R30,LOW(0x75)
000875 f431      	BRNE _0x200003C
                 _0x200003B:
000876 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000877 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000878 83ee      	STD  Y+6,R30
000879 83ff      	STD  Y+6+1,R31
00087a e015      	LDI  R17,LOW(5)
00087b c00c      	RJMP _0x200003D
                 _0x200003C:
00087c 35e8      	CPI  R30,LOW(0x58)
00087d f411      	BRNE _0x200003F
00087e 6008      	ORI  R16,LOW(8)
00087f c003      	RJMP _0x2000040
                 _0x200003F:
000880 37e8      	CPI  R30,LOW(0x78)
000881 f009      	BREQ PC+2
000882 c0a9      	RJMP _0x2000071
                 _0x2000040:
000883 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000884 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000885 83ee      	STD  Y+6,R30
000886 83ff      	STD  Y+6+1,R31
000887 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000888 ff02      	SBRS R16,2
000889 c017      	RJMP _0x2000042
00088a 940e 0bbc 	CALL SUBOPT_0x2E
00088c 89a8      	LDD  R26,Y+16
00088d 89b9      	LDD  R27,Y+16+1
00088e 9614      	ADIW R26,4
00088f 91ed      	LD   R30,X+
000890 91fd      	LD   R31,X+
000891 87ea      	STD  Y+10,R30
000892 87fb      	STD  Y+10+1,R31
000893 85ab      	LDD  R26,Y+11
000894 23aa      	TST  R26
000895 f42a      	BRPL _0x2000043
000896 940e 0bed 	CALL __ANEGW1
000898 87ea      	STD  Y+10,R30
000899 87fb      	STD  Y+10+1,R31
00089a e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00089b 3040      	CPI  R20,0
00089c f011      	BREQ _0x2000044
00089d 5f1f      	SUBI R17,-LOW(1)
00089e c001      	RJMP _0x2000045
                 _0x2000044:
00089f 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0008a0 c009      	RJMP _0x2000046
                 _0x2000042:
0008a1 940e 0bbc 	CALL SUBOPT_0x2E
0008a3 89a8      	LDD  R26,Y+16
0008a4 89b9      	LDD  R27,Y+16+1
0008a5 9614      	ADIW R26,4
0008a6 940e 0c31 	CALL __GETW1P
0008a8 87ea      	STD  Y+10,R30
0008a9 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
0008aa fd00      	SBRC R16,0
0008ab c011      	RJMP _0x2000047
                 _0x2000048:
0008ac 1715      	CP   R17,R21
0008ad f478      	BRSH _0x200004A
0008ae ff07      	SBRS R16,7
0008af c008      	RJMP _0x200004B
0008b0 ff02      	SBRS R16,2
0008b1 c004      	RJMP _0x200004C
0008b2 7f0b      	ANDI R16,LOW(251)
0008b3 2f24      	MOV  R18,R20
0008b4 5011      	SUBI R17,LOW(1)
0008b5 c001      	RJMP _0x200004D
                 _0x200004C:
0008b6 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0008b7 c001      	RJMP _0x200004E
                 _0x200004B:
0008b8 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0008b9 940e 0bb5 	CALL SUBOPT_0x2D
0008bb 5051      	SUBI R21,LOW(1)
0008bc cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0008bd 2f31      	MOV  R19,R17
0008be ff01      	SBRS R16,1
0008bf c017      	RJMP _0x200004F
                 _0x2000050:
0008c0 3030      	CPI  R19,0
0008c1 f0a1      	BREQ _0x2000052
0008c2 ff03      	SBRS R16,3
0008c3 c006      	RJMP _0x2000053
0008c4 81ee      	LDD  R30,Y+6
0008c5 81ff      	LDD  R31,Y+6+1
0008c6 9125      	LPM  R18,Z+
0008c7 83ee      	STD  Y+6,R30
0008c8 83ff      	STD  Y+6+1,R31
0008c9 c005      	RJMP _0x2000054
                 _0x2000053:
0008ca 81ae      	LDD  R26,Y+6
0008cb 81bf      	LDD  R27,Y+6+1
0008cc 912d      	LD   R18,X+
0008cd 83ae      	STD  Y+6,R26
0008ce 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0008cf 940e 0bb5 	CALL SUBOPT_0x2D
0008d1 3050      	CPI  R21,0
0008d2 f009      	BREQ _0x2000055
0008d3 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0008d4 5031      	SUBI R19,LOW(1)
0008d5 cfea      	RJMP _0x2000050
                 _0x2000052:
0008d6 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0008d7 e320      	LDI  R18,LOW(48)
0008d8 81ee      	LDD  R30,Y+6
0008d9 81ff      	LDD  R31,Y+6+1
0008da 940e 0c35 	CALL __GETW1PF
0008dc 87e8      	STD  Y+8,R30
0008dd 87f9      	STD  Y+8+1,R31
0008de 81ee      	LDD  R30,Y+6
0008df 81ff      	LDD  R31,Y+6+1
0008e0 9632      	ADIW R30,2
0008e1 83ee      	STD  Y+6,R30
0008e2 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0008e3 85e8      	LDD  R30,Y+8
0008e4 85f9      	LDD  R31,Y+8+1
0008e5 85aa      	LDD  R26,Y+10
0008e6 85bb      	LDD  R27,Y+10+1
0008e7 17ae      	CP   R26,R30
0008e8 07bf      	CPC  R27,R31
0008e9 f050      	BRLO _0x200005C
0008ea 5f2f      	SUBI R18,-LOW(1)
0008eb 85a8      	LDD  R26,Y+8
0008ec 85b9      	LDD  R27,Y+8+1
0008ed 85ea      	LDD  R30,Y+10
0008ee 85fb      	LDD  R31,Y+10+1
0008ef 1bea      	SUB  R30,R26
0008f0 0bfb      	SBC  R31,R27
0008f1 87ea      	STD  Y+10,R30
0008f2 87fb      	STD  Y+10+1,R31
0008f3 cfef      	RJMP _0x200005A
                 _0x200005C:
0008f4 332a      	CPI  R18,58
0008f5 f028      	BRLO _0x200005D
0008f6 ff03      	SBRS R16,3
0008f7 c002      	RJMP _0x200005E
0008f8 5f29      	SUBI R18,-LOW(7)
0008f9 c001      	RJMP _0x200005F
                 _0x200005E:
0008fa 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0008fb fd04      	SBRC R16,4
0008fc c01a      	RJMP _0x2000061
0008fd 3321      	CPI  R18,49
0008fe f420      	BRSH _0x2000063
0008ff 85a8      	LDD  R26,Y+8
000900 85b9      	LDD  R27,Y+8+1
000901 9711      	SBIW R26,1
000902 f409      	BRNE _0x2000062
                 _0x2000063:
000903 c009      	RJMP _0x20000CD
                 _0x2000062:
000904 1753      	CP   R21,R19
000905 f010      	BRLO _0x2000067
000906 ff00      	SBRS R16,0
000907 c001      	RJMP _0x2000068
                 _0x2000067:
000908 c013      	RJMP _0x2000066
                 _0x2000068:
000909 e220      	LDI  R18,LOW(32)
00090a ff07      	SBRS R16,7
00090b c00b      	RJMP _0x2000069
00090c e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00090d 6100      	ORI  R16,LOW(16)
00090e ff02      	SBRS R16,2
00090f c007      	RJMP _0x200006A
000910 7f0b      	ANDI R16,LOW(251)
000911 934a      	ST   -Y,R20
000912 940e 0bc2 	CALL SUBOPT_0x2F
000914 3050      	CPI  R21,0
000915 f009      	BREQ _0x200006B
000916 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000917 940e 0bb5 	CALL SUBOPT_0x2D
000919 3050      	CPI  R21,0
00091a f009      	BREQ _0x200006C
00091b 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00091c 5031      	SUBI R19,LOW(1)
00091d 85a8      	LDD  R26,Y+8
00091e 85b9      	LDD  R27,Y+8+1
00091f 9712      	SBIW R26,2
000920 f008      	BRLO _0x2000059
000921 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000922 ff00      	SBRS R16,0
000923 c008      	RJMP _0x200006D
                 _0x200006E:
000924 3050      	CPI  R21,0
000925 f031      	BREQ _0x2000070
000926 5051      	SUBI R21,LOW(1)
000927 e2e0      	LDI  R30,LOW(32)
000928 93ea      	ST   -Y,R30
000929 940e 0bc2 	CALL SUBOPT_0x2F
00092b cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
00092c e010      	LDI  R17,LOW(0)
                 _0x200001B:
00092d ced8      	RJMP _0x2000016
                 _0x2000018:
00092e 85ac      	LDD  R26,Y+12
00092f 85bd      	LDD  R27,Y+12+1
000930 91ed      	LD   R30,X+
000931 91fd      	LD   R31,X+
000932 940e 0be2 	CALL __LOADLOCR6
000934 9664      	ADIW R28,20
000935 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000936 92ff      	PUSH R15
000937 2ef8      	MOV  R15,R24
000938 9726      	SBIW R28,6
000939 940e 0bdd 	CALL __SAVELOCR4
00093b 01de      	MOVW R26,R28
00093c 961c      	ADIW R26,12
00093d 940e 0be9 	CALL __ADDW2R15
00093f 940e 0c31 	CALL __GETW1P
000941 9730      	SBIW R30,0
000942 f419      	BRNE _0x2000072
000943 efef      	LDI  R30,LOW(65535)
000944 efff      	LDI  R31,HIGH(65535)
000945 c027      	RJMP _0x20C0005
                 _0x2000072:
000946 01de      	MOVW R26,R28
000947 9616      	ADIW R26,6
000948 940e 0be9 	CALL __ADDW2R15
00094a 018d      	MOVW R16,R26
00094b 01de      	MOVW R26,R28
00094c 961c      	ADIW R26,12
00094d 940e 0be9 	CALL __ADDW2R15
00094f 91ed      	LD   R30,X+
000950 91fd      	LD   R31,X+
000951 83ee      	STD  Y+6,R30
000952 83ff      	STD  Y+6+1,R31
000953 e0e0      	LDI  R30,LOW(0)
000954 87e8      	STD  Y+8,R30
000955 87e9      	STD  Y+8+1,R30
000956 01de      	MOVW R26,R28
000957 961a      	ADIW R26,10
000958 940e 0be9 	CALL __ADDW2R15
00095a 91ed      	LD   R30,X+
00095b 91fd      	LD   R31,X+
00095c 93fa      	ST   -Y,R31
00095d 93ea      	ST   -Y,R30
00095e 931a      	ST   -Y,R17
00095f 930a      	ST   -Y,R16
000960 ece0      	LDI  R30,LOW(_put_buff_G100)
000961 e0f7      	LDI  R31,HIGH(_put_buff_G100)
000962 93fa      	ST   -Y,R31
000963 93ea      	ST   -Y,R30
000964 01de      	MOVW R26,R28
000965 961a      	ADIW R26,10
000966 de93      	RCALL __print_G100
000967 019f      	MOVW R18,R30
000968 81ae      	LDD  R26,Y+6
000969 81bf      	LDD  R27,Y+6+1
00096a e0e0      	LDI  R30,LOW(0)
00096b 93ec      	ST   X,R30
00096c 01f9      	MOVW R30,R18
                 _0x20C0005:
00096d 940e 0be4 	CALL __LOADLOCR4
00096f 962a      	ADIW R28,10
000970 90ff      	POP  R15
000971 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000972 93ba      	ST   -Y,R27
000973 93aa      	ST   -Y,R26
000974 91a9          ld   r26,y+
000975 91b9          ld   r27,y+
000976 27ee          clr  r30
000977 27ff          clr  r31
                 strlen0:
000978 916d          ld   r22,x+
000979 2366          tst  r22
00097a f011          breq strlen1
00097b 9631          adiw r30,1
00097c cffb          rjmp strlen0
                 strlen1:
00097d 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00097e 93ba      	ST   -Y,R27
00097f 93aa      	ST   -Y,R26
000980 27aa          clr  r26
000981 27bb          clr  r27
000982 91e9          ld   r30,y+
000983 91f9          ld   r31,y+
                 strlenf0:
000984 9005      	lpm  r0,z+
000985 2000          tst  r0
000986 f011          breq strlenf1
000987 9611          adiw r26,1
000988 cffb          rjmp strlenf0
                 strlenf1:
000989 01fd          movw r30,r26
00098a 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _abs:
                 ; .FSTART _abs
00098b 93ba      	ST   -Y,R27
00098c 93aa      	ST   -Y,R26
00098d 91e9          ld   r30,y+
00098e 91f9          ld   r31,y+
00098f 9730          sbiw r30,0
000990 f41a          brpl __abs0
000991 95e0          com  r30
000992 95f0          com  r31
000993 9631          adiw r30,1
                 __abs0:
000994 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G103:
                 ; .FSTART __lcd_delay_G103
000995 e0ff          ldi   r31,15
                 __lcd_delay0:
000996 95fa          dec   r31
000997 f7f1          brne  __lcd_delay0
000998 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000999 b3a7          in    r26,__lcd_direction
00099a 70af          andi  r26,0xf                 ;set as input
00099b bba7          out   __lcd_direction,r26
00099c 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
00099d 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
00099e dff6      	RCALL __lcd_delay_G103
00099f 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0009a0 dff4      	RCALL __lcd_delay_G103
0009a1 b3a6          in    r26,__lcd_pin
0009a2 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0009a3 dff1      	RCALL __lcd_delay_G103
0009a4 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0009a5 dfef      	RCALL __lcd_delay_G103
0009a6 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0009a7 fda7          sbrc  r26,__lcd_busy_flag
0009a8 cff5          rjmp  __lcd_busy
0009a9 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
0009aa 7fa0          andi  r26,0xf0
0009ab 2bab          or    r26,r27
0009ac bba8          out   __lcd_port,r26          ;write
0009ad 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0009ae 940e 0995 	CALL __lcd_delay_G103
0009b0 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0009b1 940e 0995 	CALL __lcd_delay_G103
0009b3 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0009b4 93aa      	ST   -Y,R26
0009b5 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0009b6 b3a7          in    r26,__lcd_direction
0009b7 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
0009b8 bba7          out   __lcd_direction,r26
0009b9 b3b8          in    r27,__lcd_port
0009ba 70bf          andi  r27,0xf
0009bb 81a8          ld    r26,y
0009bc dfed      	RCALL __lcd_write_nibble_G103
0009bd 81a8          ld    r26,y
0009be 95a2          swap  r26
0009bf dfea      	RCALL __lcd_write_nibble_G103
0009c0 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
0009c1 940c 0a8a 	JMP  _0x20C0001
                 ; .FEND
                 __lcd_read_nibble_G103:
                 ; .FSTART __lcd_read_nibble_G103
0009c3 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0009c4 940e 0995 	CALL __lcd_delay_G103
0009c6 b3e6          in    r30,__lcd_pin           ;read
0009c7 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0009c8 940e 0995 	CALL __lcd_delay_G103
0009ca 7fe0          andi  r30,0xf0
0009cb 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G103:
                 ; .FSTART _lcd_read_byte0_G103
0009cc 940e 0995 	CALL __lcd_delay_G103
0009ce dff4      	RCALL __lcd_read_nibble_G103
0009cf 2fae          mov   r26,r30
0009d0 dff2      	RCALL __lcd_read_nibble_G103
0009d1 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
0009d2 95e2          swap  r30
0009d3 2bea          or    r30,r26
0009d4 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0009d5 93aa      	ST   -Y,R26
0009d6 940e 0999 	CALL __lcd_ready
0009d8 81e8      	LD   R30,Y
0009d9 e0f0      	LDI  R31,0
0009da 54ef      	SUBI R30,LOW(-__base_y_G103)
0009db 4ffe      	SBCI R31,HIGH(-__base_y_G103)
0009dc 81e0      	LD   R30,Z
0009dd 81a9      	LDD  R26,Y+1
0009de 0fae      	ADD  R26,R30
0009df 940e 09b4 	CALL __lcd_write_data
0009e1 81e9      	LDD  R30,Y+1
0009e2 93e0 01b5 	STS  __lcd_x,R30
0009e4 81e8      	LD   R30,Y
0009e5 93e0 01b6 	STS  __lcd_y,R30
                 _0x20C0004:
0009e7 9622      	ADIW R28,2
0009e8 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0009e9 940e 0999 	CALL __lcd_ready
0009eb e0a2      	LDI  R26,LOW(2)
0009ec 940e 09b4 	CALL __lcd_write_data
0009ee 940e 0999 	CALL __lcd_ready
0009f0 e0ac      	LDI  R26,LOW(12)
0009f1 940e 09b4 	CALL __lcd_write_data
0009f3 940e 0999 	CALL __lcd_ready
0009f5 e0a1      	LDI  R26,LOW(1)
0009f6 940e 09b4 	CALL __lcd_write_data
0009f8 e0e0      	LDI  R30,LOW(0)
0009f9 93e0 01b6 	STS  __lcd_y,R30
0009fb 93e0 01b5 	STS  __lcd_x,R30
0009fd 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0009fe 93aa      	ST   -Y,R26
0009ff 93ef          push r30
000a00 93ff          push r31
000a01 81a8          ld   r26,y
000a02 9468          set
000a03 30aa          cpi  r26,10
000a04 f039          breq __lcd_putchar1
000a05 94e8          clt
000a06 91e0 01b7 	LDS  R30,__lcd_maxx
000a08 91a0 01b5 	LDS  R26,__lcd_x
000a0a 17ae      	CP   R26,R30
000a0b f058      	BRLO _0x2060004
                 	__lcd_putchar1:
000a0c 91e0 01b6 	LDS  R30,__lcd_y
000a0e 5fef      	SUBI R30,-LOW(1)
000a0f 93e0 01b6 	STS  __lcd_y,R30
000a11 e0e0      	LDI  R30,LOW(0)
000a12 93ea      	ST   -Y,R30
000a13 91a0 01b6 	LDS  R26,__lcd_y
000a15 dfbf      	RCALL _lcd_gotoxy
000a16 f056      	brts __lcd_putchar0
                 _0x2060004:
000a17 91e0 01b5 	LDS  R30,__lcd_x
000a19 5fef      	SUBI R30,-LOW(1)
000a1a 93e0 01b5 	STS  __lcd_x,R30
000a1c df7c          rcall __lcd_ready
000a1d 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
000a1e 81a8      	LD   R26,Y
000a1f 940e 09b4 	CALL __lcd_write_data
                 __lcd_putchar0:
000a21 91ff          pop  r31
000a22 91ef          pop  r30
000a23 940c 0a8a 	JMP  _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000a25 93ba      	ST   -Y,R27
000a26 93aa      	ST   -Y,R26
000a27 931a      	ST   -Y,R17
                 _0x2060005:
000a28 81a9      	LDD  R26,Y+1
000a29 81ba      	LDD  R27,Y+1+1
000a2a 91ed      	LD   R30,X+
000a2b 83a9      	STD  Y+1,R26
000a2c 83ba      	STD  Y+1+1,R27
000a2d 2f1e      	MOV  R17,R30
000a2e 30e0      	CPI  R30,0
000a2f f019      	BREQ _0x2060007
000a30 2fa1      	MOV  R26,R17
000a31 dfcc      	RCALL _lcd_putchar
000a32 cff5      	RJMP _0x2060005
                 _0x2060007:
000a33 c010      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000a34 93ba      	ST   -Y,R27
000a35 93aa      	ST   -Y,R26
000a36 931a      	ST   -Y,R17
                 _0x2060008:
000a37 81e9      	LDD  R30,Y+1
000a38 81fa      	LDD  R31,Y+1+1
000a39 9631      	ADIW R30,1
000a3a 83e9      	STD  Y+1,R30
000a3b 83fa      	STD  Y+1+1,R31
000a3c 9731      	SBIW R30,1
000a3d 91e4      	LPM  R30,Z
000a3e 2f1e      	MOV  R17,R30
000a3f 30e0      	CPI  R30,0
000a40 f019      	BREQ _0x206000A
000a41 2fa1      	MOV  R26,R17
000a42 dfbb      	RCALL _lcd_putchar
000a43 cff3      	RJMP _0x2060008
                 _0x206000A:
                 _0x20C0002:
000a44 8118      	LDD  R17,Y+0
                 _0x20C0003:
000a45 9623      	ADIW R28,3
000a46 9508      	RET
                 ; .FEND
                 __long_delay_G103:
                 ; .FSTART __long_delay_G103
000a47 27aa          clr   r26
000a48 27bb          clr   r27
                 __long_delay0:
000a49 9711          sbiw  r26,1         ;2 cycles
000a4a f7f1          brne  __long_delay0 ;2 cycles
000a4b 9508      	RET
                 ; .FEND
                 __lcd_init_write_G103:
                 ; .FSTART __lcd_init_write_G103
000a4c 93aa      	ST   -Y,R26
000a4d 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000a4e b3a7          in    r26,__lcd_direction
000a4f 6fa7          ori   r26,0xf7                ;set as output
000a50 bba7          out   __lcd_direction,r26
000a51 b3b8          in    r27,__lcd_port
000a52 70bf          andi  r27,0xf
000a53 81a8          ld    r26,y
000a54 940e 09aa 	CALL __lcd_write_nibble_G103
000a56 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000a57 c032      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000a58 93aa      	ST   -Y,R26
000a59 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000a5a 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
000a5b 81e8      	LD   R30,Y
000a5c 93e0 01b7 	STS  __lcd_maxx,R30
000a5e 58e0      	SUBI R30,-LOW(128)
                +
000a5f 93e0 01b3+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
000a61 81e8      	LD   R30,Y
000a62 54e0      	SUBI R30,-LOW(192)
                +
000a63 93e0 01b4+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
000a65 940e 0bd2 	CALL SUBOPT_0x31
000a67 940e 0bd2 	CALL SUBOPT_0x31
000a69 940e 0bd2 	CALL SUBOPT_0x31
000a6b dfdb      	RCALL __long_delay_G103
000a6c e2a0      	LDI  R26,LOW(32)
000a6d dfde      	RCALL __lcd_init_write_G103
000a6e dfd8      	RCALL __long_delay_G103
000a6f e2a8      	LDI  R26,LOW(40)
000a70 940e 0bd7 	CALL SUBOPT_0x32
000a72 e0a4      	LDI  R26,LOW(4)
000a73 940e 0bd7 	CALL SUBOPT_0x32
000a75 e8a5      	LDI  R26,LOW(133)
000a76 940e 0bd7 	CALL SUBOPT_0x32
000a78 b3a7          in    r26,__lcd_direction
000a79 70af          andi  r26,0xf                 ;set as input
000a7a bba7          out   __lcd_direction,r26
000a7b 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000a7c 940e 09cc 	CALL _lcd_read_byte0_G103
000a7e 30e5      	CPI  R30,LOW(0x5)
000a7f f011      	BREQ _0x206000B
000a80 e0e0      	LDI  R30,LOW(0)
000a81 c008      	RJMP _0x20C0001
                 _0x206000B:
000a82 940e 0999 	CALL __lcd_ready
000a84 e0a6      	LDI  R26,LOW(6)
000a85 940e 09b4 	CALL __lcd_write_data
000a87 940e 09e9 	CALL _lcd_clear
000a89 e0e1      	LDI  R30,LOW(1)
                 _0x20C0001:
000a8a 9621      	ADIW R28,1
000a8b 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _buff:
000160           	.BYTE 0x21
                 _a:
000181           	.BYTE 0x1
                 _count_btn:
000182           	.BYTE 0x2
                 _isChildSelect:
000184           	.BYTE 0x1
                 _isTestTombol:
000185           	.BYTE 0x1
                 
                 	.ESEG
                 _garis:
000000           	.BYTE 0xE
                 _back:
00000e           	.BYTE 0xE
                 _tengah:
00001c           	.BYTE 0xE
                 
                 	.DSEG
                 _sen:
000186           	.BYTE 0x7
                 _sensor:
00018d           	.BYTE 0x2
                 _error:
00018f           	.BYTE 0x2
                 _lastError:
000191           	.BYTE 0x2
                 _kp:
000193           	.BYTE 0x2
                 _kd:
000195           	.BYTE 0x2
                 _SPEED:
000197           	.BYTE 0x2
                 _MIN_SPEED:
000199           	.BYTE 0x2
                 _MAX_SPEED:
00019b           	.BYTE 0x2
                 _count:
00019d           	.BYTE 0x2
                 _second:
00019f           	.BYTE 0x2
                 
                 	.ESEG
                 _mapMirror:
00002a           	.BYTE 0x2
                 _pointPos:
00002c           	.BYTE 0x1
                 _ringPos:
00002d           	.BYTE 0x2
                 
                 	.DSEG
                 _maxHijau:
0001a1           	.BYTE 0x2
                 _maxKuning:
0001a3           	.BYTE 0x2
                 _maxMerah:
0001a5           	.BYTE 0x2
                 _minHijau:
0001a7           	.BYTE 0x2
                 _minKuning:
0001a9           	.BYTE 0x2
                 _minMerah:
0001ab           	.BYTE 0x2
                 __seed_G102:
0001ad           	.BYTE 0x4
                 __base_y_G103:
0001b1           	.BYTE 0x4
                 __lcd_x:
0001b5           	.BYTE 0x1
                 __lcd_y:
0001b6           	.BYTE 0x1
                 __lcd_maxx:
0001b7           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000a8c e0e7      	LDI  R30,LOW(7)
000a8d e0f0      	LDI  R31,HIGH(7)
000a8e 168e      	CP   R8,R30
000a8f 069f      	CPC  R9,R31
000a90 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
000a91 2da8      	MOV  R26,R8
000a92 940e 018b 	CALL _read_adc
000a94 2e0e      	MOV  R0,R30
000a95 01f4      	MOVW R30,R8
000a96 e1ac      	LDI  R26,LOW(_tengah)
000a97 e0b0      	LDI  R27,HIGH(_tengah)
000a98 0fee      	LSL  R30
000a99 1fff      	ROL  R31
000a9a 0fae      	ADD  R26,R30
000a9b 1fbf      	ADC  R27,R31
000a9c 940e 0c3e 	CALL __EEPROMRDW
000a9e 2da0      	MOV  R26,R0
000a9f e0b0      	LDI  R27,0
000aa0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000aa1 9fea      	MUL  R30,R26
000aa2 01f0      	MOVW R30,R0
                +
000aa3 0f6e     +ADD R22 , R30
000aa4 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
000aa5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x3:
000aa6 93ea      	ST   -Y,R30
000aa7 e0a0      	LDI  R26,LOW(0)
000aa8 940c 09d5 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
000aaa e6e0      	LDI  R30,LOW(_buff)
000aab e0f1      	LDI  R31,HIGH(_buff)
000aac 93fa      	ST   -Y,R31
000aad 93ea      	ST   -Y,R30
000aae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x5:
000aaf 27ff      	CLR  R31
000ab0 2766      	CLR  R22
000ab1 2777      	CLR  R23
000ab2 940e 0c39 	CALL __PUTPARD1
000ab4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000ab5 01f4      	MOVW R30,R8
000ab6 e0a0      	LDI  R26,LOW(_garis)
000ab7 e0b0      	LDI  R27,HIGH(_garis)
000ab8 0fee      	LSL  R30
000ab9 1fff      	ROL  R31
000aba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000abb e0f0      	LDI  R31,0
000abc 940e 0c4e 	CALL __EEPROMWRW
000abe e0e0      	LDI  R30,LOW(0)
000abf cfe6      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8:
000ac0 940e 0a34 	CALL _lcd_putsf
000ac2 e0e0      	LDI  R30,LOW(0)
000ac3 93ea      	ST   -Y,R30
000ac4 e0a1      	LDI  R26,LOW(1)
000ac5 940e 09d5 	CALL _lcd_gotoxy
000ac7 cfe2      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
                +
000ac8 e9e9     +LDI R30 , LOW ( 2 * _0x0 + ( 25 ) )
000ac9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW1FN _0x0,25
000aca 93fa      	ST   -Y,R31
000acb 93ea      	ST   -Y,R30
000acc 01f4      	MOVW R30,R8
000acd 940e 0bf9 	CALL __CWD1
000acf 940e 0c39 	CALL __PUTPARD1
000ad1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xA:
000ad2 0fae      	ADD  R26,R30
000ad3 1fbf      	ADC  R27,R31
000ad4 940e 0c3e 	CALL __EEPROMRDW
000ad6 940e 0bf9 	CALL __CWD1
000ad8 940e 0c39 	CALL __PUTPARD1
000ada e088      	LDI  R24,8
000adb 940e 0936 	CALL _sprintf
000add 962c      	ADIW R28,12
000ade e6a0      	LDI  R26,LOW(_buff)
000adf e0b1      	LDI  R27,HIGH(_buff)
000ae0 940e 0a25 	CALL _lcd_puts
000ae2 98c3      	CBI  0x18,3
000ae3 e6a4      	LDI  R26,LOW(100)
000ae4 e0b0      	LDI  R27,0
000ae5 940e 0d52 	CALL _delay_ms
000ae7 9ac3      	SBI  0x18,3
000ae8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000ae9 01f4      	MOVW R30,R8
000aea e0ae      	LDI  R26,LOW(_back)
000aeb e0b0      	LDI  R27,HIGH(_back)
000aec 0fee      	LSL  R30
000aed 1fff      	ROL  R31
000aee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000aef 0fae      	ADD  R26,R30
000af0 1fbf      	ADC  R27,R31
000af1 940e 0c3e 	CALL __EEPROMRDW
000af3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
000af4 940e 0bf9 	CALL __CWD1
000af6 940e 0c39 	CALL __PUTPARD1
000af8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xE:
000af9 93aa      	ST   -Y,R26
000afa 81e8      	LD   R30,Y
000afb e0f0      	LDI  R31,0
000afc bdf9      	OUT  0x28+1,R31
000afd bde8      	OUT  0x28,R30
000afe 81e9      	LDD  R30,Y+1
000aff e0f0      	LDI  R31,0
000b00 bdfb      	OUT  0x2A+1,R31
000b01 bdea      	OUT  0x2A,R30
000b02 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000b03 81a8      	LD   R26,Y
000b04 81b9      	LDD  R27,Y+1
000b05 940e 0c67 	CALL __CPW02
000b07 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000b08 81a8      	LD   R26,Y
000b09 81b9      	LDD  R27,Y+1
000b0a 940c 0196 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
000b0c 81e8      	LD   R30,Y
000b0d 81f9      	LDD  R31,Y+1
000b0e 940e 0bf9 	CALL __CWD1
000b10 940e 0cd7 	CALL __CDF1
000b12 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
000b13 940e 0ca0 	CALL __CFD1
000b15 93ed      	ST   X+,R30
000b16 93fc      	ST   X,R31
000b17 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x13:
000b18 91e0 018d 	LDS  R30,_sensor
000b1a 91f0 018e 	LDS  R31,_sensor+1
000b1c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000b1d 91e0 019b 	LDS  R30,_MAX_SPEED
000b1f 91f0 019c 	LDS  R31,_MAX_SPEED+1
000b21 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
000b22 91e0 0199 	LDS  R30,_MIN_SPEED
000b24 91f0 019a 	LDS  R31,_MIN_SPEED+1
000b26 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
000b27 dff0      	RCALL SUBOPT_0x13
000b28 71ec      	ANDI R30,LOW(0x1C)
000b29 31ec      	CPI  R30,LOW(0x1C)
000b2a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x17:
000b2b 81ea      	LDD  R30,Y+2
000b2c 93ea      	ST   -Y,R30
000b2d 81ab      	LDD  R26,Y+3
000b2e 940e 02aa 	CALL _kiri
000b30 940c 01e7 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x18:
000b32 81ea      	LDD  R30,Y+2
000b33 93ea      	ST   -Y,R30
000b34 81ab      	LDD  R26,Y+3
000b35 940e 02a3 	CALL _kanan
000b37 940c 01e7 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
000b39 e2aa      	LDI  R26,LOW(_mapMirror)
000b3a e0b0      	LDI  R27,HIGH(_mapMirror)
000b3b 940e 0c3e 	CALL __EEPROMRDW
000b3d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
000b3e 81ea      	LDD  R30,Y+2
000b3f 81fb      	LDD  R31,Y+2+1
000b40 93fa      	ST   -Y,R31
000b41 93ea      	ST   -Y,R30
000b42 81aa      	LDD  R26,Y+2
000b43 81bb      	LDD  R27,Y+2+1
000b44 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 24 TIMES, CODE SIZE REDUCTION:43 WORDS
                 SUBOPT_0x1B:
000b45 93ea      	ST   -Y,R30
000b46 e0a1      	LDI  R26,LOW(1)
000b47 940c 09d5 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
000b49 93fa      	ST   -Y,R31
000b4a 93ea      	ST   -Y,R30
000b4b eda0      	LDI  R26,LOW(2000)
000b4c e0b7      	LDI  R27,HIGH(2000)
000b4d 940c 03f9 	JMP  _scanX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1D:
000b4f 940e 09e9 	CALL _lcd_clear
000b51 e0e0      	LDI  R30,LOW(0)
000b52 cf53      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1E:
000b53 940e 0a34 	CALL _lcd_putsf
000b55 e0e0      	LDI  R30,LOW(0)
000b56 cfee      	RJMP SUBOPT_0x1B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1F:
000b57 e0e0      	LDI  R30,LOW(0)
000b58 93e0 0184 	STS  _isChildSelect,R30
000b5a e0e0      	LDI  R30,LOW(0)
000b5b e0f0      	LDI  R31,HIGH(0)
000b5c 93fa      	ST   -Y,R31
000b5d 93ea      	ST   -Y,R30
000b5e e0a0      	LDI  R26,LOW(0)
000b5f 940c 04ad 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x20:
000b61 eea8      	LDI  R26,LOW(1000)
000b62 e0b3      	LDI  R27,HIGH(1000)
000b63 940c 0196 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
000b65 940e 0a34 	CALL _lcd_putsf
000b67 eee8      	LDI  R30,LOW(1000)
000b68 e0f3      	LDI  R31,HIGH(1000)
000b69 93fa      	ST   -Y,R31
000b6a 93ea      	ST   -Y,R30
000b6b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x22:
000b6c eea8      	LDI  R26,LOW(1000)
000b6d e0b3      	LDI  R27,HIGH(1000)
000b6e 940e 02b1 	CALL _setMotor
000b70 eda0      	LDI  R26,LOW(2000)
000b71 e0b7      	LDI  R27,HIGH(2000)
000b72 940c 0d52 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
000b74 940e 0a34 	CALL _lcd_putsf
000b76 e1e8      	LDI  R30,LOW(64536)
000b77 effc      	LDI  R31,HIGH(64536)
000b78 93fa      	ST   -Y,R31
000b79 93ea      	ST   -Y,R30
000b7a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x24:
000b7b e1a8      	LDI  R26,LOW(64536)
000b7c efbc      	LDI  R27,HIGH(64536)
000b7d 940e 02b1 	CALL _setMotor
000b7f eda0      	LDI  R26,LOW(2000)
000b80 e0b7      	LDI  R27,HIGH(2000)
000b81 940e 0d52 	CALL _delay_ms
000b83 e0e0      	LDI  R30,LOW(0)
000b84 cfc0      	RJMP SUBOPT_0x1B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x25:
000b85 e0e0      	LDI  R30,LOW(0)
000b86 e0f0      	LDI  R31,HIGH(0)
000b87 93fa      	ST   -Y,R31
000b88 93ea      	ST   -Y,R30
000b89 e0a0      	LDI  R26,LOW(0)
000b8a 940c 04ad 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x26:
000b8c 940e 0a34 	CALL _lcd_putsf
000b8e e0e0      	LDI  R30,LOW(0)
000b8f 93e0 0185 	STS  _isTestTombol,R30
000b91 efa4      	LDI  R26,LOW(500)
000b92 e0b1      	LDI  R27,HIGH(500)
000b93 940c 0196 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x27:
000b95 eca8      	LDI  R26,LOW(200)
000b96 e0b0      	LDI  R27,0
000b97 940c 0196 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x28:
000b99 e2ac      	LDI  R26,LOW(_pointPos)
000b9a e0b0      	LDI  R27,HIGH(_pointPos)
000b9b 940e 0c42 	CALL __EEPROMRDB
000b9d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x29:
000b9e e2ad      	LDI  R26,LOW(_ringPos)
000b9f e0b0      	LDI  R27,HIGH(_ringPos)
000ba0 940e 0c3e 	CALL __EEPROMRDW
000ba2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2A:
000ba3 e2ad      	LDI  R26,LOW(_ringPos)
000ba4 e0b0      	LDI  R27,HIGH(_ringPos)
000ba5 e0e1      	LDI  R30,LOW(1)
000ba6 e0f0      	LDI  R31,HIGH(1)
000ba7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2B:
000ba8 91ed      	LD   R30,X+
000ba9 91fd      	LD   R31,X+
000baa 9631      	ADIW R30,1
000bab 93fe      	ST   -X,R31
000bac 93ee      	ST   -X,R30
000bad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
000bae 91e0 0182 	LDS  R30,_count_btn
000bb0 91f0 0183 	LDS  R31,_count_btn+1
000bb2 93fa      	ST   -Y,R31
000bb3 93ea      	ST   -Y,R30
000bb4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2D:
000bb5 932a      	ST   -Y,R18
000bb6 85ad      	LDD  R26,Y+13
000bb7 85be      	LDD  R27,Y+13+1
000bb8 85ef      	LDD  R30,Y+15
000bb9 89f8      	LDD  R31,Y+15+1
000bba 9509      	ICALL
000bbb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2E:
000bbc 89e8      	LDD  R30,Y+16
000bbd 89f9      	LDD  R31,Y+16+1
000bbe 9734      	SBIW R30,4
000bbf 8be8      	STD  Y+16,R30
000bc0 8bf9      	STD  Y+16+1,R31
000bc1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2F:
000bc2 85ad      	LDD  R26,Y+13
000bc3 85be      	LDD  R27,Y+13+1
000bc4 85ef      	LDD  R30,Y+15
000bc5 89f8      	LDD  R31,Y+15+1
000bc6 9509      	ICALL
000bc7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x30:
000bc8 89a8      	LDD  R26,Y+16
000bc9 89b9      	LDD  R27,Y+16+1
000bca 9614      	ADIW R26,4
000bcb 91ed      	LD   R30,X+
000bcc 91fd      	LD   R31,X+
000bcd 83ee      	STD  Y+6,R30
000bce 83ff      	STD  Y+6+1,R31
000bcf 81ae      	LDD  R26,Y+6
000bd0 81bf      	LDD  R27,Y+6+1
000bd1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x31:
000bd2 940e 0a47 	CALL __long_delay_G103
000bd4 e3a0      	LDI  R26,LOW(48)
000bd5 940c 0a4c 	JMP  __lcd_init_write_G103
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x32:
000bd7 940e 09b4 	CALL __lcd_write_data
000bd9 940c 0a47 	JMP  __long_delay_G103
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000bdb 935a      	ST   -Y,R21
                 __SAVELOCR5:
000bdc 934a      	ST   -Y,R20
                 __SAVELOCR4:
000bdd 933a      	ST   -Y,R19
                 __SAVELOCR3:
000bde 932a      	ST   -Y,R18
                 __SAVELOCR2:
000bdf 931a      	ST   -Y,R17
000be0 930a      	ST   -Y,R16
000be1 9508      	RET
                 
                 __LOADLOCR6:
000be2 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000be3 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000be4 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000be5 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000be6 8119      	LDD  R17,Y+1
000be7 8108      	LD   R16,Y
000be8 9508      	RET
                 
                 __ADDW2R15:
000be9 2400      	CLR  R0
000bea 0daf      	ADD  R26,R15
000beb 1db0      	ADC  R27,R0
000bec 9508      	RET
                 
                 __ANEGW1:
000bed 95f1      	NEG  R31
000bee 95e1      	NEG  R30
000bef 40f0      	SBCI R31,0
000bf0 9508      	RET
                 
                 __ANEGD1:
000bf1 95f0      	COM  R31
000bf2 9560      	COM  R22
000bf3 9570      	COM  R23
000bf4 95e1      	NEG  R30
000bf5 4fff      	SBCI R31,-1
000bf6 4f6f      	SBCI R22,-1
000bf7 4f7f      	SBCI R23,-1
000bf8 9508      	RET
                 
                 __CWD1:
000bf9 2f6f      	MOV  R22,R31
000bfa 0f66      	ADD  R22,R22
000bfb 0b66      	SBC  R22,R22
000bfc 2f76      	MOV  R23,R22
000bfd 9508      	RET
                 
                 __MULW12U:
000bfe 9ffa      	MUL  R31,R26
000bff 2df0      	MOV  R31,R0
000c00 9feb      	MUL  R30,R27
000c01 0df0      	ADD  R31,R0
000c02 9fea      	MUL  R30,R26
000c03 2de0      	MOV  R30,R0
000c04 0df1      	ADD  R31,R1
000c05 9508      	RET
                 
                 __MULW12:
000c06 d01c      	RCALL __CHKSIGNW
000c07 dff6      	RCALL __MULW12U
000c08 f40e      	BRTC __MULW121
000c09 dfe3      	RCALL __ANEGW1
                 __MULW121:
000c0a 9508      	RET
                 
                 __DIVW21U:
000c0b 2400      	CLR  R0
000c0c 2411      	CLR  R1
000c0d e190      	LDI  R25,16
                 __DIVW21U1:
000c0e 0faa      	LSL  R26
000c0f 1fbb      	ROL  R27
000c10 1c00      	ROL  R0
000c11 1c11      	ROL  R1
000c12 1a0e      	SUB  R0,R30
000c13 0a1f      	SBC  R1,R31
000c14 f418      	BRCC __DIVW21U2
000c15 0e0e      	ADD  R0,R30
000c16 1e1f      	ADC  R1,R31
000c17 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000c18 60a1      	SBR  R26,1
                 __DIVW21U3:
000c19 959a      	DEC  R25
000c1a f799      	BRNE __DIVW21U1
000c1b 01fd      	MOVW R30,R26
000c1c 01d0      	MOVW R26,R0
000c1d 9508      	RET
                 
                 __DIVW21:
000c1e d004      	RCALL __CHKSIGNW
000c1f dfeb      	RCALL __DIVW21U
000c20 f40e      	BRTC __DIVW211
000c21 dfcb      	RCALL __ANEGW1
                 __DIVW211:
000c22 9508      	RET
                 
                 __CHKSIGNW:
000c23 94e8      	CLT
000c24 fff7      	SBRS R31,7
000c25 c002      	RJMP __CHKSW1
000c26 dfc6      	RCALL __ANEGW1
000c27 9468      	SET
                 __CHKSW1:
000c28 ffb7      	SBRS R27,7
000c29 c006      	RJMP __CHKSW2
000c2a 95b1      	NEG  R27
000c2b 95a1      	NEG  R26
000c2c 40b0      	SBCI R27,0
000c2d f800      	BLD  R0,0
000c2e 9403      	INC  R0
000c2f fa00      	BST  R0,0
                 __CHKSW2:
000c30 9508      	RET
                 
                 __GETW1P:
000c31 91ed      	LD   R30,X+
000c32 91fc      	LD   R31,X
000c33 9711      	SBIW R26,1
000c34 9508      	RET
                 
                 __GETW1PF:
000c35 9005      	LPM  R0,Z+
000c36 91f4      	LPM  R31,Z
000c37 2de0      	MOV  R30,R0
000c38 9508      	RET
                 
                 __PUTPARD1:
000c39 937a      	ST   -Y,R23
000c3a 936a      	ST   -Y,R22
000c3b 93fa      	ST   -Y,R31
000c3c 93ea      	ST   -Y,R30
000c3d 9508      	RET
                 
                 __EEPROMRDW:
000c3e 9611      	ADIW R26,1
000c3f d002      	RCALL __EEPROMRDB
000c40 2ffe      	MOV  R31,R30
000c41 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000c42 99e1      	SBIC EECR,EEWE
000c43 cffe      	RJMP __EEPROMRDB
000c44 93ff      	PUSH R31
000c45 b7ff      	IN   R31,SREG
000c46 94f8      	CLI
000c47 bbae      	OUT  EEARL,R26
000c48 bbbf      	OUT  EEARH,R27
000c49 9ae0      	SBI  EECR,EERE
000c4a b3ed      	IN   R30,EEDR
000c4b bfff      	OUT  SREG,R31
000c4c 91ff      	POP  R31
000c4d 9508      	RET
                 
                 __EEPROMWRW:
000c4e d007      	RCALL __EEPROMWRB
000c4f 9611      	ADIW R26,1
000c50 93ef      	PUSH R30
000c51 2fef      	MOV  R30,R31
000c52 d003      	RCALL __EEPROMWRB
000c53 91ef      	POP  R30
000c54 9711      	SBIW R26,1
000c55 9508      	RET
                 
                 __EEPROMWRB:
000c56 9be1      	SBIS EECR,EEWE
000c57 c002      	RJMP __EEPROMWRB1
000c58 95a8      	WDR
000c59 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000c5a b79f      	IN   R25,SREG
000c5b 94f8      	CLI
000c5c bbae      	OUT  EEARL,R26
000c5d bbbf      	OUT  EEARH,R27
000c5e 9ae0      	SBI  EECR,EERE
000c5f b38d      	IN   R24,EEDR
000c60 17e8      	CP   R30,R24
000c61 f019      	BREQ __EEPROMWRB0
000c62 bbed      	OUT  EEDR,R30
000c63 9ae2      	SBI  EECR,EEMWE
000c64 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000c65 bf9f      	OUT  SREG,R25
000c66 9508      	RET
                 
                 __CPW02:
000c67 2400      	CLR  R0
000c68 160a      	CP   R0,R26
000c69 060b      	CPC  R0,R27
000c6a 9508      	RET
                 
                 __ANEGF1:
000c6b 9730      	SBIW R30,0
000c6c 4060      	SBCI R22,0
000c6d 4070      	SBCI R23,0
000c6e f009      	BREQ __ANEGF10
000c6f 5870      	SUBI R23,0x80
                 __ANEGF10:
000c70 9508      	RET
                 
                 __ROUND_REPACK:
000c71 2355      	TST  R21
000c72 f442      	BRPL __REPACK
000c73 3850      	CPI  R21,0x80
000c74 f411      	BRNE __ROUND_REPACK0
000c75 ffe0      	SBRS R30,0
000c76 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000c77 9631      	ADIW R30,1
000c78 1f69      	ADC  R22,R25
000c79 1f79      	ADC  R23,R25
000c7a f06b      	BRVS __REPACK1
                 
                 __REPACK:
000c7b e850      	LDI  R21,0x80
000c7c 2757      	EOR  R21,R23
000c7d f411      	BRNE __REPACK0
000c7e 935f      	PUSH R21
000c7f c073      	RJMP __ZERORES
                 __REPACK0:
000c80 3f5f      	CPI  R21,0xFF
000c81 f031      	BREQ __REPACK1
000c82 0f66      	LSL  R22
000c83 0c00      	LSL  R0
000c84 9557      	ROR  R21
000c85 9567      	ROR  R22
000c86 2f75      	MOV  R23,R21
000c87 9508      	RET
                 __REPACK1:
000c88 935f      	PUSH R21
000c89 2000      	TST  R0
000c8a f00a      	BRMI __REPACK2
000c8b c072      	RJMP __MAXRES
                 __REPACK2:
000c8c c06b      	RJMP __MINRES
                 
                 __UNPACK:
000c8d e850      	LDI  R21,0x80
000c8e 2e19      	MOV  R1,R25
000c8f 2215      	AND  R1,R21
000c90 0f88      	LSL  R24
000c91 1f99      	ROL  R25
000c92 2795      	EOR  R25,R21
000c93 0f55      	LSL  R21
000c94 9587      	ROR  R24
                 
                 __UNPACK1:
000c95 e850      	LDI  R21,0x80
000c96 2e07      	MOV  R0,R23
000c97 2205      	AND  R0,R21
000c98 0f66      	LSL  R22
000c99 1f77      	ROL  R23
000c9a 2775      	EOR  R23,R21
000c9b 0f55      	LSL  R21
000c9c 9567      	ROR  R22
000c9d 9508      	RET
                 
                 __CFD1U:
000c9e 9468      	SET
000c9f c001      	RJMP __CFD1U0
                 __CFD1:
000ca0 94e8      	CLT
                 __CFD1U0:
000ca1 935f      	PUSH R21
000ca2 dff2      	RCALL __UNPACK1
000ca3 3870      	CPI  R23,0x80
000ca4 f018      	BRLO __CFD10
000ca5 3f7f      	CPI  R23,0xFF
000ca6 f408      	BRCC __CFD10
000ca7 c04b      	RJMP __ZERORES
                 __CFD10:
000ca8 e156      	LDI  R21,22
000ca9 1b57      	SUB  R21,R23
000caa f4aa      	BRPL __CFD11
000cab 9551      	NEG  R21
000cac 3058      	CPI  R21,8
000cad f40e      	BRTC __CFD19
000cae 3059      	CPI  R21,9
                 __CFD19:
000caf f030      	BRLO __CFD17
000cb0 efef      	SER  R30
000cb1 efff      	SER  R31
000cb2 ef6f      	SER  R22
000cb3 e77f      	LDI  R23,0x7F
000cb4 f977      	BLD  R23,7
000cb5 c01a      	RJMP __CFD15
                 __CFD17:
000cb6 2777      	CLR  R23
000cb7 2355      	TST  R21
000cb8 f0b9      	BREQ __CFD15
                 __CFD18:
000cb9 0fee      	LSL  R30
000cba 1fff      	ROL  R31
000cbb 1f66      	ROL  R22
000cbc 1f77      	ROL  R23
000cbd 955a      	DEC  R21
000cbe f7d1      	BRNE __CFD18
000cbf c010      	RJMP __CFD15
                 __CFD11:
000cc0 2777      	CLR  R23
                 __CFD12:
000cc1 3058      	CPI  R21,8
000cc2 f028      	BRLO __CFD13
000cc3 2fef      	MOV  R30,R31
000cc4 2ff6      	MOV  R31,R22
000cc5 2f67      	MOV  R22,R23
000cc6 5058      	SUBI R21,8
000cc7 cff9      	RJMP __CFD12
                 __CFD13:
000cc8 2355      	TST  R21
000cc9 f031      	BREQ __CFD15
                 __CFD14:
000cca 9576      	LSR  R23
000ccb 9567      	ROR  R22
000ccc 95f7      	ROR  R31
000ccd 95e7      	ROR  R30
000cce 955a      	DEC  R21
000ccf f7d1      	BRNE __CFD14
                 __CFD15:
000cd0 2000      	TST  R0
000cd1 f40a      	BRPL __CFD16
000cd2 df1e      	RCALL __ANEGD1
                 __CFD16:
000cd3 915f      	POP  R21
000cd4 9508      	RET
                 
                 __CDF1U:
000cd5 9468      	SET
000cd6 c001      	RJMP __CDF1U0
                 __CDF1:
000cd7 94e8      	CLT
                 __CDF1U0:
000cd8 9730      	SBIW R30,0
000cd9 4060      	SBCI R22,0
000cda 4070      	SBCI R23,0
000cdb f0b1      	BREQ __CDF10
000cdc 2400      	CLR  R0
000cdd f026      	BRTS __CDF11
000cde 2377      	TST  R23
000cdf f412      	BRPL __CDF11
000ce0 9400      	COM  R0
000ce1 df0f      	RCALL __ANEGD1
                 __CDF11:
000ce2 2e17      	MOV  R1,R23
000ce3 e17e      	LDI  R23,30
000ce4 2011      	TST  R1
                 __CDF12:
000ce5 f032      	BRMI __CDF13
000ce6 957a      	DEC  R23
000ce7 0fee      	LSL  R30
000ce8 1fff      	ROL  R31
000ce9 1f66      	ROL  R22
000cea 1c11      	ROL  R1
000ceb cff9      	RJMP __CDF12
                 __CDF13:
000cec 2fef      	MOV  R30,R31
000ced 2ff6      	MOV  R31,R22
000cee 2d61      	MOV  R22,R1
000cef 935f      	PUSH R21
000cf0 df8a      	RCALL __REPACK
000cf1 915f      	POP  R21
                 __CDF10:
000cf2 9508      	RET
                 
                 __ZERORES:
000cf3 27ee      	CLR  R30
000cf4 27ff      	CLR  R31
000cf5 01bf      	MOVW R22,R30
000cf6 915f      	POP  R21
000cf7 9508      	RET
                 
                 __MINRES:
000cf8 efef      	SER  R30
000cf9 efff      	SER  R31
000cfa e76f      	LDI  R22,0x7F
000cfb ef7f      	SER  R23
000cfc 915f      	POP  R21
000cfd 9508      	RET
                 
                 __MAXRES:
000cfe efef      	SER  R30
000cff efff      	SER  R31
000d00 e76f      	LDI  R22,0x7F
000d01 e77f      	LDI  R23,0x7F
000d02 915f      	POP  R21
000d03 9508      	RET
                 
                 __MULF12:
000d04 935f      	PUSH R21
000d05 df87      	RCALL __UNPACK
000d06 3870      	CPI  R23,0x80
000d07 f359      	BREQ __ZERORES
000d08 3890      	CPI  R25,0x80
000d09 f349      	BREQ __ZERORES
000d0a 2401      	EOR  R0,R1
000d0b 9408      	SEC
000d0c 1f79      	ADC  R23,R25
000d0d f423      	BRVC __MULF124
000d0e f324      	BRLT __ZERORES
                 __MULF125:
000d0f 2000      	TST  R0
000d10 f33a      	BRMI __MINRES
000d11 cfec      	RJMP __MAXRES
                 __MULF124:
000d12 920f      	PUSH R0
000d13 931f      	PUSH R17
000d14 932f      	PUSH R18
000d15 933f      	PUSH R19
000d16 934f      	PUSH R20
000d17 2711      	CLR  R17
000d18 2722      	CLR  R18
000d19 2799      	CLR  R25
000d1a 9f68      	MUL  R22,R24
000d1b 01a0      	MOVW R20,R0
000d1c 9f8f      	MUL  R24,R31
000d1d 2d30      	MOV  R19,R0
000d1e 0d41      	ADD  R20,R1
000d1f 1f59      	ADC  R21,R25
000d20 9f6b      	MUL  R22,R27
000d21 0d30      	ADD  R19,R0
000d22 1d41      	ADC  R20,R1
000d23 1f59      	ADC  R21,R25
000d24 9f8e      	MUL  R24,R30
000d25 d027      	RCALL __MULF126
000d26 9fbf      	MUL  R27,R31
000d27 d025      	RCALL __MULF126
000d28 9f6a      	MUL  R22,R26
000d29 d023      	RCALL __MULF126
000d2a 9fbe      	MUL  R27,R30
000d2b d01d      	RCALL __MULF127
000d2c 9faf      	MUL  R26,R31
000d2d d01b      	RCALL __MULF127
000d2e 9fae      	MUL  R26,R30
000d2f 0d11      	ADD  R17,R1
000d30 1f29      	ADC  R18,R25
000d31 1f39      	ADC  R19,R25
000d32 1f49      	ADC  R20,R25
000d33 1f59      	ADC  R21,R25
000d34 2fe3      	MOV  R30,R19
000d35 2ff4      	MOV  R31,R20
000d36 2f65      	MOV  R22,R21
000d37 2f52      	MOV  R21,R18
000d38 914f      	POP  R20
000d39 913f      	POP  R19
000d3a 912f      	POP  R18
000d3b 911f      	POP  R17
000d3c 900f      	POP  R0
000d3d 2366      	TST  R22
000d3e f02a      	BRMI __MULF122
000d3f 0f55      	LSL  R21
000d40 1fee      	ROL  R30
000d41 1fff      	ROL  R31
000d42 1f66      	ROL  R22
000d43 c002      	RJMP __MULF123
                 __MULF122:
000d44 9573      	INC  R23
000d45 f24b      	BRVS __MULF125
                 __MULF123:
000d46 df2a      	RCALL __ROUND_REPACK
000d47 915f      	POP  R21
000d48 9508      	RET
                 
                 __MULF127:
000d49 0d10      	ADD  R17,R0
000d4a 1d21      	ADC  R18,R1
000d4b 1f39      	ADC  R19,R25
000d4c c002      	RJMP __MULF128
                 __MULF126:
000d4d 0d20      	ADD  R18,R0
000d4e 1d31      	ADC  R19,R1
                 __MULF128:
000d4f 1f49      	ADC  R20,R25
000d50 1f59      	ADC  R21,R25
000d51 9508      	RET
                 
                 _delay_ms:
000d52 9610      	adiw r26,0
000d53 f039      	breq __delay_ms1
                 __delay_ms0:
000d54 95a8      	wdr
                +
000d55 ec8d     +LDI R24 , LOW ( 0xACD )
000d56 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000d57 9701     +SBIW R24 , 1
000d58 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
000d59 9711      	sbiw r26,1
000d5a f7c9      	brne __delay_ms0
                 __delay_ms1:
000d5b 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  50 r1 :  18 r2 :   0 r3 :   0 r4 :   4 r5 :   2 r6 :   2 r7 :   1 
r8 :  25 r9 :   7 r10:   0 r11:   0 r12:   6 r13:   7 r14:   0 r15:   4 
r16:  36 r17:  32 r18:  38 r19:  17 r20:  23 r21:  66 r22:  48 r23:  37 
r24:  26 r25:  27 r26: 360 r27: 189 r28:  25 r29:   1 r30: 621 r31: 235 
x  :  32 y  : 319 z  :  16 
Registers used: 30 out of 35 (85.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  30 add   :  25 
adiw  :  45 and   :   2 andi  :  14 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  52 
brge  :  14 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  13 
brlt  :   5 brmi  :   5 brne  :  74 brpl  :   6 brsh  :   2 brtc  :   3 
brts  :   2 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  : 323 
cbi   :  31 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  36 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   6 
cp    :  16 cpc   :  34 cpi   : 101 cpse  :   0 dec   :   6 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  15 inc   :   2 jmp   :  41 ld    :  62 ldd   : 120 ldi   : 440 
lds   :  70 lpm   :  16 lsl   :  15 lsr   :   1 mov   :  54 movw  :  55 
mul   :  16 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   2 
ori   :   9 out   :  67 pop   :  20 push  :  19 rcall :  83 ret   :  95 
reti  :   2 rjmp  : 171 rol   :  19 ror   :   7 sbc   :   5 sbci  :  10 
sbi   :  32 sbic  :  10 sbis  :   2 sbiw  :  38 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 129 std   :  43 sts   :  34 sub   :   5 subi  :  21 swap  :   2 
tst   :  13 wdr   :   2 
Instructions used: 78 out of 116 (67.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001ab8   6230    610   6840   16384  41.7%
[.dseg] 0x000060 0x0001b8      0     88     88    1024   8.6%
[.eseg] 0x000000 0x00002f      0     47     47     512   9.2%

Assembly complete, 0 errors, 22 warnings
