
AVRASM ver. 2.1.30  d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm Wed Oct 30 10:39:05 2024

d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1083): warning: Register r4 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1084): warning: Register r5 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1085): warning: Register r6 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1086): warning: Register r7 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1087): warning: Register r8 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1088): warning: Register r9 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1089): warning: Register r10 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1090): warning: Register r11 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1091): warning: Register r13 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1092): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 11.059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hitung=R4
                 	.DEF _hitung_msb=R5
                 	.DEF _nadc7=R6
                 	.DEF _nadc7_msb=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _k=R10
                 	.DEF _k_msb=R11
                 	.DEF _pos_servo1=R13
                 	.DEF _pos_servo2=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 015b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 07e4 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0802 	JMP  _timer0_comp_isr
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x6:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1134): warning: .cseg .db misalignment - padding zero byte
000035 000a      	.DB  0xA
                 _0x7:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1136): warning: .cseg .db misalignment - padding zero byte
000036 0064      	.DB  0x64
                 _0x8:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1138): warning: .cseg .db misalignment - padding zero byte
000037 00c8      	.DB  0xC8
                 _0x9:
000038 ff60      	.DB  0x60,0xFF
                 _0xA:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1142): warning: .cseg .db misalignment - padding zero byte
000039 00c8      	.DB  0xC8
                 _0xB:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1144): warning: .cseg .db misalignment - padding zero byte
00003a 00dc      	.DB  0xDC
                 _0xC:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1146): warning: .cseg .db misalignment - padding zero byte
00003b 0050      	.DB  0x50
                 _0xD:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1148): warning: .cseg .db misalignment - padding zero byte
00003c 00a5      	.DB  0xA5
                 _0xE:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1150): warning: .cseg .db misalignment - padding zero byte
00003d 00aa      	.DB  0xAA
                 _0xF:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1152): warning: .cseg .db misalignment - padding zero byte
00003e 0005      	.DB  0x5
                 _0x10:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1154): warning: .cseg .db misalignment - padding zero byte
00003f 0055      	.DB  0x55
                 _0x0:
000040 6425
000041 6425
000042 6425
000043 6425      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x25,0x64
000044 6425
000045 6425
000046 6425
000047 4200      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x0,0x42
000048 6361
000049 2061
00004a 694c
00004b 656e      	.DB  0x61,0x63,0x61,0x20,0x4C,0x69,0x6E,0x65
00004c 7300
00004d 6e65
00004e 6f73
00004f 3a72      	.DB  0x0,0x73,0x65,0x6E,0x73,0x6F,0x72,0x3A
000050 6425
000051 3d20
000052 2520
000053 2064      	.DB  0x25,0x64,0x20,0x3D,0x20,0x25,0x64,0x20
000054 0020
000055 6142
000056 6163
000057 4220      	.DB  0x20,0x0,0x42,0x61,0x63,0x61,0x20,0x42
000058 6361
000059 676b
00005a 6f72
00005b 6e75      	.DB  0x61,0x63,0x6B,0x67,0x72,0x6F,0x75,0x6E
00005c 0064
00005d 6543
00005e 746e
00005f 7265      	.DB  0x64,0x0,0x43,0x65,0x6E,0x74,0x65,0x72
000060 5020
000061 696f
000062 746e
000063 2020      	.DB  0x20,0x50,0x6F,0x69,0x6E,0x74,0x20,0x20
000064 2020
000065 7300
000066 6e65
000067 6f73      	.DB  0x20,0x20,0x0,0x73,0x65,0x6E,0x73,0x6F
000068 3a72
000069 6425
00006a 2d20
00006b 3e2d      	.DB  0x72,0x3A,0x25,0x64,0x20,0x2D,0x2D,0x3E
00006c 2520
00006d 2064
00006e 0020
00006f 6425      	.DB  0x20,0x25,0x64,0x20,0x20,0x0,0x25,0x64
000070 2020
000071 0020
000072 654d
000073 756e      	.DB  0x20,0x20,0x20,0x0,0x4D,0x65,0x6E,0x75
000074 4b00
000075 6c61
000076 6269
000077 6172      	.DB  0x0,0x4B,0x61,0x6C,0x69,0x62,0x72,0x61
000078 6973
000079 5200
00007a 6e75
00007b 4220      	.DB  0x73,0x69,0x0,0x52,0x75,0x6E,0x20,0x42
00007c 746f
00007d 5300
00007e 6e65
00007f 2073      	.DB  0x6F,0x74,0x0,0x53,0x65,0x6E,0x73,0x20
000080 6157
000081 6e72
000082 0061
000083 614d      	.DB  0x57,0x61,0x72,0x6E,0x61,0x0,0x4D,0x61
000084 2070
000085 6942
000086 7572
000087 4d00      	.DB  0x70,0x20,0x42,0x69,0x72,0x75,0x0,0x4D
000088 7061
000089 4d20
00008a 7265
00008b 6861      	.DB  0x61,0x70,0x20,0x4D,0x65,0x72,0x61,0x68
00008c 4d00
00008d 746f
00008e 726f
00008f 4200      	.DB  0x0,0x4D,0x6F,0x74,0x6F,0x72,0x0,0x42
000090 7475
000091 6f74
000092 006e
000093 6143      	.DB  0x75,0x74,0x74,0x6F,0x6E,0x0,0x43,0x61
000094 6970
000095 0074
000096 6c43
000097 6369      	.DB  0x70,0x69,0x74,0x0,0x43,0x6C,0x69,0x63
000098 206b
000099 2032
00009a 6f74
00009b 7320      	.DB  0x6B,0x20,0x32,0x20,0x74,0x6F,0x20,0x73
00009c 6174
00009d 7472
00009e 5200
00009f 6e75      	.DB  0x74,0x61,0x72,0x74,0x0,0x52,0x75,0x6E
0000a0 696e
0000a1 676e
0000a2 2e2e
0000a3 002e      	.DB  0x6E,0x69,0x6E,0x67,0x2E,0x2E,0x2E,0x0
0000a4 6554
0000a5 7473
0000a6 4d20
0000a7 746f      	.DB  0x54,0x65,0x73,0x74,0x20,0x4D,0x6F,0x74
0000a8 726f
0000a9 2b00
0000aa 3031
0000ab 3030      	.DB  0x6F,0x72,0x0,0x2B,0x31,0x30,0x30,0x30
0000ac 2b20
0000ad 3031
0000ae 3030
0000af 2d00      	.DB  0x20,0x2B,0x31,0x30,0x30,0x30,0x0,0x2D
0000b0 3031
0000b1 3030
0000b2 2d20
0000b3 3031      	.DB  0x31,0x30,0x30,0x30,0x20,0x2D,0x31,0x30
0000b4 3030
0000b5 2b00
0000b6 3031
0000b7 3030      	.DB  0x30,0x30,0x0,0x2B,0x31,0x30,0x30,0x30
0000b8 2d20
0000b9 3031
0000ba 3030
0000bb 2d00      	.DB  0x20,0x2D,0x31,0x30,0x30,0x30,0x0,0x2D
0000bc 3031
0000bd 3030
0000be 2b20
0000bf 3031      	.DB  0x31,0x30,0x30,0x30,0x20,0x2B,0x31,0x30
0000c0 3030
0000c1 4300
0000c2 696c
0000c3 6b63      	.DB  0x30,0x30,0x0,0x43,0x6C,0x69,0x63,0x6B
0000c4 3120
0000c5 7420
0000c6 206f
0000c7 7865      	.DB  0x20,0x31,0x20,0x74,0x6F,0x20,0x65,0x78
0000c8 7469
0000c9 7400
0000ca 6d6f
0000cb 6f62      	.DB  0x69,0x74,0x0,0x74,0x6F,0x6D,0x62,0x6F
0000cc 206c
0000cd 203d
0000ce 2031
0000cf 2020      	.DB  0x6C,0x20,0x3D,0x20,0x31,0x20,0x20,0x20
0000d0 2020
0000d1 7400
0000d2 6d6f
0000d3 6f62      	.DB  0x20,0x20,0x0,0x74,0x6F,0x6D,0x62,0x6F
0000d4 206c
0000d5 203d
0000d6 2032
0000d7 2020      	.DB  0x6C,0x20,0x3D,0x20,0x32,0x20,0x20,0x20
0000d8 2020
0000d9 7400
0000da 6d6f
0000db 6f62      	.DB  0x20,0x20,0x0,0x74,0x6F,0x6D,0x62,0x6F
0000dc 206c
0000dd 203d
0000de 2033
0000df 2020      	.DB  0x6C,0x20,0x3D,0x20,0x33,0x20,0x20,0x20
0000e0 2020
0000e1 7400
0000e2 6d6f
0000e3 6f62      	.DB  0x20,0x20,0x0,0x74,0x6F,0x6D,0x62,0x6F
0000e4 206c
0000e5 203d
0000e6 2034
0000e7 2020      	.DB  0x6C,0x20,0x3D,0x20,0x34,0x20,0x20,0x20
0000e8 2020
0000e9 5700
0000ea 7261
0000eb 616e      	.DB  0x20,0x20,0x0,0x57,0x61,0x72,0x6E,0x61
0000ec 003a
0000ed 7845
0000ee 7469
0000ef 6e69      	.DB  0x3A,0x0,0x45,0x78,0x69,0x74,0x69,0x6E
0000f0 2e67
0000f1 2e2e
0000f2 5400
0000f3 7365      	.DB  0x67,0x2E,0x2E,0x2E,0x0,0x54,0x65,0x73
0000f4 2074
0000f5 6143
0000f6 6970
0000f7 0074      	.DB  0x74,0x20,0x43,0x61,0x70,0x69,0x74,0x0
0000f8 6143
0000f9 6970
0000fa 3a74
0000fb 3e20      	.DB  0x43,0x61,0x70,0x69,0x74,0x3A,0x20,0x3E
0000fc 3c20
0000fd 4300
0000fe 7061
0000ff 7469      	.DB  0x20,0x3C,0x0,0x43,0x61,0x70,0x69,0x74
000100 203a
000101 203c
000102 003e
000103 6143      	.DB  0x3A,0x20,0x3C,0x20,0x3E,0x0,0x43,0x61
000104 6970
000105 3a74
000106 5c20
000107 002f      	.DB  0x70,0x69,0x74,0x3A,0x20,0x5C,0x2F,0x0
000108 6143
000109 6970
00010a 3a74
00010b 2f20      	.DB  0x43,0x61,0x70,0x69,0x74,0x3A,0x20,0x2F
00010c 005c
00010d 6f48
00010e 646c
00010f 3120      	.DB  0x5C,0x0,0x48,0x6F,0x6C,0x64,0x20,0x31
000110 7420
000111 206f
000112 7865
000113 7469      	.DB  0x20,0x74,0x6F,0x20,0x65,0x78,0x69,0x74
000114 5800
000115 0044
000116 6325
000117 6425      	.DB  0x0,0x58,0x44,0x0,0x25,0x63,0x25,0x64
000118 2000
000119 2020
00011a 2020
00011b 454c      	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x4C,0x45
00011c 4947
00011d 4e4f
00011e 2020
00011f 2020      	.DB  0x47,0x49,0x4F,0x4E,0x20,0x20,0x20,0x20
000120 0020
000121 4d20
000122 4e41
000123 3420      	.DB  0x20,0x0,0x20,0x4D,0x41,0x4E,0x20,0x34
000124 4a20
000125 4d4f
000126 4142
000127 474e      	.DB  0x20,0x4A,0x4F,0x4D,0x42,0x41,0x4E,0x47
000128 0020      	.DB  0x20,0x0
                 _0x2040060:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1216): warning: .cseg .db misalignment - padding zero byte
000129 0001      	.DB  0x1
                 _0x2040000:
00012a 4e2d
00012b 4e41
00012c 4900
00012d 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1219): warning: .cseg .db misalignment - padding zero byte
00012e 0000      	.DB  0x0
                 _0x2060003:
00012f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000130 0004      	.DW  0x04
000131 0004      	.DW  0x04
000132 0066      	.DW  __REG_VARS*2
                 
000133 0001      	.DW  0x01
000134 0193      	.DW  _kp
000135 006a      	.DW  _0x6*2
                 
000136 0001      	.DW  0x01
000137 0195      	.DW  _kd
000138 006c      	.DW  _0x7*2
                 
000139 0001      	.DW  0x01
00013a 0197      	.DW  _SPEED
00013b 006e      	.DW  _0x8*2
                 
00013c 0002      	.DW  0x02
00013d 0199      	.DW  _MIN_SPEED
00013e 0070      	.DW  _0x9*2
                 
00013f 0001      	.DW  0x01
000140 019b      	.DW  _MAX_SPEED
000141 0072      	.DW  _0xA*2
                 
000142 0001      	.DW  0x01
000143 01a1      	.DW  _maxHijau
000144 0074      	.DW  _0xB*2
                 
000145 0001      	.DW  0x01
000146 01a3      	.DW  _maxKuning
000147 0076      	.DW  _0xC*2
                 
000148 0001      	.DW  0x01
000149 01a5      	.DW  _maxMerah
00014a 0078      	.DW  _0xD*2
                 
00014b 0001      	.DW  0x01
00014c 01a7      	.DW  _minHijau
00014d 007a      	.DW  _0xE*2
                 
00014e 0001      	.DW  0x01
00014f 01a9      	.DW  _minKuning
000150 007c      	.DW  _0xF*2
                 
000151 0001      	.DW  0x01
000152 01ab      	.DW  _minMerah
000153 007e      	.DW  _0x10*2
                 
000154 0001      	.DW  0x01
000155 01af      	.DW  __seed_G102
000156 0252      	.DW  _0x2040060*2
                 
000157 0002      	.DW  0x02
000158 01b3      	.DW  __base_y_G103
000159 025e      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
00015a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00015b 94f8      	CLI
00015c 27ee      	CLR  R30
00015d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00015e e0f1      	LDI  R31,1
00015f bffb      	OUT  GICR,R31
000160 bfeb      	OUT  GICR,R30
000161 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000162 e1f8      	LDI  R31,0x18
000163 bdf1      	OUT  WDTCR,R31
000164 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000165 e08d      	LDI  R24,(14-2)+1
000166 e0a2      	LDI  R26,2
000167 27bb      	CLR  R27
                 __CLEAR_REG:
000168 93ed      	ST   X+,R30
000169 958a      	DEC  R24
00016a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00016b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00016c e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00016d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00016e 93ed      	ST   X+,R30
00016f 9701      	SBIW R24,1
000170 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000171 e6e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000172 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000173 9185      	LPM  R24,Z+
000174 9195      	LPM  R25,Z+
000175 9700      	SBIW R24,0
000176 f061      	BREQ __GLOBAL_INI_END
000177 91a5      	LPM  R26,Z+
000178 91b5      	LPM  R27,Z+
000179 9005      	LPM  R0,Z+
00017a 9015      	LPM  R1,Z+
00017b 01bf      	MOVW R22,R30
00017c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00017d 9005      	LPM  R0,Z+
00017e 920d      	ST   X+,R0
00017f 9701      	SBIW R24,1
000180 f7e1      	BRNE __GLOBAL_INI_LOOP
000181 01fb      	MOVW R30,R22
000182 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000183 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000184 bfed      	OUT  SPL,R30
000185 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000186 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000187 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000188 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000189 940c 0803 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                    .equ __lcd_port=0x18 ;PORTB
                 ; 0000 0029 #endasm
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0030 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0031 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
00018b 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00018c 81e8      	LD   R30,Y
00018d 66e0      	ORI  R30,LOW(0x60)
00018e b9e7      	OUT  0x7,R30
                 ; 0000 0032 // Start the AD conversion
                 ; 0000 0033 ADCSRA|=0x40;
00018f 9a36      	SBI  0x6,6
                 ; 0000 0034 // Wait for the AD conversion to complete
                 ; 0000 0035 while ((ADCSRA & 0x10)==0);
                 _0x3:
000190 9b34      	SBIS 0x6,4
000191 cffe      	RJMP _0x3
                 ; 0000 0036 ADCSRA|=0x10;
000192 9a34      	SBI  0x6,4
                 ; 0000 0037 return ADCH;
000193 b1e5      	IN   R30,0x5
000194 9621      	ADIW R28,1
000195 9508      	RET
                 ; 0000 0038 }
                 ; .FEND
                 ;int hitung = 0;
                 ;unsigned int nadc7 = 0;
                 ;char buff[33];
                 ;int i, k;
                 ;unsigned char pos_servo1, pos_servo2, a;
                 ;int count_btn = 0;
                 ;int count_child_btn = 0;
                 ;bool isChildSelect = false;
                 ;bool isTestTombol = false;
                 ;eeprom int garis[7], back[7], tengah[7];
                 ;char sen[7];
                 ;int sensor;
                 ;int error = 0;
                 ;int lastError = 0;
                 ;int kp = 10;
                 
                 	.DSEG
                 ;int kd = 100;
                 ;int SPEED = 200;
                 ;int MIN_SPEED = -160;
                 ;int MAX_SPEED = 200;
                 ;int count = 0;
                 ;int second = 0;
                 ;int positionD = 0;
                 ;eeprom int mapMirror; // 0 - map/lintasan bagian biru, 1 - map/lintasan bagian m ...
                 ;eeprom char pointPos;
                 ;eeprom int ringPos;
                 ;int maxHijau = 220;
                 ;int maxKuning = 80;
                 ;int maxMerah = 165;
                 ;int minHijau = 170;
                 ;int minKuning = 5;
                 ;int minMerah = 85;
                 ;void delay(int ms)
                 ; 0000 0059 {
                 
                 	.CSEG
                 _delay:
                 ; .FSTART _delay
                 ;delay_ms(ms);
000196 93ba      	ST   -Y,R27
000197 93aa      	ST   -Y,R26
                 ;	ms -> Y+0
000198 81a8      	LD   R26,Y
000199 81b9      	LDD  R27,Y+1
00019a 940e 0ee2 	CALL _delay_ms
00019c c30c      	RJMP _0x20C000A
                 ; .FEND
                 ;void lcd_kedip(int ulangi)
                 ;for(i = 0; i < ulangi; i++)
                 ;	ulangi -> Y+0
                 ;lampu=0;
                 ;delay_ms(100);
                 ;lampu=1;
                 ;delay_ms(100);
                 ;void konvert_logic()
                 ; 0000 005A {
                 _konvert_logic:
                 ; .FSTART _konvert_logic
                 ;for(i = 0; i < 7; i++)
00019d 2488      	CLR  R8
00019e 2499      	CLR  R9
                 _0x19:
00019f 940e 0bda 	CALL SUBOPT_0x0
0001a1 f4d4      	BRGE _0x1A
                 ;if(read_adc(i) > tengah[i]) {
0001a2 940e 0bdf 	CALL SUBOPT_0x1
0001a4 17ea      	CP   R30,R26
0001a5 07fb      	CPC  R31,R27
0001a6 f434      	BRGE _0x1B
                 ;sen[i]=1;
0001a7 e8a6      	LDI  R26,LOW(_sen)
0001a8 e0b1      	LDI  R27,HIGH(_sen)
0001a9 0da8      	ADD  R26,R8
0001aa 1db9      	ADC  R27,R9
0001ab e0e1      	LDI  R30,LOW(1)
0001ac c00a      	RJMP _0x191
                 ;else if(read_adc(i) < tengah[i]) {
                 _0x1B:
0001ad 940e 0bdf 	CALL SUBOPT_0x1
0001af 17ae      	CP   R26,R30
0001b0 07bf      	CPC  R27,R31
0001b1 f434      	BRGE _0x1D
                 ;sen[i]=0;
0001b2 e8a6      	LDI  R26,LOW(_sen)
0001b3 e0b1      	LDI  R27,HIGH(_sen)
0001b4 0da8      	ADD  R26,R8
0001b5 1db9      	ADC  R27,R9
0001b6 e0e0      	LDI  R30,LOW(0)
                 _0x191:
0001b7 93ec      	ST   X,R30
                 _0x1D:
0001b8 01f4      	MOVW R30,R8
0001b9 9631      	ADIW R30,1
0001ba 014f      	MOVW R8,R30
0001bb cfe3      	RJMP _0x19
                 _0x1A:
0001bc 9508      	RET
                 ; .FEND
                 ;void logika()
                 _logika:
                 ; .FSTART _logika
                 ;sensor = (sen[6] * 64) + (sen[5] * 32) + (sen[4] * 16) + (sen[3] * 8) + (sen[2]  ...
                +
0001bd 91a0 018c+LDS R26 , _sen + ( 6 )
                 	__GETB2MN _sen,6
0001bf e4e0      	LDI  R30,LOW(64)
0001c0 9fea      	MUL  R30,R26
0001c1 01b0      	MOVW R22,R0
                +
0001c2 91a0 018b+LDS R26 , _sen + ( 5 )
                 	__GETB2MN _sen,5
0001c4 e2e0      	LDI  R30,LOW(32)
0001c5 940e 0bef 	CALL SUBOPT_0x2
                +
0001c7 91a0 018a+LDS R26 , _sen + ( 4 )
                 	__GETB2MN _sen,4
0001c9 e1e0      	LDI  R30,LOW(16)
0001ca 940e 0bef 	CALL SUBOPT_0x2
                +
0001cc 91a0 0189+LDS R26 , _sen + ( 3 )
                 	__GETB2MN _sen,3
0001ce e0e8      	LDI  R30,LOW(8)
0001cf 940e 0bef 	CALL SUBOPT_0x2
                +
0001d1 91a0 0188+LDS R26 , _sen + ( 2 )
                 	__GETB2MN _sen,2
0001d3 e0e4      	LDI  R30,LOW(4)
0001d4 940e 0bef 	CALL SUBOPT_0x2
                +
0001d6 91a0 0187+LDS R26 , _sen + ( 1 )
                 	__GETB2MN _sen,1
0001d8 e0e2      	LDI  R30,LOW(2)
0001d9 940e 0bef 	CALL SUBOPT_0x2
0001db 91a0 0186 	LDS  R26,_sen
0001dd e0e1      	LDI  R30,LOW(1)
0001de 9fea      	MUL  R30,R26
0001df 01f0      	MOVW R30,R0
0001e0 0fe6      	ADD  R30,R22
0001e1 1ff7      	ADC  R31,R23
0001e2 93e0 018d 	STS  _sensor,R30
0001e4 93f0 018e 	STS  _sensor+1,R31
0001e6 9508      	RET
                 ; .FEND
                 ;void cek_sensor()
                 _cek_sensor:
                 ; .FSTART _cek_sensor
                 ;konvert_logic();
0001e7 dfb5      	RCALL _konvert_logic
                 ;logika();
0001e8 dfd4      	RCALL _logika
0001e9 9508      	RET
                 ; .FEND
                 ;void display_sensor()
                 _display_sensor:
                 ; .FSTART _display_sensor
                 ;konvert_logic();
0001ea dfb2      	RCALL _konvert_logic
                 ;lcd_gotoxy(9, 0);
0001eb e0e9      	LDI  R30,LOW(9)
0001ec 940e 0bf4 	CALL SUBOPT_0x3
                 ;sprintf(buff, "%d%d%d%d%d%d%d", sen[0] , sen[1] , sen[2], sen[3], sen[4], sen[5] ...
0001ee 940e 0bf8 	CALL SUBOPT_0x4
                +
0001f0 e8e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001f1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001f2 93fa      	ST   -Y,R31
0001f3 93ea      	ST   -Y,R30
0001f4 91e0 0186 	LDS  R30,_sen
0001f6 940e 0bfd 	CALL SUBOPT_0x5
                +
0001f8 91e0 0187+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
0001fa 940e 0bfd 	CALL SUBOPT_0x5
                +
0001fc 91e0 0188+LDS R30 , _sen + ( 2 )
                 	__GETB1MN _sen,2
0001fe 940e 0bfd 	CALL SUBOPT_0x5
                +
000200 91e0 0189+LDS R30 , _sen + ( 3 )
                 	__GETB1MN _sen,3
000202 940e 0bfd 	CALL SUBOPT_0x5
                +
000204 91e0 018a+LDS R30 , _sen + ( 4 )
                 	__GETB1MN _sen,4
000206 940e 0bfd 	CALL SUBOPT_0x5
                +
000208 91e0 018b+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
00020a 940e 0bfd 	CALL SUBOPT_0x5
                +
00020c 91e0 018c+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
00020e 940e 0bfd 	CALL SUBOPT_0x5
000210 e18c      	LDI  R24,28
000211 940e 0a84 	CALL _sprintf
000213 96a0      	ADIW R28,32
                 ;lcd_puts(buff);
000214 940e 0c03 	CALL SUBOPT_0x6
000216 9508      	RET
                 ; .FEND
                 ;void scan_garis()
                 _scan_garis:
                 ; .FSTART _scan_garis
                 ;for (i = 0; i < 7; i++)
000217 2488      	CLR  R8
000218 2499      	CLR  R9
                 _0x1F:
000219 940e 0bda 	CALL SUBOPT_0x0
00021b f4e4      	BRGE _0x20
                 ;garis[i] = read_adc(i);
00021c 940e 0c07 	CALL SUBOPT_0x7
00021e 0fea      	ADD  R30,R26
00021f 1ffb      	ADC  R31,R27
000220 93ff      	PUSH R31
000221 93ef      	PUSH R30
000222 2da8      	MOV  R26,R8
000223 df67      	RCALL _read_adc
000224 91af      	POP  R26
000225 91bf      	POP  R27
000226 940e 0c0d 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Line");
                +
000228 e8af     +LDI R26 , LOW ( 2 * _0x0 + ( 15 ) )
000229 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW2FN _0x0,15
00022a 940e 0c12 	CALL SUBOPT_0x9
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, garis[i]);
00022c 940e 0c1a 	CALL SUBOPT_0xA
00022e 940e 0c07 	CALL SUBOPT_0x7
000230 940e 0c24 	CALL SUBOPT_0xB
                 ;lcd_puts(buff);
                 ;lampu = 0;
000232 940e 0c31 	CALL SUBOPT_0xC
                 ;delay_ms(100);
                 ;lampu = 1;
000234 01f4      	MOVW R30,R8
000235 9631      	ADIW R30,1
000236 014f      	MOVW R8,R30
000237 cfe1      	RJMP _0x1F
                 _0x20:
000238 9508      	RET
                 ; .FEND
                 ;void scan_back()
                 _scan_back:
                 ; .FSTART _scan_back
                 ;for (i = 0; i < 7; i++)
000239 2488      	CLR  R8
00023a 2499      	CLR  R9
                 _0x26:
00023b 940e 0bda 	CALL SUBOPT_0x0
00023d f4e4      	BRGE _0x27
                 ;back[i] = read_adc(i);
00023e 940e 0c38 	CALL SUBOPT_0xD
000240 0fea      	ADD  R30,R26
000241 1ffb      	ADC  R31,R27
000242 93ff      	PUSH R31
000243 93ef      	PUSH R30
000244 2da8      	MOV  R26,R8
000245 df45      	RCALL _read_adc
000246 91af      	POP  R26
000247 91bf      	POP  R27
000248 940e 0c0d 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Background");
                +
00024a eaaa     +LDI R26 , LOW ( 2 * _0x0 + ( 42 ) )
00024b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 42 ) )
                 	__POINTW2FN _0x0,42
00024c 940e 0c12 	CALL SUBOPT_0x9
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, back[i]);
00024e 940e 0c1a 	CALL SUBOPT_0xA
000250 940e 0c38 	CALL SUBOPT_0xD
000252 940e 0c24 	CALL SUBOPT_0xB
                 ;lcd_puts(buff);
                 ;lampu = 0;
000254 940e 0c31 	CALL SUBOPT_0xC
                 ;delay_ms(100);
                 ;lampu = 1;
000256 01f4      	MOVW R30,R8
000257 9631      	ADIW R30,1
000258 014f      	MOVW R8,R30
000259 cfe1      	RJMP _0x26
                 _0x27:
00025a 9508      	RET
                 ; .FEND
                 ;void hit_tengah()
                 _hit_tengah:
                 ; .FSTART _hit_tengah
                 ;for (i = 0; i < 7; i++)
00025b 2488      	CLR  R8
00025c 2499      	CLR  R9
                 _0x2D:
00025d 940e 0bda 	CALL SUBOPT_0x0
00025f f5d4      	BRGE _0x2E
                 ;tengah[i] = (back[i] + garis[i]) / 2;
000260 01f4      	MOVW R30,R8
000261 e1ac      	LDI  R26,LOW(_tengah)
000262 e0b0      	LDI  R27,HIGH(_tengah)
000263 0fee      	LSL  R30
000264 1fff      	ROL  R31
000265 0fea      	ADD  R30,R26
000266 1ffb      	ADC  R31,R27
000267 01bf      	MOVW R22,R30
000268 940e 0c38 	CALL SUBOPT_0xD
00026a 0fae      	ADD  R26,R30
00026b 1fbf      	ADC  R27,R31
00026c 940e 0dce 	CALL __EEPROMRDW
00026e 010f      	MOVW R0,R30
00026f 940e 0c07 	CALL SUBOPT_0x7
000271 0fae      	ADD  R26,R30
000272 1fbf      	ADC  R27,R31
000273 940e 0dce 	CALL __EEPROMRDW
000275 01d0      	MOVW R26,R0
000276 0fae      	ADD  R26,R30
000277 1fbf      	ADC  R27,R31
000278 e0e2      	LDI  R30,LOW(2)
000279 e0f0      	LDI  R31,HIGH(2)
00027a 940e 0dae 	CALL __DIVW21
00027c 01db      	MOVW R26,R22
00027d 940e 0dde 	CALL __EEPROMWRW
                 ;lcd_gotoxy(0, 0);
00027f e0e0      	LDI  R30,LOW(0)
000280 940e 0bf4 	CALL SUBOPT_0x3
                 ;lcd_putsf("Center Point    ");
                +
000282 ebaa     +LDI R26 , LOW ( 2 * _0x0 + ( 58 ) )
000283 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 58 ) )
                 	__POINTW2FN _0x0,58
000284 940e 0c12 	CALL SUBOPT_0x9
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d --> %d  ", i, tengah[i]);
                +
000286 eceb     +LDI R30 , LOW ( 2 * _0x0 + ( 75 ) )
000287 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 75 ) )
                 	__POINTW1FN _0x0,75
000288 93fa      	ST   -Y,R31
000289 93ea      	ST   -Y,R30
00028a 01f4      	MOVW R30,R8
00028b 940e 0c3e 	CALL SUBOPT_0xE
00028d 01f4      	MOVW R30,R8
00028e e1ac      	LDI  R26,LOW(_tengah)
00028f e0b0      	LDI  R27,HIGH(_tengah)
000290 0fee      	LSL  R30
000291 1fff      	ROL  R31
000292 940e 0c24 	CALL SUBOPT_0xB
                 ;lcd_puts(buff);
                 ;lampu = 0;
000294 98c3      	CBI  0x18,3
                 ;lampu = 1;
000295 9ac3      	SBI  0x18,3
000296 01f4      	MOVW R30,R8
000297 9631      	ADIW R30,1
000298 014f      	MOVW R8,R30
000299 cfc3      	RJMP _0x2D
                 _0x2E:
00029a 9508      	RET
                 ; .FEND
                 ;void cekdatasensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", garis[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 0);
                 ;sprintf(buff, " %d  ", back[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, " %d  ", tengah[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 1);
                 ;sprintf(buff, " %d  ", read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(200);
                 ;void maju(unsigned char ki, unsigned char ka)
                 ; 0000 005B {
                 _maju:
                 ; .FSTART _maju
                 ;pwmka = ka;
00029b 940e 0c43 	CALL SUBOPT_0xF
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
00029d 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
00029e 9893      	CBI  0x12,3
                 ;PORTD.6 = 0;
00029f 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
0002a0 9a97      	SBI  0x12,7
0002a1 c207      	RJMP _0x20C000A
                 ; .FEND
                 ;void mundur(unsigned char ki, unsigned char ka)
                 _mundur:
                 ; .FSTART _mundur
                 ;pwmka = ka;
0002a2 940e 0c43 	CALL SUBOPT_0xF
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
0002a4 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002a5 9a93      	SBI  0x12,3
                 ;PORTD.6 = 1;
0002a6 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
0002a7 9897      	CBI  0x12,7
0002a8 c200      	RJMP _0x20C000A
                 ; .FEND
                 ;void kanan(unsigned char ki, unsigned char ka)
                 _kanan:
                 ; .FSTART _kanan
                 ;pwmka = ka;
0002a9 940e 0c43 	CALL SUBOPT_0xF
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
0002ab 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002ac 9a93      	SBI  0x12,3
                 ;PORTD.6 = 0;
0002ad 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
0002ae 9a97      	SBI  0x12,7
0002af c1f9      	RJMP _0x20C000A
                 ; .FEND
                 ;void kiri(unsigned char ki, unsigned char ka)
                 _kiri:
                 ; .FSTART _kiri
                 ;pwmka = ka;
0002b0 940e 0c43 	CALL SUBOPT_0xF
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
0002b2 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
0002b3 9893      	CBI  0x12,3
                 ;PORTD.6 = 1;
0002b4 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
0002b5 9897      	CBI  0x12,7
0002b6 c1f2      	RJMP _0x20C000A
                 ; .FEND
                 ;void setMotor(int ki, int ka)
                 _setMotor:
                 ; .FSTART _setMotor
                 ;pwmki = abs(ki);
0002b7 93ba      	ST   -Y,R27
0002b8 93aa      	ST   -Y,R26
                 ;	ki -> Y+2
                 ;	ka -> Y+0
0002b9 81aa      	LDD  R26,Y+2
0002ba 81bb      	LDD  R27,Y+2+1
0002bb 940e 0ad9 	CALL _abs
0002bd bdfb      	OUT  0x2A+1,R31
0002be bdea      	OUT  0x2A,R30
                 ;if (ki > 0)
0002bf 81aa      	LDD  R26,Y+2
0002c0 81bb      	LDD  R27,Y+2+1
0002c1 940e 0df7 	CALL __CPW02
0002c3 f41c      	BRGE _0x56
                 ;PORTD.2 = 1;
0002c4 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
0002c5 9893      	CBI  0x12,3
                 ;else
0002c6 c002      	RJMP _0x5B
                 _0x56:
                 ;PORTD.2 = 0;
0002c7 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002c8 9a93      	SBI  0x12,3
                 _0x5B:
                 ;pwmka = abs(ka);
0002c9 81a8      	LD   R26,Y
0002ca 81b9      	LDD  R27,Y+1
0002cb 940e 0ad9 	CALL _abs
0002cd bdf9      	OUT  0x28+1,R31
0002ce bde8      	OUT  0x28,R30
                 ;if (ka > 0)
0002cf 940e 0c4d 	CALL SUBOPT_0x10
0002d1 f41c      	BRGE _0x60
                 ;PORTD.7 = 1;
0002d2 9a97      	SBI  0x12,7
                 ;PORTD.6 = 0;
0002d3 9896      	CBI  0x12,6
                 ;else
0002d4 c002      	RJMP _0x65
                 _0x60:
                 ;PORTD.7 = 0;
0002d5 9897      	CBI  0x12,7
                 ;PORTD.6 = 1;
0002d6 9a96      	SBI  0x12,6
                 _0x65:
0002d7 c1c5      	RJMP _0x20C000B
                 ; .FEND
                 ;void rem(int nilai_rem)
                 _rem:
                 ; .FSTART _rem
                 ;PORTD .4 = 1;
0002d8 93ba      	ST   -Y,R27
0002d9 93aa      	ST   -Y,R26
                 ;	nilai_rem -> Y+0
0002da 9a94      	SBI  0x12,4
                 ;PORTD .5 = 1;
0002db 9a95      	SBI  0x12,5
                 ;PORTD .2 = 0;
0002dc 9892      	CBI  0x12,2
                 ;PORTD .3 = 0;
0002dd 9893      	CBI  0x12,3
                 ;PORTD .6 = 0;
0002de 9896      	CBI  0x12,6
                 ;PORTD .7 = 0;
0002df 9897      	CBI  0x12,7
                 ;delay_ms(nilai_rem);
0002e0 81a8      	LD   R26,Y
0002e1 81b9      	LDD  R27,Y+1
0002e2 940e 0ee2 	CALL _delay_ms
0002e4 c1c4      	RJMP _0x20C000A
                 ; .FEND
                 ;void maju_delay(int kec, int lama)
                 _maju_delay:
                 ; .FSTART _maju_delay
                 ;maju(kec, kec);
0002e5 93ba      	ST   -Y,R27
0002e6 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
0002e7 81ea      	LDD  R30,Y+2
0002e8 93ea      	ST   -Y,R30
0002e9 81ab      	LDD  R26,Y+3
0002ea dfb0      	RCALL _maju
                 ;delay(lama);
0002eb 940e 0c52 	CALL SUBOPT_0x11
0002ed c1af      	RJMP _0x20C000B
                 ; .FEND
                 ;void pilihSpeed(int kec)
                 _pilihSpeed:
                 ; .FSTART _pilihSpeed
                 ;kp = kec * 0.15;
0002ee 93ba      	ST   -Y,R27
0002ef 93aa      	ST   -Y,R26
                 ;	kec -> Y+0
0002f0 940e 0c56 	CALL SUBOPT_0x12
                +
0002f2 e9aa     +LDI R26 , LOW ( 0x3E19999A )
0002f3 e9b9     +LDI R27 , HIGH ( 0x3E19999A )
0002f4 e189     +LDI R24 , BYTE3 ( 0x3E19999A )
0002f5 e39e     +LDI R25 , BYTE4 ( 0x3E19999A )
                 	__GETD2N 0x3E19999A
0002f6 940e 0e94 	CALL __MULF12
0002f8 e9a3      	LDI  R26,LOW(_kp)
0002f9 e0b1      	LDI  R27,HIGH(_kp)
0002fa 940e 0c5d 	CALL SUBOPT_0x13
                 ;kd = kec * 0.6;
0002fc 940e 0c56 	CALL SUBOPT_0x12
                +
0002fe e9aa     +LDI R26 , LOW ( 0x3F19999A )
0002ff e9b9     +LDI R27 , HIGH ( 0x3F19999A )
000300 e189     +LDI R24 , BYTE3 ( 0x3F19999A )
000301 e39f     +LDI R25 , BYTE4 ( 0x3F19999A )
                 	__GETD2N 0x3F19999A
000302 940e 0e94 	CALL __MULF12
000304 e9a5      	LDI  R26,LOW(_kd)
000305 e0b1      	LDI  R27,HIGH(_kd)
000306 940e 0c5d 	CALL SUBOPT_0x13
                 ;SPEED = kec;
000308 81e8      	LD   R30,Y
000309 81f9      	LDD  R31,Y+1
00030a 93e0 0197 	STS  _SPEED,R30
00030c 93f0 0198 	STS  _SPEED+1,R31
                 ;MIN_SPEED = -(kec * 0.75);
00030e 940e 0c56 	CALL SUBOPT_0x12
                +
000310 e0a0     +LDI R26 , LOW ( 0x3F400000 )
000311 e0b0     +LDI R27 , HIGH ( 0x3F400000 )
000312 e480     +LDI R24 , BYTE3 ( 0x3F400000 )
000313 e39f     +LDI R25 , BYTE4 ( 0x3F400000 )
                 	__GETD2N 0x3F400000
000314 940e 0e94 	CALL __MULF12
000316 940e 0dfb 	CALL __ANEGF1
000318 e9a9      	LDI  R26,LOW(_MIN_SPEED)
000319 e0b1      	LDI  R27,HIGH(_MIN_SPEED)
00031a 940e 0c5d 	CALL SUBOPT_0x13
                 ;MAX_SPEED = kec;
00031c 81e8      	LD   R30,Y
00031d 81f9      	LDD  R31,Y+1
00031e 93e0 019b 	STS  _MAX_SPEED,R30
000320 93f0 019c 	STS  _MAX_SPEED+1,R31
000322 c186      	RJMP _0x20C000A
                 ; .FEND
                 ;void maju_cari_garis()
                 ;maju(180, 182);
                 ;cek_sensor(); // 0b01000000)!=0b00000000)
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;rem(100);
                 ;void parkir()
                 ;lampu = 0;
                 ;while (1)
                 ;rem(100);
                 ;void scan(int kec)
                 _scan:
                 ; .FSTART _scan
                 ;int rateError;
                 ;int moveVal, moveLeft, moveRight;
                 ;pilihSpeed(kec);
000323 93ba      	ST   -Y,R27
000324 93aa      	ST   -Y,R26
000325 9722      	SBIW R28,2
000326 940e 0d6b 	CALL __SAVELOCR6
                 ;	kec -> Y+8
                 ;	rateError -> R16,R17
                 ;	moveVal -> R18,R19
                 ;	moveLeft -> R20,R21
                 ;	moveRight -> Y+6
000328 85a8      	LDD  R26,Y+8
000329 85b9      	LDD  R27,Y+8+1
00032a dfc3      	RCALL _pilihSpeed
                 ;sensor = sensor & 0b01111111;
00032b 940e 0c62 	CALL SUBOPT_0x14
00032d 77ef      	ANDI R30,LOW(0x7F)
00032e 70f0      	ANDI R31,HIGH(0x7F)
00032f 93e0 018d 	STS  _sensor,R30
000331 93f0 018e 	STS  _sensor+1,R31
                 ;switch (sensor) //  1=kiri 8=kanan
000333 940e 0c62 	CALL SUBOPT_0x14
                 ;{               //  7......1
                 ;case 0b00000001:
000335 30e1      	CPI  R30,LOW(0x1)
000336 e0a0      	LDI  R26,HIGH(0x1)
000337 07fa      	CPC  R31,R26
000338 f419      	BRNE _0x81
                 ;error = -6;
000339 efea      	LDI  R30,LOW(65530)
00033a efff      	LDI  R31,HIGH(65530)
00033b c056      	RJMP _0x192
                 ;break; // DOMINAN KANAN
                 ;case 0b00000011:
                 _0x81:
00033c 30e3      	CPI  R30,LOW(0x3)
00033d e0a0      	LDI  R26,HIGH(0x3)
00033e 07fa      	CPC  R31,R26
00033f f419      	BRNE _0x82
                 ;error = -5;
000340 efeb      	LDI  R30,LOW(65531)
000341 efff      	LDI  R31,HIGH(65531)
000342 c04f      	RJMP _0x192
                 ;break;
                 ;case 0b00000010:
                 _0x82:
000343 30e2      	CPI  R30,LOW(0x2)
000344 e0a0      	LDI  R26,HIGH(0x2)
000345 07fa      	CPC  R31,R26
000346 f419      	BRNE _0x83
                 ;error = -4;
000347 efec      	LDI  R30,LOW(65532)
000348 efff      	LDI  R31,HIGH(65532)
000349 c048      	RJMP _0x192
                 ;break;
                 ;case 0b00000110:
                 _0x83:
00034a 30e6      	CPI  R30,LOW(0x6)
00034b e0a0      	LDI  R26,HIGH(0x6)
00034c 07fa      	CPC  R31,R26
00034d f419      	BRNE _0x84
                 ;error = -3;
00034e efed      	LDI  R30,LOW(65533)
00034f efff      	LDI  R31,HIGH(65533)
000350 c041      	RJMP _0x192
                 ;break;
                 ;case 0b00000100:
                 _0x84:
000351 30e4      	CPI  R30,LOW(0x4)
000352 e0a0      	LDI  R26,HIGH(0x4)
000353 07fa      	CPC  R31,R26
000354 f419      	BRNE _0x85
                 ;error = -2;
000355 efee      	LDI  R30,LOW(65534)
000356 efff      	LDI  R31,HIGH(65534)
000357 c03a      	RJMP _0x192
                 ;break;
                 ;case 0b00001100:
                 _0x85:
000358 30ec      	CPI  R30,LOW(0xC)
000359 e0a0      	LDI  R26,HIGH(0xC)
00035a 07fa      	CPC  R31,R26
00035b f419      	BRNE _0x86
                 ;error = -1;
00035c efef      	LDI  R30,LOW(65535)
00035d efff      	LDI  R31,HIGH(65535)
00035e c033      	RJMP _0x192
                 ;break;
                 ;case 0b00001000:
                 _0x86:
00035f 30e8      	CPI  R30,LOW(0x8)
000360 e0a0      	LDI  R26,HIGH(0x8)
000361 07fa      	CPC  R31,R26
000362 f431      	BRNE _0x87
                 ;error = 0;
000363 e0e0      	LDI  R30,LOW(0)
000364 93e0 018f 	STS  _error,R30
000366 93e0 0190 	STS  _error+1,R30
                 ;break;
000368 c02d      	RJMP _0x80
                 ;case 0b00011000:
                 _0x87:
000369 31e8      	CPI  R30,LOW(0x18)
00036a e0a0      	LDI  R26,HIGH(0x18)
00036b 07fa      	CPC  R31,R26
00036c f419      	BRNE _0x88
                 ;error = 1;
00036d e0e1      	LDI  R30,LOW(1)
00036e e0f0      	LDI  R31,HIGH(1)
00036f c022      	RJMP _0x192
                 ;break;
                 ;case 0b00010000:
                 _0x88:
000370 31e0      	CPI  R30,LOW(0x10)
000371 e0a0      	LDI  R26,HIGH(0x10)
000372 07fa      	CPC  R31,R26
000373 f419      	BRNE _0x89
                 ;error = 2;
000374 e0e2      	LDI  R30,LOW(2)
000375 e0f0      	LDI  R31,HIGH(2)
000376 c01b      	RJMP _0x192
                 ;break;
                 ;case 0b00110000:
                 _0x89:
000377 33e0      	CPI  R30,LOW(0x30)
000378 e0a0      	LDI  R26,HIGH(0x30)
000379 07fa      	CPC  R31,R26
00037a f419      	BRNE _0x8A
                 ;error = 3;
00037b e0e3      	LDI  R30,LOW(3)
00037c e0f0      	LDI  R31,HIGH(3)
00037d c014      	RJMP _0x192
                 ;break;
                 ;case 0b00100000:
                 _0x8A:
00037e 32e0      	CPI  R30,LOW(0x20)
00037f e0a0      	LDI  R26,HIGH(0x20)
000380 07fa      	CPC  R31,R26
000381 f419      	BRNE _0x8B
                 ;error = 4;
000382 e0e4      	LDI  R30,LOW(4)
000383 e0f0      	LDI  R31,HIGH(4)
000384 c00d      	RJMP _0x192
                 ;break;
                 ;case 0b01100000:
                 _0x8B:
000385 36e0      	CPI  R30,LOW(0x60)
000386 e0a0      	LDI  R26,HIGH(0x60)
000387 07fa      	CPC  R31,R26
000388 f419      	BRNE _0x8C
                 ;error = 5;
000389 e0e5      	LDI  R30,LOW(5)
00038a e0f0      	LDI  R31,HIGH(5)
00038b c006      	RJMP _0x192
                 ;break;
                 ;case 0b01000000:
                 _0x8C:
00038c 34e0      	CPI  R30,LOW(0x40)
00038d e0a0      	LDI  R26,HIGH(0x40)
00038e 07fa      	CPC  R31,R26
00038f f431      	BRNE _0x80
                 ;error = 6;
000390 e0e6      	LDI  R30,LOW(6)
000391 e0f0      	LDI  R31,HIGH(6)
                 _0x192:
000392 93e0 018f 	STS  _error,R30
000394 93f0 0190 	STS  _error+1,R31
                 ;break; // DOMINAN KIRI
                 _0x80:
                 ;rateError = error - lastError;
000396 91a0 0191 	LDS  R26,_lastError
000398 91b0 0192 	LDS  R27,_lastError+1
00039a 91e0 018f 	LDS  R30,_error
00039c 91f0 0190 	LDS  R31,_error+1
00039e 1bea      	SUB  R30,R26
00039f 0bfb      	SBC  R31,R27
0003a0 018f      	MOVW R16,R30
                 ;lastError = error;
0003a1 91e0 018f 	LDS  R30,_error
0003a3 91f0 0190 	LDS  R31,_error+1
0003a5 93e0 0191 	STS  _lastError,R30
0003a7 93f0 0192 	STS  _lastError+1,R31
                 ;moveVal = (int)(error * kp) + (rateError * kd);
0003a9 91e0 0193 	LDS  R30,_kp
0003ab 91f0 0194 	LDS  R31,_kp+1
0003ad 91a0 018f 	LDS  R26,_error
0003af 91b0 0190 	LDS  R27,_error+1
0003b1 940e 0d96 	CALL __MULW12
0003b3 01bf      	MOVW R22,R30
0003b4 91e0 0195 	LDS  R30,_kd
0003b6 91f0 0196 	LDS  R31,_kd+1
0003b8 01d8      	MOVW R26,R16
0003b9 940e 0d96 	CALL __MULW12
0003bb 0fe6      	ADD  R30,R22
0003bc 1ff7      	ADC  R31,R23
0003bd 019f      	MOVW R18,R30
                 ;moveLeft = SPEED + moveVal;
0003be 91a0 0197 	LDS  R26,_SPEED
0003c0 91b0 0198 	LDS  R27,_SPEED+1
0003c2 0fea      	ADD  R30,R26
0003c3 1ffb      	ADC  R31,R27
0003c4 01af      	MOVW R20,R30
                 ;moveRight = SPEED - moveVal;
0003c5 91e0 0197 	LDS  R30,_SPEED
0003c7 91f0 0198 	LDS  R31,_SPEED+1
0003c9 1be2      	SUB  R30,R18
0003ca 0bf3      	SBC  R31,R19
0003cb 83ee      	STD  Y+6,R30
0003cc 83ff      	STD  Y+6+1,R31
                 ;if (moveLeft > MAX_SPEED)
0003cd 940e 0c67 	CALL SUBOPT_0x15
0003cf 17e4      	CP   R30,R20
0003d0 07f5      	CPC  R31,R21
0003d1 f424      	BRGE _0x8E
                 ;moveLeft = MAX_SPEED;
                +
0003d2 9140 019b+LDS R20 , 0 + ( _MAX_SPEED )
0003d4 9150 019c+LDS R21 , 0 + ( _MAX_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MAX_SPEED
                 ;if (moveLeft < MIN_SPEED)
                 _0x8E:
0003d6 940e 0c6c 	CALL SUBOPT_0x16
0003d8 174e      	CP   R20,R30
0003d9 075f      	CPC  R21,R31
0003da f424      	BRGE _0x8F
                 ;moveLeft = MIN_SPEED;
                +
0003db 9140 0199+LDS R20 , 0 + ( _MIN_SPEED )
0003dd 9150 019a+LDS R21 , 0 + ( _MIN_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MIN_SPEED
                 ;if (moveRight > MAX_SPEED)
                 _0x8F:
0003df 940e 0c67 	CALL SUBOPT_0x15
0003e1 81ae      	LDD  R26,Y+6
0003e2 81bf      	LDD  R27,Y+6+1
0003e3 17ea      	CP   R30,R26
0003e4 07fb      	CPC  R31,R27
0003e5 f424      	BRGE _0x90
                 ;moveRight = MAX_SPEED;
0003e6 940e 0c67 	CALL SUBOPT_0x15
0003e8 83ee      	STD  Y+6,R30
0003e9 83ff      	STD  Y+6+1,R31
                 ;if (moveRight < MIN_SPEED)
                 _0x90:
0003ea 940e 0c6c 	CALL SUBOPT_0x16
0003ec 81ae      	LDD  R26,Y+6
0003ed 81bf      	LDD  R27,Y+6+1
0003ee 17ae      	CP   R26,R30
0003ef 07bf      	CPC  R27,R31
0003f0 f424      	BRGE _0x91
                 ;moveRight = MIN_SPEED;
0003f1 940e 0c6c 	CALL SUBOPT_0x16
0003f3 83ee      	STD  Y+6,R30
0003f4 83ff      	STD  Y+6+1,R31
                 ;setMotor(moveLeft, moveRight);
                 _0x91:
0003f5 935a      	ST   -Y,R21
0003f6 934a      	ST   -Y,R20
0003f7 85a8      	LDD  R26,Y+8
0003f8 85b9      	LDD  R27,Y+8+1
0003f9 debd      	RCALL _setMotor
0003fa 940e 0d72 	CALL __LOADLOCR6
0003fc 962a      	ADIW R28,10
0003fd 9508      	RET
                 ; .FEND
                 ;void scanX(int brpkali, int kec)
                 _scanX:
                 ; .FSTART _scanX
                 ;while (hitung < brpkali)
0003fe 93ba      	ST   -Y,R27
0003ff 93aa      	ST   -Y,R26
                 ;	brpkali -> Y+2
                 ;	kec -> Y+0
                 _0x92:
000400 81ea      	LDD  R30,Y+2
000401 81fb      	LDD  R31,Y+2+1
000402 164e      	CP   R4,R30
000403 065f      	CPC  R5,R31
000404 f4d4      	BRGE _0x94
                 ;while ((sensor & 0b00011100) != 0b00011100)
                 _0x95:
000405 940e 0c71 	CALL SUBOPT_0x17
000407 f029      	BREQ _0x97
                 ;cek_sensor();
000408 ddde      	RCALL _cek_sensor
                 ;scan(kec);
000409 81a8      	LD   R26,Y
00040a 81b9      	LDD  R27,Y+1
00040b df17      	RCALL _scan
00040c cff8      	RJMP _0x95
                 _0x97:
                 ;while ((sensor & 0b00011100) == 0b00011100)
                 _0x98:
00040d 940e 0c71 	CALL SUBOPT_0x17
00040f f471      	BRNE _0x9A
                 ;cek_sensor();
000410 ddd6      	RCALL _cek_sensor
                 ;lampu = 0;
000411 98c3      	CBI  0x18,3
                 ;scan(kec);
000412 81a8      	LD   R26,Y
000413 81b9      	LDD  R27,Y+1
000414 df0e      	RCALL _scan
                 ;if ((sensor & 0b00011100) != 0b00011100)
000415 940e 0c71 	CALL SUBOPT_0x17
000417 f029      	BREQ _0x9D
                 ;hitung++;
000418 01f2      	MOVW R30,R4
000419 9631      	ADIW R30,1
00041a 012f      	MOVW R4,R30
00041b 9731      	SBIW R30,1
                 ;lampu = 1;
00041c 9ac3      	SBI  0x18,3
                 ;};
                 _0x9D:
00041d cfef      	RJMP _0x98
                 _0x9A:
                 ;};
00041e cfe1      	RJMP _0x92
                 _0x94:
                 ;hitung = 0;
00041f 2444      	CLR  R4
000420 2455      	CLR  R5
000421 c07b      	RJMP _0x20C000B
                 ; .FEND
                 ;void scanTimer(int countGoal, int kec, int lama)
                 ;count = 0;
                 ;	countGoal -> Y+4
                 ;	kec -> Y+2
                 ;	lama -> Y+0
                 ;while (count < countGoal)
                 ;cek_sensor();
                 ;scan(kec);
                 ;count++;
                 ;rem(lama);
                 ;void scanKotak(int brpkali, int kec, int lama_rem) {
                 _scanKotak:
                 ; .FSTART _scanKotak
                 ;while (hitung < brpkali) {
000422 93ba      	ST   -Y,R27
000423 93aa      	ST   -Y,R26
                 ;	brpkali -> Y+4
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
                 _0xA3:
000424 81ec      	LDD  R30,Y+4
000425 81fd      	LDD  R31,Y+4+1
000426 164e      	CP   R4,R30
000427 065f      	CPC  R5,R31
000428 f4cc      	BRGE _0xA5
                 ;while(1)
                 _0xA6:
                 ;cek_sensor();
000429 ddbd      	RCALL _cek_sensor
                 ;scan(kec);
00042a 81aa      	LDD  R26,Y+2
00042b 81bb      	LDD  R27,Y+2+1
00042c def6      	RCALL _scan
                 ;if((sensor & 0b01111111) == 0b01111111) {
00042d 940e 0c62 	CALL SUBOPT_0x14
00042f 77ef      	ANDI R30,0x7F
000430 37ef      	CPI  R30,LOW(0x7F)
000431 f471      	BRNE _0xA9
                 ;hitung++; mundur(kec, kec); delay(lama_rem); rem(10); break;
000432 01f2      	MOVW R30,R4
000433 9631      	ADIW R30,1
000434 012f      	MOVW R4,R30
000435 9731      	SBIW R30,1
000436 81ea      	LDD  R30,Y+2
000437 93ea      	ST   -Y,R30
000438 81ab      	LDD  R26,Y+3
000439 de68      	RCALL _mundur
00043a 940e 0c52 	CALL SUBOPT_0x11
00043c e0aa      	LDI  R26,LOW(10)
00043d e0b0      	LDI  R27,0
00043e de99      	RCALL _rem
00043f c001      	RJMP _0xA8
                 _0xA9:
000440 cfe8      	RJMP _0xA6
                 _0xA8:
000441 cfe2      	RJMP _0xA3
                 _0xA5:
                 ;hitung = 0;
000442 2444      	CLR  R4
000443 2455      	CLR  R5
000444 9626      	ADIW R28,6
000445 9508      	RET
                 ; .FEND
                 ;void scanTka(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b01110000) != 0b01110000) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b01110000) == 0b01110000)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b01110000) != 0b01110000)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scanTki(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b00000111) != 0b00000111) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b00000111) == 0b00000111)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b00000111) != 0b00000111)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scan7ki()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b01000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ka()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b00000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ki2()
                 ;cek_sensor();
                 ;while (sensor == 0b00000000) // sensor !=0b00111111||0b00000011|| 0b00000001
                 ;cek_sensor();
                 ;scan(170);
                 ;void belki(int kec, int lama)
                 _belki:
                 ; .FSTART _belki
                 ;cek_sensor();
000446 93ba      	ST   -Y,R27
000447 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
000448 dd9e      	RCALL _cek_sensor
                 ;while (sen[0] || sen[1])
                 _0xC7:
000449 91e0 0186 	LDS  R30,_sen
00044b 30e0      	CPI  R30,0
00044c f421      	BRNE _0xCA
                +
00044d 91e0 0187+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
00044f 30e0      	CPI  R30,0
000450 f019      	BREQ _0xC9
                 _0xCA:
                 ;kiri(kec, kec);
000451 940e 0c75 	CALL SUBOPT_0x18
                 ;cek_sensor();
000453 cff5      	RJMP _0xC7
                 _0xC9:
                 ;while (!sen[0] && !sen[1])
                 _0xCC:
000454 91e0 0186 	LDS  R30,_sen
000456 30e0      	CPI  R30,0
000457 f421      	BRNE _0xCF
                +
000458 91e0 0187+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
00045a 30e0      	CPI  R30,0
00045b f009      	BREQ _0xD0
                 _0xCF:
00045c c003      	RJMP _0xCE
                 _0xD0:
                 ;kiri(kec, kec);
00045d 940e 0c75 	CALL SUBOPT_0x18
                 ;cek_sensor();
00045f cff4      	RJMP _0xCC
                 _0xCE:
                 ;if (lama > 0)
000460 940e 0c4d 	CALL SUBOPT_0x10
000462 f41c      	BRGE _0xD1
                 ;rem(lama);
000463 81a8      	LD   R26,Y
000464 81b9      	LDD  R27,Y+1
000465 de72      	RCALL _rem
                 _0xD1:
000466 c036      	RJMP _0x20C000B
                 ; .FEND
                 ;void belki2()
                 ;cek_sensor();
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;kiri(150, 150);
                 ;void belka(int kec, int lama)
                 _belka:
                 ; .FSTART _belka
                 ;cek_sensor();
000467 93ba      	ST   -Y,R27
000468 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
000469 dd7d      	RCALL _cek_sensor
                 ;while (sen[5] || sen[6])
                 _0xD5:
                +
00046a 91e0 018b+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
00046c 30e0      	CPI  R30,0
00046d f421      	BRNE _0xD8
                +
00046e 91e0 018c+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
000470 30e0      	CPI  R30,0
000471 f019      	BREQ _0xD7
                 _0xD8:
                 ;kanan(kec, kec);
000472 940e 0c7c 	CALL SUBOPT_0x19
                 ;cek_sensor();
000474 cff5      	RJMP _0xD5
                 _0xD7:
                 ;while (!sen[5] && !sen[6])
                 _0xDA:
                +
000475 91e0 018b+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
000477 30e0      	CPI  R30,0
000478 f421      	BRNE _0xDD
                +
000479 91e0 018c+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
00047b 30e0      	CPI  R30,0
00047c f009      	BREQ _0xDE
                 _0xDD:
00047d c003      	RJMP _0xDC
                 _0xDE:
                 ;kanan(kec, kec);
00047e 940e 0c7c 	CALL SUBOPT_0x19
                 ;cek_sensor();
000480 cff4      	RJMP _0xDA
                 _0xDC:
                 ;if (lama > 0)
000481 940e 0c4d 	CALL SUBOPT_0x10
000483 f41c      	BRGE _0xDF
                 ;rem(lama);
000484 81a8      	LD   R26,Y
000485 81b9      	LDD  R27,Y+1
000486 de51      	RCALL _rem
                 _0xDF:
000487 c015      	RJMP _0x20C000B
                 ; .FEND
                 ;void belkacenter()
                 ;cek_sensor();
                 ;while ((sensor & 0b00001000) != 0b00001000)
                 ;cek_sensor();
                 ;kanan(180, 180);
                 ;if ((sensor & 0b10000000) == 0b10000000)
                 ;lcd_kedip(1);
                 ;void scan_delay(int ms)
                 ;k = 0;
                 ;	ms -> Y+0
                 ;maju(172, 170);
                 ;while (k < ms / 10)
                 ;delay_ms(10);
                 ;k++;
                 ;cek_sensor();
                 ;scan(180);
                 ;void belokKanan(int kec, int lama_rem) {
                 _belokKanan:
                 ; .FSTART _belokKanan
                 ;if(mapMirror == map_biru) {
000488 940e 0c83 	CALL SUBOPT_0x1A
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
00048a f421      	BRNE _0xE7
                 ;belka(kec, lama_rem);
00048b 940e 0c8b 	CALL SUBOPT_0x1B
00048d dfd9      	RCALL _belka
                 ;} else {
00048e c003      	RJMP _0xE8
                 _0xE7:
                 ;belki(kec, lama_rem);
00048f 940e 0c8b 	CALL SUBOPT_0x1B
000491 dfb4      	RCALL _belki
                 _0xE8:
000492 c00a      	RJMP _0x20C000B
                 ; .FEND
                 ;void belokKiri(int kec, int lama_rem) {
                 _belokKiri:
                 ; .FSTART _belokKiri
                 ;if(mapMirror == map_biru) {
000493 940e 0c83 	CALL SUBOPT_0x1A
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
000495 f421      	BRNE _0xE9
                 ;belki(kec, lama_rem);
000496 940e 0c8b 	CALL SUBOPT_0x1B
000498 dfad      	RCALL _belki
                 ;} else {
000499 c003      	RJMP _0xEA
                 _0xE9:
                 ;belka(kec, lama_rem);
00049a 940e 0c8b 	CALL SUBOPT_0x1B
00049c dfca      	RCALL _belka
                 _0xEA:
                 _0x20C000B:
00049d 9624      	ADIW R28,4
00049e 9508      	RET
                 ; .FEND
                 ;void griper()
                 ; 0000 005D {
                 ;capit_lepas;
                 ;lengan_tengah;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_ambil;
                 ;delay_ms(7000);
                 ;lengan_atas;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_lepas;
                 ;void ambil(int lama)
                 _ambil:
                 ; .FSTART _ambil
                 ;capit_ambil;
00049f 93ba      	ST   -Y,R27
0004a0 93aa      	ST   -Y,R26
                 ;	lama -> Y+0
0004a1 eeed      	LDI  R30,LOW(237)
0004a2 2ede      	MOV  R13,R30
                 ;delay(lama);
0004a3 940e 0c52 	CALL SUBOPT_0x11
                 ;lengan_atas;
0004a5 eeea      	LDI  R30,LOW(234)
0004a6 2ece      	MOV  R12,R30
                 ;delay(lama);
0004a7 940e 0c52 	CALL SUBOPT_0x11
                 _0x20C000A:
0004a9 9622      	ADIW R28,2
0004aa 9508      	RET
                 ; .FEND
                 ;void taruh(int lama)
                 ;lengan_bawah;
                 ;	lama -> Y+0
                 ;delay(lama);
                 ;capit_lepas;
                 ;delay(lama);
                 ;lengan_atas;
                 ;void bawah_lepas()
                 _bawah_lepas:
                 ; .FSTART _bawah_lepas
                 ;lengan_bawah;
0004ab efe0      	LDI  R30,LOW(240)
0004ac 2ece      	MOV  R12,R30
                 ;capit_lepas;
0004ad eee6      	LDI  R30,LOW(230)
0004ae 2ede      	MOV  R13,R30
0004af 9508      	RET
                 ; .FEND
                 ;void atas_lepas()
                 ;lengan_atas;
                 ;capit_lepas;
                 ;void bacawarna()
                 ; 0000 005E {
                 _bacawarna:
                 ; .FSTART _bacawarna
                 ;nadc7 = read_adc(7);
0004b0 e0a7      	LDI  R26,LOW(7)
0004b1 dcd9      	RCALL _read_adc
0004b2 2e6e      	MOV  R6,R30
0004b3 2477      	CLR  R7
                 ;lcd_gotoxy(13, 1);
0004b4 e0ed      	LDI  R30,LOW(13)
0004b5 940e 0c92 	CALL SUBOPT_0x1C
                 ;sprintf(buff, "%d   ", nadc7);
0004b7 940e 0bf8 	CALL SUBOPT_0x4
                +
0004b9 edee     +LDI R30 , LOW ( 2 * _0x0 + ( 94 ) )
0004ba e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 94 ) )
                 	__POINTW1FN _0x0,94
0004bb 93fa      	ST   -Y,R31
0004bc 93ea      	ST   -Y,R30
0004bd 01f3      	MOVW R30,R6
0004be 2766      	CLR  R22
0004bf 2777      	CLR  R23
0004c0 940e 0dc9 	CALL __PUTPARD1
0004c2 e084      	LDI  R24,4
0004c3 940e 0a84 	CALL _sprintf
0004c5 9628      	ADIW R28,8
                 ;lcd_puts(buff);
0004c6 c318      	RJMP _0x20C0006
                 ; .FEND
                 ;int checkWarna() {
                 ;int warna;
                 ;nadc7 = read_adc(7);
                 ;	warna -> R16,R17
                 ;if(nadc7 > minMerah && nadc7 < maxMerah){
                 ;warna = 0;
                 ;} else if(nadc7 > minKuning && nadc7 < maxKuning){
                 ;warna = 1;
                 ;} else if(nadc7 > minHijau && nadc7 < maxHijau){
                 ;warna = 2;
                 ;} else {
                 ;warna = 3;
                 ;return warna;
                 ;int isWarna;
                 ;void fromReloadToA();
                 ;void fromReloadToB();
                 ;void fromReloadToZ();
                 ;void fromAToReload();
                 ;void fromBToReload();
                 ;void Program_Jalan() {
                 ; 0000 005F void Program_Jalan() {
                 _Program_Jalan:
                 ; .FSTART _Program_Jalan
                 ;if(pointPos == 'O') {
0004c7 940e 0c96 	CALL SUBOPT_0x1D
0004c9 34ef      	CPI  R30,LOW(0x4F)
0004ca f4a1      	BRNE _0xF7
                 ;maju_delay(2000, 400);
0004cb 940e 0c9b 	CALL SUBOPT_0x1E
0004cd e9a0      	LDI  R26,LOW(400)
0004ce e0b1      	LDI  R27,HIGH(400)
0004cf de15      	RCALL _maju_delay
                 ;scanX(1, 2000); belokKiri(2000, 200);
0004d0 e0e1      	LDI  R30,LOW(1)
0004d1 e0f0      	LDI  R31,HIGH(1)
0004d2 940e 0ca0 	CALL SUBOPT_0x1F
0004d4 940e 0c9b 	CALL SUBOPT_0x1E
0004d6 940e 0ca6 	CALL SUBOPT_0x20
                 ;pointPos = 'A';
0004d8 e2ac      	LDI  R26,LOW(_pointPos)
0004d9 e0b0      	LDI  R27,HIGH(_pointPos)
0004da e4e1      	LDI  R30,LOW(65)
0004db 940e 0caa 	CALL SUBOPT_0x21
                 ;ringPos = 1;
0004dd 940e 0caf 	CALL SUBOPT_0x22
                 ;if(pointPos == 'A') fromReloadToA();
                 _0xF7:
0004df 940e 0c96 	CALL SUBOPT_0x1D
0004e1 34e1      	CPI  R30,LOW(0x41)
0004e2 f411      	BRNE _0xF8
0004e3 d0d5      	RCALL _fromReloadToA
                 ;else if(pointPos == 'B') fromReloadToB();
0004e4 c00b      	RJMP _0xF9
                 _0xF8:
0004e5 940e 0c96 	CALL SUBOPT_0x1D
0004e7 34e2      	CPI  R30,LOW(0x42)
0004e8 f411      	BRNE _0xFA
0004e9 d0d2      	RCALL _fromReloadToB
                 ;else if(pointPos == 'Z') fromReloadToZ();
0004ea c005      	RJMP _0xFB
                 _0xFA:
0004eb 940e 0c96 	CALL SUBOPT_0x1D
0004ed 35ea      	CPI  R30,LOW(0x5A)
0004ee f409      	BRNE _0xFC
0004ef d0d7      	RCALL _fromReloadToZ
                 ;if((pointPos == 'A') || (pointPos == 'B')) {
                 _0xFC:
                 _0xFB:
                 _0xF9:
0004f0 940e 0c96 	CALL SUBOPT_0x1D
0004f2 34e1      	CPI  R30,LOW(0x41)
0004f3 f019      	BREQ _0xFE
0004f4 34e2      	CPI  R30,LOW(0x42)
0004f5 f009      	BREQ _0xFE
0004f6 c0ab      	RJMP _0xFD
                 _0xFE:
                 ;if(ringPos == 1) scanX(5, 2000);
0004f7 940e 0cb4 	CALL SUBOPT_0x23
0004f9 30e1      	CPI  R30,LOW(0x1)
0004fa e0a0      	LDI  R26,HIGH(0x1)
0004fb 07fa      	CPC  R31,R26
0004fc f419      	BRNE _0x100
0004fd e0e5      	LDI  R30,LOW(5)
0004fe e0f0      	LDI  R31,HIGH(5)
0004ff c011      	RJMP _0x193
                 ;else if(ringPos == 2) scanX(3, 2000);
                 _0x100:
000500 940e 0cb4 	CALL SUBOPT_0x23
000502 30e2      	CPI  R30,LOW(0x2)
000503 e0a0      	LDI  R26,HIGH(0x2)
000504 07fa      	CPC  R31,R26
000505 f419      	BRNE _0x102
000506 e0e3      	LDI  R30,LOW(3)
000507 e0f0      	LDI  R31,HIGH(3)
000508 c008      	RJMP _0x193
                 ;else if(ringPos == 3) scanX(1, 2000);
                 _0x102:
000509 940e 0cb4 	CALL SUBOPT_0x23
00050b 30e3      	CPI  R30,LOW(0x3)
00050c e0a0      	LDI  R26,HIGH(0x3)
00050d 07fa      	CPC  R31,R26
00050e f431      	BRNE _0x104
00050f e0e1      	LDI  R30,LOW(1)
000510 e0f0      	LDI  R31,HIGH(1)
                 _0x193:
000511 93fa      	ST   -Y,R31
000512 93ea      	ST   -Y,R30
000513 940e 0cb9 	CALL SUBOPT_0x24
                 ;isWarna = 0;
                 _0x104:
000515 940e 0cbd 	CALL SUBOPT_0x25
                 ;if(isWarna == 0) {
000517 f429      	BRNE _0x105
                 ;belokKiri(2000, 200);
000518 940e 0c9b 	CALL SUBOPT_0x1E
00051a 940e 0ca6 	CALL SUBOPT_0x20
                 ;scanX(1, 2000); rem(200);
00051c c007      	RJMP _0x194
                 ;} else if(isWarna == 1) {
                 _0x105:
00051d 940e 0cc8 	CALL SUBOPT_0x26
00051f f459      	BRNE _0x107
                 ;belokKanan(2000, 200);
000520 940e 0c9b 	CALL SUBOPT_0x1E
000522 940e 0cce 	CALL SUBOPT_0x27
                 ;scanX(1, 2000); rem(200);
                 _0x194:
000524 e0e1      	LDI  R30,LOW(1)
000525 e0f0      	LDI  R31,HIGH(1)
000526 940e 0ca0 	CALL SUBOPT_0x1F
000528 eca8      	LDI  R26,LOW(200)
000529 e0b0      	LDI  R27,0
00052a ddad      	RCALL _rem
                 ;mundur(2000, 2000); delay(350);
                 _0x107:
00052b 940e 0cd2 	CALL SUBOPT_0x28
                 ;if(isWarna == 0) belokKiri(3500, 200);
00052d f429      	BRNE _0x108
00052e 940e 0ce1 	CALL SUBOPT_0x29
000530 940e 0ca6 	CALL SUBOPT_0x20
                 ;else if(isWarna == 1) belokKanan(3500, 200);
000532 c007      	RJMP _0x109
                 _0x108:
000533 940e 0cc8 	CALL SUBOPT_0x26
000535 f421      	BRNE _0x10A
000536 940e 0ce1 	CALL SUBOPT_0x29
000538 940e 0cce 	CALL SUBOPT_0x27
                 ;while (ringPos < 3) {
                 _0x10A:
                 _0x109:
                 _0x10B:
00053a 940e 0cb4 	CALL SUBOPT_0x23
00053c 9733      	SBIW R30,3
00053d f56c      	BRGE _0x10D
                 ;ringPos++;
00053e 940e 0cb4 	CALL SUBOPT_0x23
000540 9631      	ADIW R30,1
000541 940e 0dde 	CALL __EEPROMWRW
                 ;scanX(2, 2000);
000543 940e 0ce6 	CALL SUBOPT_0x2A
                 ;isWarna = 0;
000545 940e 0cbd 	CALL SUBOPT_0x25
                 ;if (isWarna == 0) {
000547 f429      	BRNE _0x10E
                 ;belokKiri(2000, 200);
000548 940e 0c9b 	CALL SUBOPT_0x1E
00054a 940e 0ca6 	CALL SUBOPT_0x20
                 ;scanX(1, 2000); rem(200);
00054c c007      	RJMP _0x195
                 ;} else if (isWarna == 1) {
                 _0x10E:
00054d 940e 0cc8 	CALL SUBOPT_0x26
00054f f459      	BRNE _0x110
                 ;belokKanan(2000, 200);
000550 940e 0c9b 	CALL SUBOPT_0x1E
000552 940e 0cce 	CALL SUBOPT_0x27
                 ;scanX(1, 2000); rem(200);
                 _0x195:
000554 e0e1      	LDI  R30,LOW(1)
000555 e0f0      	LDI  R31,HIGH(1)
000556 940e 0ca0 	CALL SUBOPT_0x1F
000558 eca8      	LDI  R26,LOW(200)
000559 e0b0      	LDI  R27,0
00055a dd7d      	RCALL _rem
                 ;mundur(2000, 2000); delay(350);
                 _0x110:
00055b 940e 0cd2 	CALL SUBOPT_0x28
                 ;if (isWarna == 0) {
00055d f429      	BRNE _0x111
                 ;belokKiri(3500, 200);
00055e 940e 0ce1 	CALL SUBOPT_0x29
000560 940e 0ca6 	CALL SUBOPT_0x20
                 ;} else if (isWarna == 1) {
000562 c007      	RJMP _0x112
                 _0x111:
000563 940e 0cc8 	CALL SUBOPT_0x26
000565 f421      	BRNE _0x113
                 ;belokKanan(3500, 200);
000566 940e 0ce1 	CALL SUBOPT_0x29
000568 940e 0cce 	CALL SUBOPT_0x27
                 _0x113:
                 _0x112:
00056a cfcf      	RJMP _0x10B
                 _0x10D:
                 ;if(ringPos == 1) scanX(5, 2000);
00056b 940e 0cb4 	CALL SUBOPT_0x23
00056d 30e1      	CPI  R30,LOW(0x1)
00056e e0a0      	LDI  R26,HIGH(0x1)
00056f 07fa      	CPC  R31,R26
000570 f419      	BRNE _0x114
000571 e0e5      	LDI  R30,LOW(5)
000572 e0f0      	LDI  R31,HIGH(5)
000573 c011      	RJMP _0x196
                 ;else if(ringPos == 2) scanX(3, 2000);
                 _0x114:
000574 940e 0cb4 	CALL SUBOPT_0x23
000576 30e2      	CPI  R30,LOW(0x2)
000577 e0a0      	LDI  R26,HIGH(0x2)
000578 07fa      	CPC  R31,R26
000579 f419      	BRNE _0x116
00057a e0e3      	LDI  R30,LOW(3)
00057b e0f0      	LDI  R31,HIGH(3)
00057c c008      	RJMP _0x196
                 ;else if(ringPos == 3) scanX(1, 2000);
                 _0x116:
00057d 940e 0cb4 	CALL SUBOPT_0x23
00057f 30e3      	CPI  R30,LOW(0x3)
000580 e0a0      	LDI  R26,HIGH(0x3)
000581 07fa      	CPC  R31,R26
000582 f431      	BRNE _0x118
000583 e0e1      	LDI  R30,LOW(1)
000584 e0f0      	LDI  R31,HIGH(1)
                 _0x196:
000585 93fa      	ST   -Y,R31
000586 93ea      	ST   -Y,R30
000587 940e 0cb9 	CALL SUBOPT_0x24
                 ;belokKiri(2000, 200);
                 _0x118:
000589 940e 0c9b 	CALL SUBOPT_0x1E
00058b 940e 0ca6 	CALL SUBOPT_0x20
                 ;if((pointPos == 'A')) fromAToReload();
00058d 940e 0c96 	CALL SUBOPT_0x1D
00058f 34e1      	CPI  R30,LOW(0x41)
000590 f411      	BRNE _0x119
000591 d045      	RCALL _fromAToReload
                 ;else if((pointPos == 'B')) fromBToReload();
000592 c005      	RJMP _0x11A
                 _0x119:
000593 940e 0c96 	CALL SUBOPT_0x1D
000595 34e2      	CPI  R30,LOW(0x42)
000596 f409      	BRNE _0x11B
000597 d042      	RCALL _fromBToReload
                 ;mundur(2000, 2000); delay(50); rem(200);
                 _0x11B:
                 _0x11A:
000598 ede0      	LDI  R30,LOW(208)
000599 93ea      	ST   -Y,R30
00059a eda0      	LDI  R26,LOW(208)
00059b dd06      	RCALL _mundur
00059c e3a2      	LDI  R26,LOW(50)
00059d e0b0      	LDI  R27,0
00059e dbf7      	RCALL _delay
00059f eca8      	LDI  R26,LOW(200)
0005a0 e0b0      	LDI  R27,0
0005a1 c015      	RJMP _0x197
                 ;else if(pointPos == 'Z') {
                 _0xFD:
0005a2 940e 0c96 	CALL SUBOPT_0x1D
0005a4 35ea      	CPI  R30,LOW(0x5A)
0005a5 f491      	BRNE _0x11D
                 ;mundur(2000, 2000); delay(350);
0005a6 ede0      	LDI  R30,LOW(208)
0005a7 93ea      	ST   -Y,R30
0005a8 eda0      	LDI  R26,LOW(208)
0005a9 dcf8      	RCALL _mundur
0005aa e5ae      	LDI  R26,LOW(350)
0005ab e0b1      	LDI  R27,HIGH(350)
0005ac dbe9      	RCALL _delay
                 ;belokKanan(2500, 200);
0005ad ece4      	LDI  R30,LOW(2500)
0005ae e0f9      	LDI  R31,HIGH(2500)
0005af 93fa      	ST   -Y,R31
0005b0 93ea      	ST   -Y,R30
0005b1 940e 0cce 	CALL SUBOPT_0x27
                 ;scanX(2, 2000); rem(500);
0005b3 940e 0ce6 	CALL SUBOPT_0x2A
0005b5 efa4      	LDI  R26,LOW(500)
0005b6 e0b1      	LDI  R27,HIGH(500)
                 _0x197:
0005b7 dd20      	RCALL _rem
                 _0x11D:
0005b8 9508      	RET
                 ; .FEND
                 ;void fromReloadToA() {
                 _fromReloadToA:
                 ; .FSTART _fromReloadToA
                 ;scanX(5, 2000); belokKanan(2000, 200);
0005b9 e0e5      	LDI  R30,LOW(5)
0005ba e0f0      	LDI  R31,HIGH(5)
0005bb c002      	RJMP _0x20C0009
                 ; .FEND
                 ;void fromReloadToB() {
                 _fromReloadToB:
                 ; .FSTART _fromReloadToB
                 ;scanX(2, 2000); belokKanan(2000, 200);
0005bc e0e2      	LDI  R30,LOW(2)
0005bd e0f0      	LDI  R31,HIGH(2)
                 _0x20C0009:
0005be 93fa      	ST   -Y,R31
0005bf 93ea      	ST   -Y,R30
0005c0 940e 0cb9 	CALL SUBOPT_0x24
0005c2 940e 0c9b 	CALL SUBOPT_0x1E
0005c4 940e 0cce 	CALL SUBOPT_0x27
0005c6 9508      	RET
                 ; .FEND
                 ;void fromReloadToZ() {
                 _fromReloadToZ:
                 ; .FSTART _fromReloadToZ
                 ;scanX(2, 2000); belokKanan(2000, 200);
0005c7 940e 0ce6 	CALL SUBOPT_0x2A
0005c9 940e 0c9b 	CALL SUBOPT_0x1E
0005cb 940e 0cce 	CALL SUBOPT_0x27
                 ;scanKotak(1, 2000, 200);
0005cd e0e1      	LDI  R30,LOW(1)
0005ce e0f0      	LDI  R31,HIGH(1)
0005cf 93fa      	ST   -Y,R31
0005d0 93ea      	ST   -Y,R30
0005d1 940e 0c9b 	CALL SUBOPT_0x1E
0005d3 eca8      	LDI  R26,LOW(200)
0005d4 e0b0      	LDI  R27,0
0005d5 de4c      	RCALL _scanKotak
0005d6 9508      	RET
                 ; .FEND
                 ;void fromAToReload() {
                 _fromAToReload:
                 ; .FSTART _fromAToReload
                 ;scanX(5, 2000);
0005d7 e0e5      	LDI  R30,LOW(5)
0005d8 e0f0      	LDI  R31,HIGH(5)
0005d9 c002      	RJMP _0x20C0008
                 ; .FEND
                 ;void fromBToReload() {
                 _fromBToReload:
                 ; .FSTART _fromBToReload
                 ;scanX(2, 2000);
0005da e0e2      	LDI  R30,LOW(2)
0005db e0f0      	LDI  R31,HIGH(2)
                 _0x20C0008:
0005dc 93fa      	ST   -Y,R31
0005dd 93ea      	ST   -Y,R30
0005de 940e 0cb9 	CALL SUBOPT_0x24
0005e0 9508      	RET
                 ; .FEND
                 ;void balikKanan() {
                 ;mundur(1000, 1000); delay(380);
                 ;belokKanan(1200, 0); belokKanan(1200, 100);
                 ;void balikKiri() {
                 ;belki(1000, 50); belki(1000, 200);
                 ;void runBot(void);
                 ;void calibration(void);
                 ;void Program_Jalan(void);
                 ;void test_motor(void);
                 ;void test_tombol(void);
                 ;void map_select(int map_num);
                 ;void sens_warna(void);
                 ;void test_capit(void);
                 ;void changeMenu(int menuSelect, bool isSelect) {
                 ; 0000 0060 void changeMenu(int menuSelect, _Bool isSelect) {
                 _changeMenu:
                 ; .FSTART _changeMenu
                 ;lampu = 0;
0005e1 93aa      	ST   -Y,R26
                 ;	menuSelect -> Y+1
                 ;	isSelect -> Y+0
0005e2 98c3      	CBI  0x18,3
                 ;count_btn = menuSelect;
0005e3 81e9      	LDD  R30,Y+1
0005e4 81fa      	LDD  R31,Y+1+1
0005e5 93e0 0182 	STS  _count_btn,R30
0005e7 93f0 0183 	STS  _count_btn+1,R31
                 ;if(!isSelect && !isChildSelect) {
0005e9 81e8      	LD   R30,Y
0005ea 30e0      	CPI  R30,0
0005eb f421      	BRNE _0x121
0005ec 91e0 0184 	LDS  R30,_isChildSelect
0005ee 30e0      	CPI  R30,0
0005ef f009      	BREQ _0x122
                 _0x121:
0005f0 c006      	RJMP _0x120
                 _0x122:
                 ;lcd_clear();
0005f1 940e 0ce9 	CALL SUBOPT_0x2B
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Menu");
                +
0005f3 eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
0005f4 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
0005f5 940e 0b82 	CALL _lcd_putsf
                 ;switch (menuSelect) {
                 _0x120:
0005f7 81e9      	LDD  R30,Y+1
0005f8 81fa      	LDD  R31,Y+1+1
                 ;case 0: // Calibration
0005f9 9730      	SBIW R30,0
0005fa f469      	BRNE _0x126
                 ;if(isSelect) { calibration(); break; }
0005fb 81e8      	LD   R30,Y
0005fc 30e0      	CPI  R30,0
0005fd f011      	BREQ _0x127
0005fe d0b4      	RCALL _calibration
0005ff c08e      	RJMP _0x125
                 ;lcd_gotoxy(0, 1);
                 _0x127:
000600 e0e0      	LDI  R30,LOW(0)
000601 940e 0c92 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Kalibrasi");
                +
000603 eea9     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
000604 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
000605 940e 0b82 	CALL _lcd_putsf
                 ;break;
000607 c086      	RJMP _0x125
                 ;case 1: // Run bot
                 _0x126:
000608 30e1      	CPI  R30,LOW(0x1)
000609 e0a0      	LDI  R26,HIGH(0x1)
00060a 07fa      	CPC  R31,R26
00060b f489      	BRNE _0x128
                 ;if(isSelect || isChildSelect) { runBot(); break; }
00060c 81e8      	LD   R30,Y
00060d 30e0      	CPI  R30,0
00060e f421      	BRNE _0x12A
00060f 91e0 0184 	LDS  R30,_isChildSelect
000611 30e0      	CPI  R30,0
000612 f011      	BREQ _0x129
                 _0x12A:
000613 d07c      	RCALL _runBot
000614 c079      	RJMP _0x125
                 ;lcd_gotoxy(0, 1);
                 _0x129:
000615 e0e0      	LDI  R30,LOW(0)
000616 940e 0c92 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Run Bot");
                +
000618 efa3     +LDI R26 , LOW ( 2 * _0x0 + ( 115 ) )
000619 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 115 ) )
                 	__POINTW2FN _0x0,115
00061a 940e 0b82 	CALL _lcd_putsf
                 ;break;
00061c c071      	RJMP _0x125
                 ;case 2: // Sensor Warna
                 _0x128:
00061d 30e2      	CPI  R30,LOW(0x2)
00061e e0a0      	LDI  R26,HIGH(0x2)
00061f 07fa      	CPC  R31,R26
000620 f469      	BRNE _0x12C
                 ;if(isSelect) { sens_warna(); break; }
000621 81e8      	LD   R30,Y
000622 30e0      	CPI  R30,0
000623 f011      	BREQ _0x12D
000624 d10e      	RCALL _sens_warna
000625 c068      	RJMP _0x125
                 ;lcd_gotoxy(0, 1);
                 _0x12D:
000626 e0e0      	LDI  R30,LOW(0)
000627 940e 0c92 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Sens Warna");
                +
000629 efab     +LDI R26 , LOW ( 2 * _0x0 + ( 123 ) )
00062a e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 123 ) )
                 	__POINTW2FN _0x0,123
00062b 940e 0b82 	CALL _lcd_putsf
                 ;break;
00062d c060      	RJMP _0x125
                 ;case 3: // Map Select
                 _0x12C:
00062e 30e3      	CPI  R30,LOW(0x3)
00062f e0a0      	LDI  R26,HIGH(0x3)
000630 07fa      	CPC  R31,R26
000631 f499      	BRNE _0x12E
                 ;if(isSelect || isChildSelect) { map_select(map_biru); break; }
000632 81e8      	LD   R30,Y
000633 30e0      	CPI  R30,0
000634 f421      	BRNE _0x130
000635 91e0 0184 	LDS  R30,_isChildSelect
000637 30e0      	CPI  R30,0
000638 f021      	BREQ _0x12F
                 _0x130:
000639 e0a0      	LDI  R26,LOW(0)
00063a e0b0      	LDI  R27,0
00063b d07f      	RCALL _map_select
00063c c051      	RJMP _0x125
                 ;lcd_gotoxy(0, 1);
                 _0x12F:
00063d e0e0      	LDI  R30,LOW(0)
00063e 940e 0c92 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Map Biru");
                +
000640 e0a6     +LDI R26 , LOW ( 2 * _0x0 + ( 134 ) )
000641 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 134 ) )
                 	__POINTW2FN _0x0,134
000642 940e 0b82 	CALL _lcd_putsf
                 ;break;
000644 c049      	RJMP _0x125
                 ;case 4: // Map Select
                 _0x12E:
000645 30e4      	CPI  R30,LOW(0x4)
000646 e0a0      	LDI  R26,HIGH(0x4)
000647 07fa      	CPC  R31,R26
000648 f499      	BRNE _0x132
                 ;if(isSelect || isChildSelect) { map_select(map_merah); break; }
000649 81e8      	LD   R30,Y
00064a 30e0      	CPI  R30,0
00064b f421      	BRNE _0x134
00064c 91e0 0184 	LDS  R30,_isChildSelect
00064e 30e0      	CPI  R30,0
00064f f021      	BREQ _0x133
                 _0x134:
000650 e0a1      	LDI  R26,LOW(1)
000651 e0b0      	LDI  R27,0
000652 d068      	RCALL _map_select
000653 c03a      	RJMP _0x125
                 ;lcd_gotoxy(0, 1);
                 _0x133:
000654 e0e0      	LDI  R30,LOW(0)
000655 940e 0c92 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Map Merah");
                +
000657 e0af     +LDI R26 , LOW ( 2 * _0x0 + ( 143 ) )
000658 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 143 ) )
                 	__POINTW2FN _0x0,143
000659 940e 0b82 	CALL _lcd_putsf
                 ;break;
00065b c032      	RJMP _0x125
                 ;case 5: // Test Motor
                 _0x132:
00065c 30e5      	CPI  R30,LOW(0x5)
00065d e0a0      	LDI  R26,HIGH(0x5)
00065e 07fa      	CPC  R31,R26
00065f f469      	BRNE _0x136
                 ;if(isSelect) { test_motor(); break; }
000660 81e8      	LD   R30,Y
000661 30e0      	CPI  R30,0
000662 f011      	BREQ _0x137
000663 d06d      	RCALL _test_motor
000664 c029      	RJMP _0x125
                 ;lcd_gotoxy(0, 1);
                 _0x137:
000665 e0e0      	LDI  R30,LOW(0)
000666 940e 0c92 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Motor");
                +
000668 e1a9     +LDI R26 , LOW ( 2 * _0x0 + ( 153 ) )
000669 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 153 ) )
                 	__POINTW2FN _0x0,153
00066a 940e 0b82 	CALL _lcd_putsf
                 ;break;
00066c c021      	RJMP _0x125
                 ;case 6: // Test tombol
                 _0x136:
00066d 30e6      	CPI  R30,LOW(0x6)
00066e e0a0      	LDI  R26,HIGH(0x6)
00066f 07fa      	CPC  R31,R26
000670 f469      	BRNE _0x138
                 ;if(isSelect) { test_tombol(); break; }
000671 81e8      	LD   R30,Y
000672 30e0      	CPI  R30,0
000673 f011      	BREQ _0x139
000674 d088      	RCALL _test_tombol
000675 c018      	RJMP _0x125
                 ;lcd_gotoxy(0, 1);
                 _0x139:
000676 e0e0      	LDI  R30,LOW(0)
000677 940e 0c92 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Button");
                +
000679 e1af     +LDI R26 , LOW ( 2 * _0x0 + ( 159 ) )
00067a e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 159 ) )
                 	__POINTW2FN _0x0,159
00067b 940e 0b82 	CALL _lcd_putsf
                 ;break;
00067d c010      	RJMP _0x125
                 ;case 7: // Test Capit
                 _0x138:
00067e 30e7      	CPI  R30,LOW(0x7)
00067f e0a0      	LDI  R26,HIGH(0x7)
000680 07fa      	CPC  R31,R26
000681 f461      	BRNE _0x13C
                 ;if(isSelect) { test_capit(); break; }
000682 81e8      	LD   R30,Y
000683 30e0      	CPI  R30,0
000684 f011      	BREQ _0x13B
000685 d0d7      	RCALL _test_capit
000686 c007      	RJMP _0x125
                 ;lcd_gotoxy(0, 1);
                 _0x13B:
000687 e0e0      	LDI  R30,LOW(0)
000688 940e 0c92 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Capit");
                +
00068a e2a6     +LDI R26 , LOW ( 2 * _0x0 + ( 166 ) )
00068b e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 166 ) )
                 	__POINTW2FN _0x0,166
00068c 940e 0b82 	CALL _lcd_putsf
                 ;break;
                 ;default:
                 _0x13C:
                 ;break;
                 _0x125:
00068e 940c 0b93 	JMP  _0x20C0003
                 ; .FEND
                 ;void runBot() {
                 _runBot:
                 ; .FSTART _runBot
                 ;if(!isChildSelect) {
000690 91e0 0184 	LDS  R30,_isChildSelect
000692 30e0      	CPI  R30,0
000693 f471      	BRNE _0x13D
                 ;lcd_clear();
000694 940e 0ce9 	CALL SUBOPT_0x2B
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Run Bot");
                +
000696 efa3     +LDI R26 , LOW ( 2 * _0x0 + ( 115 ) )
000697 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 115 ) )
                 	__POINTW2FN _0x0,115
000698 940e 0ced 	CALL SUBOPT_0x2C
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Click 2 to start");
                +
00069a e2ac     +LDI R26 , LOW ( 2 * _0x0 + ( 172 ) )
00069b e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 172 ) )
                 	__POINTW2FN _0x0,172
00069c 940e 0b82 	CALL _lcd_putsf
                 ;isChildSelect = true;
00069e e0e1      	LDI  R30,LOW(1)
00069f 93e0 0184 	STS  _isChildSelect,R30
                 ;} else if(isChildSelect) {
0006a1 c010      	RJMP _0x13E
                 _0x13D:
0006a2 91e0 0184 	LDS  R30,_isChildSelect
0006a4 30e0      	CPI  R30,0
0006a5 f061      	BREQ _0x13F
                 ;lcd_clear();
0006a6 940e 0b37 	CALL _lcd_clear
                 ;lcd_gotoxy(0, 1);
0006a8 e0e0      	LDI  R30,LOW(0)
0006a9 940e 0c92 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Running...");
                +
0006ab e3ad     +LDI R26 , LOW ( 2 * _0x0 + ( 189 ) )
0006ac e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 189 ) )
                 	__POINTW2FN _0x0,189
0006ad 940e 0b82 	CALL _lcd_putsf
                 ;Program_Jalan();
0006af de17      	RCALL _Program_Jalan
                 ;isChildSelect = false;
0006b0 940e 0cf1 	CALL SUBOPT_0x2D
                 ;changeMenu(0, false);
                 _0x13F:
                 _0x13E:
0006b2 9508      	RET
                 ; .FEND
                 ;void calibration() {
                 _calibration:
                 ; .FSTART _calibration
                 ;scan_garis();
0006b3 db63      	RCALL _scan_garis
                 ;delay(1000);
0006b4 940e 0cfb 	CALL SUBOPT_0x2E
                 ;scan_back();
0006b6 db82      	RCALL _scan_back
                 ;delay(1000);
0006b7 940e 0cfb 	CALL SUBOPT_0x2E
                 ;hit_tengah();
0006b9 dba1      	RCALL _hit_tengah
                 ;isChildSelect = false;
0006ba c03c      	RJMP _0x20C0007
                 ;changeMenu(0, false);
                 ; .FEND
                 ;void map_select(int map_num) {
                 _map_select:
                 ; .FSTART _map_select
                 ;if(map_num != 0 && map_num != 1) map_num = 0;
0006bb 93ba      	ST   -Y,R27
0006bc 93aa      	ST   -Y,R26
                 ;	map_num -> Y+0
0006bd 81a8      	LD   R26,Y
0006be 81b9      	LDD  R27,Y+1
0006bf 9710      	SBIW R26,0
0006c0 f011      	BREQ _0x141
0006c1 9711      	SBIW R26,1
0006c2 f409      	BRNE _0x142
                 _0x141:
0006c3 c003      	RJMP _0x140
                 _0x142:
0006c4 e0e0      	LDI  R30,LOW(0)
0006c5 83e8      	STD  Y+0,R30
0006c6 83e9      	STD  Y+0+1,R30
                 ;mapMirror = map_num;
                 _0x140:
0006c7 81e8      	LD   R30,Y
0006c8 81f9      	LDD  R31,Y+1
0006c9 e2aa      	LDI  R26,LOW(_mapMirror)
0006ca e0b0      	LDI  R27,HIGH(_mapMirror)
0006cb 940e 0dde 	CALL __EEPROMWRW
                 ;isChildSelect = false;
0006cd 940e 0cf1 	CALL SUBOPT_0x2D
                 ;changeMenu(0, false);
0006cf 940c 0b35 	JMP  _0x20C0004
                 ; .FEND
                 ;void test_motor()
                 _test_motor:
                 ; .FSTART _test_motor
                 ;lcd_clear();
0006d1 940e 0ce9 	CALL SUBOPT_0x2B
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Motor");
                +
0006d3 e4a8     +LDI R26 , LOW ( 2 * _0x0 + ( 200 ) )
0006d4 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 200 ) )
                 	__POINTW2FN _0x0,200
0006d5 940e 0ced 	CALL SUBOPT_0x2C
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+1000 +1000");
                +
0006d7 e5a3     +LDI R26 , LOW ( 2 * _0x0 + ( 211 ) )
0006d8 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 211 ) )
                 	__POINTW2FN _0x0,211
0006d9 940e 0cff 	CALL SUBOPT_0x2F
                 ;setMotor(1000, 1000);
0006db 940e 0d06 	CALL SUBOPT_0x30
                 ;delay_ms(2000);
                 ;lcd_gotoxy(0, 1);
0006dd e0e0      	LDI  R30,LOW(0)
0006de 940e 0c92 	CALL SUBOPT_0x1C
                 ;lcd_putsf("-1000 -1000");
                +
0006e0 e5af     +LDI R26 , LOW ( 2 * _0x0 + ( 223 ) )
0006e1 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 223 ) )
                 	__POINTW2FN _0x0,223
0006e2 940e 0d0e 	CALL SUBOPT_0x31
                 ;setMotor(-1000, -1000);
0006e4 940e 0d15 	CALL SUBOPT_0x32
                 ;delay_ms(2000);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+1000 -1000");
                +
0006e6 e6ab     +LDI R26 , LOW ( 2 * _0x0 + ( 235 ) )
0006e7 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 235 ) )
                 	__POINTW2FN _0x0,235
0006e8 940e 0cff 	CALL SUBOPT_0x2F
                 ;setMotor(1000, -1000);
0006ea 940e 0d15 	CALL SUBOPT_0x32
                 ;delay_ms(2000);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("-1000 +1000");
                +
0006ec e7a7     +LDI R26 , LOW ( 2 * _0x0 + ( 247 ) )
0006ed e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 247 ) )
                 	__POINTW2FN _0x0,247
0006ee 940e 0d0e 	CALL SUBOPT_0x31
                 ;setMotor(-1000, 1000);
0006f0 940e 0d06 	CALL SUBOPT_0x30
                 ;delay_ms(2000);
                 ;rem(1000);
0006f2 eea8      	LDI  R26,LOW(1000)
0006f3 e0b3      	LDI  R27,HIGH(1000)
0006f4 dbe3      	RCALL _rem
                 ;lcd_clear();
0006f5 940e 0ce9 	CALL SUBOPT_0x2B
                 ;lcd_gotoxy(0, 0);
                 ;isChildSelect = false;
                 _0x20C0007:
0006f7 e0e0      	LDI  R30,LOW(0)
0006f8 93e0 0184 	STS  _isChildSelect,R30
                 ;changeMenu(0, false);
0006fa 940e 0d1f 	CALL SUBOPT_0x33
0006fc 9508      	RET
                 ; .FEND
                 ;void test_tombol()
                 _test_tombol:
                 ; .FSTART _test_tombol
                 ;lcd_gotoxy(0, 1);
0006fd e0e0      	LDI  R30,LOW(0)
0006fe 940e 0c92 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Click 1 to exit");
                +
000700 e8a3     +LDI R26 , LOW ( 2 * _0x0 + ( 259 ) )
000701 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 259 ) )
                 	__POINTW2FN _0x0,259
000702 940e 0b82 	CALL _lcd_putsf
                 ;isTestTombol = true;
000704 e0e1      	LDI  R30,LOW(1)
000705 93e0 0185 	STS  _isTestTombol,R30
                 ;while (1)
                 _0x143:
                 ;if (!isTestTombol) break;
000707 91e0 0185 	LDS  R30,_isTestTombol
000709 30e0      	CPI  R30,0
00070a f139      	BREQ _0x145
                 ;if ((t1 == 0))
00070b 9998      	SBIC 0x13,0
00070c c009      	RJMP _0x147
                 ;lcd_gotoxy(0, 0);
00070d e0e0      	LDI  R30,LOW(0)
00070e 940e 0bf4 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 1     ");
                +
000710 e9a3     +LDI R26 , LOW ( 2 * _0x0 + ( 275 ) )
000711 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 275 ) )
                 	__POINTW2FN _0x0,275
000712 940e 0d26 	CALL SUBOPT_0x34
                 ;isTestTombol = false;
                 ;delay(500);
                 ;changeMenu(0, false);
000714 940e 0d1f 	CALL SUBOPT_0x33
                 ;if (t2 == 0)
                 _0x147:
000716 9999      	SBIC 0x13,1
000717 c007      	RJMP _0x148
                 ;lcd_gotoxy(0, 0);
000718 e0e0      	LDI  R30,LOW(0)
000719 940e 0bf4 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 2     ");
                +
00071b eaa3     +LDI R26 , LOW ( 2 * _0x0 + ( 291 ) )
00071c e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 291 ) )
                 	__POINTW2FN _0x0,291
00071d 940e 0b82 	CALL _lcd_putsf
                 ;if (t3 == 0)
                 _0x148:
00071f 999a      	SBIC 0x13,2
000720 c007      	RJMP _0x149
                 ;lcd_gotoxy(0, 0);
000721 e0e0      	LDI  R30,LOW(0)
000722 940e 0bf4 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 3     ");
                +
000724 eba3     +LDI R26 , LOW ( 2 * _0x0 + ( 307 ) )
000725 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 307 ) )
                 	__POINTW2FN _0x0,307
000726 940e 0b82 	CALL _lcd_putsf
                 ;if (t4 == 0)
                 _0x149:
000728 999b      	SBIC 0x13,3
000729 c007      	RJMP _0x14A
                 ;lcd_gotoxy(0, 0);
00072a e0e0      	LDI  R30,LOW(0)
00072b 940e 0bf4 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 4     ");
                +
00072d eca3     +LDI R26 , LOW ( 2 * _0x0 + ( 323 ) )
00072e e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 323 ) )
                 	__POINTW2FN _0x0,323
00072f 940e 0b82 	CALL _lcd_putsf
                 _0x14A:
000731 cfd5      	RJMP _0x143
                 _0x145:
000732 9508      	RET
                 ; .FEND
                 ;void sens_warna()
                 _sens_warna:
                 ; .FSTART _sens_warna
                 ;lcd_clear();
000733 940e 0ce9 	CALL SUBOPT_0x2B
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Sens Warna");
                +
000735 efab     +LDI R26 , LOW ( 2 * _0x0 + ( 123 ) )
000736 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 123 ) )
                 	__POINTW2FN _0x0,123
000737 940e 0ced 	CALL SUBOPT_0x2C
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Warna:");
                +
000739 eda3     +LDI R26 , LOW ( 2 * _0x0 + ( 339 ) )
00073a e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 339 ) )
                 	__POINTW2FN _0x0,339
00073b 940e 0b82 	CALL _lcd_putsf
                 ;isTestTombol = true;
00073d e0e1      	LDI  R30,LOW(1)
00073e 93e0 0185 	STS  _isTestTombol,R30
                 ;bawah_lepas();
000740 dd6a      	RCALL _bawah_lepas
                 ;delay(200);
000741 940e 0d2f 	CALL SUBOPT_0x35
                 ;ambil(20);
000743 e1a4      	LDI  R26,LOW(20)
000744 e0b0      	LDI  R27,0
000745 dd59      	RCALL _ambil
                 ;while (1)
                 _0x14B:
                 ;bacawarna();
000746 dd69      	RCALL _bacawarna
                 ;if (!isTestTombol) { lcd_clear(); capit_lepas; changeMenu(0, false); break; }
000747 91e0 0185 	LDS  R30,_isTestTombol
000749 30e0      	CPI  R30,0
00074a f439      	BRNE _0x14E
00074b 940e 0b37 	CALL _lcd_clear
00074d eee6      	LDI  R30,LOW(230)
00074e 2ede      	MOV  R13,R30
00074f 940e 0d1f 	CALL SUBOPT_0x33
000751 c00a      	RJMP _0x14D
                 ;if ((t1 == 0))
                 _0x14E:
000752 9998      	SBIC 0x13,0
000753 c007      	RJMP _0x14F
                 ;lcd_gotoxy(0, 0);
000754 e0e0      	LDI  R30,LOW(0)
000755 940e 0bf4 	CALL SUBOPT_0x3
                 ;lcd_putsf("Exiting...");
                +
000757 edaa     +LDI R26 , LOW ( 2 * _0x0 + ( 346 ) )
000758 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 346 ) )
                 	__POINTW2FN _0x0,346
000759 940e 0d26 	CALL SUBOPT_0x34
                 ;isTestTombol = false;
                 ;delay(500);
                 _0x14F:
00075b cfea      	RJMP _0x14B
                 _0x14D:
00075c 9508      	RET
                 ; .FEND
                 ;void test_capit()
                 _test_capit:
                 ; .FSTART _test_capit
                 ;lcd_clear();
00075d 940e 0ce9 	CALL SUBOPT_0x2B
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Capit");
                +
00075f eea5     +LDI R26 , LOW ( 2 * _0x0 + ( 357 ) )
000760 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 357 ) )
                 	__POINTW2FN _0x0,357
000761 940e 0ced 	CALL SUBOPT_0x2C
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Capit: > <");
                +
000763 efa0     +LDI R26 , LOW ( 2 * _0x0 + ( 368 ) )
000764 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 368 ) )
                 	__POINTW2FN _0x0,368
000765 940e 0b82 	CALL _lcd_putsf
                 ;capit_ambil;
000767 eeed      	LDI  R30,LOW(237)
000768 2ede      	MOV  R13,R30
                 ;delay(500);
000769 efa4      	LDI  R26,LOW(500)
00076a e0b1      	LDI  R27,HIGH(500)
00076b da2a      	RCALL _delay
                 ;lcd_gotoxy(0, 1);
00076c e0e0      	LDI  R30,LOW(0)
00076d 940e 0c92 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Capit: < >");
                +
00076f efab     +LDI R26 , LOW ( 2 * _0x0 + ( 379 ) )
000770 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 379 ) )
                 	__POINTW2FN _0x0,379
000771 940e 0b82 	CALL _lcd_putsf
                 ;capit_lepas;
000773 eee6      	LDI  R30,LOW(230)
000774 2ede      	MOV  R13,R30
                 ;delay(1000);
000775 940e 0cfb 	CALL SUBOPT_0x2E
                 ;lcd_gotoxy(0, 1);
000777 e0e0      	LDI  R30,LOW(0)
000778 940e 0c92 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Capit: \\/");
                +
00077a e0a6     +LDI R26 , LOW ( 2 * _0x0 + ( 390 ) )
00077b e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 390 ) )
                 	__POINTW2FN _0x0,390
00077c 940e 0b82 	CALL _lcd_putsf
                 ;lengan_bawah;
00077e efe0      	LDI  R30,LOW(240)
00077f 2ece      	MOV  R12,R30
                 ;delay(1000);
000780 940e 0cfb 	CALL SUBOPT_0x2E
                 ;lcd_gotoxy(0, 1);
000782 e0e0      	LDI  R30,LOW(0)
000783 940e 0c92 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Capit: /\\");
                +
000785 e1a0     +LDI R26 , LOW ( 2 * _0x0 + ( 400 ) )
000786 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 400 ) )
                 	__POINTW2FN _0x0,400
000787 940e 0b82 	CALL _lcd_putsf
                 ;lengan_atas;
000789 eeea      	LDI  R30,LOW(234)
00078a 2ece      	MOV  R12,R30
                 ;delay(1000);
00078b 940e 0cfb 	CALL SUBOPT_0x2E
00078d 9508      	RET
                 ; .FEND
                 ;void tepuk_tangan() {
                 ;lcd_clear();
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Hold 1 to exit");
                 ;lcd_gotoxy(0, 0);
                 ;while (1)
                 ;lcd_putsf("XD");
                 ;if(t1 == 0) break;
                 ;capit_lepas;
                 ;if(t1 == 0) break;
                 ;delay(500);
                 ;if(t1 == 0) break;
                 ;capit_ambil;
                 ;if(t1 == 0) break;
                 ;delay(500);
                 ;if(t1 == 0) break;
                 ;void display_map() {
                 _display_map:
                 ; .FSTART _display_map
                 ;cek_sensor();
00078e da58      	RCALL _cek_sensor
                 ;lcd_gotoxy(7, 0);
00078f e0e7      	LDI  R30,LOW(7)
000790 940e 0bf4 	CALL SUBOPT_0x3
                 ;sprintf(buff, "%d", mapMirror);
000792 940e 0bf8 	CALL SUBOPT_0x4
                +
000794 e8ec     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
000795 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
000796 93fa      	ST   -Y,R31
000797 93ea      	ST   -Y,R30
000798 e2aa      	LDI  R26,LOW(_mapMirror)
000799 e0b0      	LDI  R27,HIGH(_mapMirror)
00079a 940e 0dce 	CALL __EEPROMRDW
00079c 940e 0c3e 	CALL SUBOPT_0xE
00079e e084      	LDI  R24,4
00079f 940e 0a84 	CALL _sprintf
0007a1 9628      	ADIW R28,8
                 ;lcd_puts(buff);
0007a2 c03c      	RJMP _0x20C0006
                 ; .FEND
                 ;void display_checkpoint() {
                 _display_checkpoint:
                 ; .FSTART _display_checkpoint
                 ;if(pointPos != 'O' && pointPos != 'A' && pointPos != 'B' && pointPos != 'Z') poi ...
0007a3 940e 0c96 	CALL SUBOPT_0x1D
0007a5 34ef      	CPI  R30,LOW(0x4F)
0007a6 f031      	BREQ _0x159
0007a7 34e1      	CPI  R30,LOW(0x41)
0007a8 f021      	BREQ _0x159
0007a9 34e2      	CPI  R30,LOW(0x42)
0007aa f011      	BREQ _0x159
0007ab 35ea      	CPI  R30,LOW(0x5A)
0007ac f409      	BRNE _0x15A
                 _0x159:
0007ad c005      	RJMP _0x158
                 _0x15A:
0007ae e2ac      	LDI  R26,LOW(_pointPos)
0007af e0b0      	LDI  R27,HIGH(_pointPos)
0007b0 e4ef      	LDI  R30,LOW(79)
0007b1 940e 0de6 	CALL __EEPROMWRB
                 ;if(ringPos != 1 && ringPos != 2 && ringPos != 3 && ringPos != 4) ringPos = 1;
                 _0x158:
0007b3 940e 0cb4 	CALL SUBOPT_0x23
0007b5 01bf      	MOVW R22,R30
0007b6 010f      	MOVW R0,R30
0007b7 01df      	MOVW R26,R30
0007b8 9731      	SBIW R30,1
0007b9 f059      	BREQ _0x15C
0007ba 01fd      	MOVW R30,R26
0007bb 9732      	SBIW R30,2
0007bc f041      	BREQ _0x15C
0007bd 01f0      	MOVW R30,R0
0007be 9733      	SBIW R30,3
0007bf f029      	BREQ _0x15C
0007c0 01fb      	MOVW R30,R22
0007c1 30e4      	CPI  R30,LOW(0x4)
0007c2 e0a0      	LDI  R26,HIGH(0x4)
0007c3 07fa      	CPC  R31,R26
0007c4 f409      	BRNE _0x15D
                 _0x15C:
0007c5 c004      	RJMP _0x15B
                 _0x15D:
0007c6 e2ad      	LDI  R26,LOW(_ringPos)
0007c7 e0b0      	LDI  R27,HIGH(_ringPos)
0007c8 940e 0caf 	CALL SUBOPT_0x22
                 ;lcd_gotoxy(10, 1);
                 _0x15B:
0007ca e0ea      	LDI  R30,LOW(10)
0007cb 940e 0c92 	CALL SUBOPT_0x1C
                 ;sprintf(buff, "%c%d", pointPos, ringPos);
0007cd 940e 0bf8 	CALL SUBOPT_0x4
                +
0007cf e2ec     +LDI R30 , LOW ( 2 * _0x0 + ( 428 ) )
0007d0 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 428 ) )
                 	__POINTW1FN _0x0,428
0007d1 93fa      	ST   -Y,R31
0007d2 93ea      	ST   -Y,R30
0007d3 940e 0c96 	CALL SUBOPT_0x1D
0007d5 940e 0bfd 	CALL SUBOPT_0x5
0007d7 940e 0cb4 	CALL SUBOPT_0x23
0007d9 940e 0c3e 	CALL SUBOPT_0xE
0007db e088      	LDI  R24,8
0007dc 940e 0a84 	CALL _sprintf
0007de 962c      	ADIW R28,12
                 ;lcd_puts(buff);
                 _0x20C0006:
0007df e6a0      	LDI  R26,LOW(_buff)
0007e0 e0b1      	LDI  R27,HIGH(_buff)
0007e1 940e 0b73 	CALL _lcd_puts
0007e3 9508      	RET
                 ; .FEND
                 ;void tes_sensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, "sensor:%d = %d  ", i, read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(100);
                 ;void tampil_count()
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", second);
                 ;lcd_puts(buff);
                 ;interrupt[TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0065 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0007e4 93aa      	ST   -Y,R26
0007e5 93ea      	ST   -Y,R30
0007e6 b7ef      	IN   R30,SREG
0007e7 93ea      	ST   -Y,R30
                 ; 0000 0066 TCNT0 = 0x96; // BE
0007e8 e9e6      	LDI  R30,LOW(150)
0007e9 bfe2      	OUT  0x32,R30
                 ; 0000 0067 a++;
0007ea 91e0 0181 	LDS  R30,_a
0007ec 5fef      	SUBI R30,-LOW(1)
0007ed 93e0 0181 	STS  _a,R30
                 ; 0000 0068 
                 ; 0000 0069 if (a <= pos_servo1)
0007ef 91a0 0181 	LDS  R26,_a
0007f1 16da      	CP   R13,R26
0007f2 f010      	BRLO _0x161
                 ; 0000 006A {
                 ; 0000 006B servo1 = 0;
0007f3 98ae      	CBI  0x15,6
                 ; 0000 006C }
                 ; 0000 006D else
0007f4 c001      	RJMP _0x164
                 _0x161:
                 ; 0000 006E {
                 ; 0000 006F servo1 = 1;
0007f5 9aae      	SBI  0x15,6
                 ; 0000 0070 }
                 _0x164:
                 ; 0000 0071 if (a <= pos_servo2)
0007f6 91a0 0181 	LDS  R26,_a
0007f8 16ca      	CP   R12,R26
0007f9 f010      	BRLO _0x167
                 ; 0000 0072 {
                 ; 0000 0073 servo2 = 0;
0007fa 98af      	CBI  0x15,7
                 ; 0000 0074 }
                 ; 0000 0075 else
0007fb c001      	RJMP _0x16A
                 _0x167:
                 ; 0000 0076 {
                 ; 0000 0077 servo2 = 1;
0007fc 9aaf      	SBI  0x15,7
                 ; 0000 0078 }
                 _0x16A:
                 ; 0000 0079 }
0007fd 91e9      	LD   R30,Y+
0007fe bfef      	OUT  SREG,R30
0007ff 91e9      	LD   R30,Y+
000800 91a9      	LD   R26,Y+
000801 9518      	RETI
                 ; .FEND
                 ;interrupt[TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 007D {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 007E // Place your code here
                 ; 0000 007F }
000802 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0082 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0083 // Declare your local variables here
                 ; 0000 0084 
                 ; 0000 0085 // Input/Output Ports initialization
                 ; 0000 0086 // Port A initialization
                 ; 0000 0087 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0088 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0089 PORTA=0x00;
000803 e0e0      	LDI  R30,LOW(0)
000804 bbeb      	OUT  0x1B,R30
                 ; 0000 008A DDRA=0x00;
000805 bbea      	OUT  0x1A,R30
                 ; 0000 008B 
                 ; 0000 008C // Port B initialization
                 ; 0000 008D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 008E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 008F PORTB=0x08;
000806 e0e8      	LDI  R30,LOW(8)
000807 bbe8      	OUT  0x18,R30
                 ; 0000 0090 DDRB=0Xff;//0x08;
000808 efef      	LDI  R30,LOW(255)
000809 bbe7      	OUT  0x17,R30
                 ; 0000 0091 
                 ; 0000 0092 // Port C initialization
                 ; 0000 0093 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0094 // State7=T State6=T State5=T State4=T State3=P State2=P State1=P State0=P
                 ; 0000 0095 PORTC=0xFF;
00080a bbe5      	OUT  0x15,R30
                 ; 0000 0096 DDRC=0xF0; //C0
00080b efe0      	LDI  R30,LOW(240)
00080c bbe4      	OUT  0x14,R30
                 ; 0000 0097 
                 ; 0000 0098 // Port D initialization
                 ; 0000 0099 // Func7=In Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 009A // State7=T State6=T State5=0 State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 009B PORTD=0x01;
00080d e0e1      	LDI  R30,LOW(1)
00080e bbe2      	OUT  0x12,R30
                 ; 0000 009C DDRD=0xFE; //3F
00080f efee      	LDI  R30,LOW(254)
000810 bbe1      	OUT  0x11,R30
                 ; 0000 009D 
                 ; 0000 009E // Timer/Counter 0 initialization
                 ; 0000 009F TCCR0=0x4A;
000811 e4ea      	LDI  R30,LOW(74)
000812 bfe3      	OUT  0x33,R30
                 ; 0000 00A0 TCNT0=0x96;
000813 e9e6      	LDI  R30,LOW(150)
000814 bfe2      	OUT  0x32,R30
                 ; 0000 00A1 OCR0=0x00;
000815 e0e0      	LDI  R30,LOW(0)
000816 bfec      	OUT  0x3C,R30
                 ; 0000 00A2 
                 ; 0000 00A3 // Timer/Counter 1 initialization
                 ; 0000 00A4 TCCR1A=0xA1;
000817 eae1      	LDI  R30,LOW(161)
000818 bdef      	OUT  0x2F,R30
                 ; 0000 00A5 TCCR1B=0x09;
000819 e0e9      	LDI  R30,LOW(9)
00081a bdee      	OUT  0x2E,R30
                 ; 0000 00A6 TCNT1H=0x00;
00081b e0e0      	LDI  R30,LOW(0)
00081c bded      	OUT  0x2D,R30
                 ; 0000 00A7 TCNT1L=0x00;
00081d bdec      	OUT  0x2C,R30
                 ; 0000 00A8 ICR1H=0x00;
00081e bde7      	OUT  0x27,R30
                 ; 0000 00A9 ICR1L=0x00;
00081f bde6      	OUT  0x26,R30
                 ; 0000 00AA OCR1AH=0x00;
000820 bdeb      	OUT  0x2B,R30
                 ; 0000 00AB OCR1AL=0x00;
000821 bdea      	OUT  0x2A,R30
                 ; 0000 00AC OCR1BH=0x00;
000822 bde9      	OUT  0x29,R30
                 ; 0000 00AD OCR1BL=0x00;
000823 bde8      	OUT  0x28,R30
                 ; 0000 00AE 
                 ; 0000 00AF // Timer/Counter 2 initialization
                 ; 0000 00B0 // Clock source: System Clock
                 ; 0000 00B1 // Clock value: Timer 2 Stopped
                 ; 0000 00B2 // Mode: Normal top=FFh
                 ; 0000 00B3 // OC2 output: Disconnected
                 ; 0000 00B4 ASSR=0x00;
000824 bde2      	OUT  0x22,R30
                 ; 0000 00B5 TCCR2=0x00;
000825 bde5      	OUT  0x25,R30
                 ; 0000 00B6 TCNT2=0x00;
000826 bde4      	OUT  0x24,R30
                 ; 0000 00B7 OCR2=0x00;
000827 bde3      	OUT  0x23,R30
                 ; 0000 00B8 
                 ; 0000 00B9 // External Interrupt(s) initialization
                 ; 0000 00BA // INT0: Off
                 ; 0000 00BB // INT1: Off
                 ; 0000 00BC // INT2: Off
                 ; 0000 00BD MCUCR=0x00;
000828 bfe5      	OUT  0x35,R30
                 ; 0000 00BE MCUCSR=0x00;
000829 bfe4      	OUT  0x34,R30
                 ; 0000 00BF 
                 ; 0000 00C0 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00C1 TIMSK=0x03;
00082a e0e3      	LDI  R30,LOW(3)
00082b bfe9      	OUT  0x39,R30
                 ; 0000 00C2 
                 ; 0000 00C3 // Analog Comparator initialization
                 ; 0000 00C4 // Analog Comparator: Off
                 ; 0000 00C5 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00C6 ACSR=0x80;
00082c e8e0      	LDI  R30,LOW(128)
00082d b9e8      	OUT  0x8,R30
                 ; 0000 00C7 SFIOR=0x00;
00082e e0e0      	LDI  R30,LOW(0)
00082f bfe0      	OUT  0x30,R30
                 ; 0000 00C8 
                 ; 0000 00C9 
                 ; 0000 00CA 
                 ; 0000 00CB MCUCR=0x00;
000830 bfe5      	OUT  0x35,R30
                 ; 0000 00CC MCUCSR=0x00;
000831 bfe4      	OUT  0x34,R30
                 ; 0000 00CD 
                 ; 0000 00CE ////USART, UNTUK KOMUNIKASI BLUETOOTH
                 ; 0000 00CF //UCSRA=0x00;
                 ; 0000 00D0 //UCSRB=0x18;
                 ; 0000 00D1 //UCSRC=0x86;
                 ; 0000 00D2 //UBRRH=0x00;
                 ; 0000 00D3 //UBRRL=0x47;
                 ; 0000 00D4 // USART initialization
                 ; 0000 00D5 // USART disabled
                 ; 0000 00D6 UCSRB=0x00;
000832 b9ea      	OUT  0xA,R30
                 ; 0000 00D7 
                 ; 0000 00D8 // ADC initialization
                 ; 0000 00D9 // ADC Clock frequency: 691.200 kHz
                 ; 0000 00DA // ADC Voltage Reference: AVCC pin
                 ; 0000 00DB // ADC Auto Trigger Source: None
                 ; 0000 00DC // Only the 8 most significant bits of
                 ; 0000 00DD // the AD conversion result are used
                 ; 0000 00DE ADMUX=ADC_VREF_TYPE & 0xff;
000833 e6e0      	LDI  R30,LOW(96)
000834 b9e7      	OUT  0x7,R30
                 ; 0000 00DF ADCSRA=0x84;
000835 e8e4      	LDI  R30,LOW(132)
000836 b9e6      	OUT  0x6,R30
                 ; 0000 00E0 //ADCSRA=0xA6;
                 ; 0000 00E1 SFIOR&=0x1F;
000837 b7e0      	IN   R30,0x30
000838 71ef      	ANDI R30,LOW(0x1F)
000839 bfe0      	OUT  0x30,R30
                 ; 0000 00E2 
                 ; 0000 00E3 // LCD module initialization
                 ; 0000 00E4 lcd_init(16); //
00083a e1a0      	LDI  R26,LOW(16)
00083b 940e 0ba6 	CALL _lcd_init
                 ; 0000 00E5 lcd_clear();  //
00083d 940e 0b37 	CALL _lcd_clear
                 ; 0000 00E6 lampu = 0;    //
00083f 98c3      	CBI  0x18,3
                 ; 0000 00E7 // k,b
                 ; 0000 00E8 lcd_gotoxy(0, 0);
000840 e0e0      	LDI  R30,LOW(0)
000841 940e 0bf4 	CALL SUBOPT_0x3
                 ; 0000 00E9 lcd_putsf("     LEGION     ");
                +
000843 e3a1     +LDI R26 , LOW ( 2 * _0x0 + ( 433 ) )
000844 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 433 ) )
                 	__POINTW2FN _0x0,433
000845 940e 0ced 	CALL SUBOPT_0x2C
                 ; 0000 00EA lcd_gotoxy(0, 1);
                 ; 0000 00EB lcd_putsf(" MAN 4 JOMBANG ");
                +
000847 e4a2     +LDI R26 , LOW ( 2 * _0x0 + ( 450 ) )
000848 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 450 ) )
                 	__POINTW2FN _0x0,450
000849 940e 0b82 	CALL _lcd_putsf
                 ; 0000 00EC delay_ms(500);
00084b efa4      	LDI  R26,LOW(500)
00084c e0b1      	LDI  R27,HIGH(500)
00084d 940e 0ee2 	CALL _delay_ms
                 ; 0000 00ED lcd_clear();
00084f 940e 0b37 	CALL _lcd_clear
                 ; 0000 00EE 
                 ; 0000 00EF // PROGRAM UTAMA
                 ; 0000 00F0 // Global enable interrupts
                 ; 0000 00F1 #asm("sei")
000851 9478      	SEI
                 ; 0000 00F2 lengan_atas;
000852 eeea      	LDI  R30,LOW(234)
000853 2ece      	MOV  R12,R30
                 ; 0000 00F3 capit_lepas;
000854 eee6      	LDI  R30,LOW(230)
000855 2ede      	MOV  R13,R30
                 ; 0000 00F4 
                 ; 0000 00F5 /// mapMirror = 0 - map/lintasan bagian biru
                 ; 0000 00F6 /// mapMirror = 1 - map/lintasan bagian merah
                 ; 0000 00F7 if(mapMirror != map_biru && mapMirror != map_merah) mapMirror = map_biru;
000856 e2aa      	LDI  R26,LOW(_mapMirror)
000857 e0b0      	LDI  R27,HIGH(_mapMirror)
000858 940e 0dce 	CALL __EEPROMRDW
00085a 9730      	SBIW R30,0
00085b f021      	BREQ _0x170
00085c 30e1      	CPI  R30,LOW(0x1)
00085d e0a0      	LDI  R26,HIGH(0x1)
00085e 07fa      	CPC  R31,R26
00085f f409      	BRNE _0x171
                 _0x170:
000860 c006      	RJMP _0x16F
                 _0x171:
000861 e2aa      	LDI  R26,LOW(_mapMirror)
000862 e0b0      	LDI  R27,HIGH(_mapMirror)
000863 e0e0      	LDI  R30,LOW(0)
000864 e0f0      	LDI  R31,HIGH(0)
000865 940e 0dde 	CALL __EEPROMWRW
                 ; 0000 00F8 
                 ; 0000 00F9 lcd_clear();
                 _0x16F:
000867 940e 0ce9 	CALL SUBOPT_0x2B
                 ; 0000 00FA lcd_gotoxy(0, 0);
                 ; 0000 00FB lcd_putsf("Menu");
                +
000869 eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
00086a e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
00086b 940e 0ced 	CALL SUBOPT_0x2C
                 ; 0000 00FC lcd_gotoxy(0, 1);
                 ; 0000 00FD lcd_putsf("Kalibrasi");
                +
00086d eea9     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
00086e e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
00086f 940e 0b82 	CALL _lcd_putsf
                 ; 0000 00FE 
                 ; 0000 00FF while(1) {
                 _0x172:
                 ; 0000 0100 if(!isChildSelect) {
000871 91e0 0184 	LDS  R30,_isChildSelect
000873 30e0      	CPI  R30,0
000874 f421      	BRNE _0x175
                 ; 0000 0101 display_sensor();
000875 d974      	RCALL _display_sensor
                 ; 0000 0102 bacawarna();
000876 dc39      	RCALL _bacawarna
                 ; 0000 0103 display_map();
000877 df16      	RCALL _display_map
                 ; 0000 0104 display_checkpoint();
000878 df2a      	RCALL _display_checkpoint
                 ; 0000 0105 }
                 ; 0000 0106 
                 ; 0000 0107 if((t1 == 0)) {
                 _0x175:
000879 9998      	SBIC 0x13,0
00087a c019      	RJMP _0x176
                 ; 0000 0108 
                 ; 0000 0109 if(!isChildSelect) count_btn ++;
00087b 91e0 0184 	LDS  R30,_isChildSelect
00087d 30e0      	CPI  R30,0
00087e f421      	BRNE _0x177
00087f e8a2      	LDI  R26,LOW(_count_btn)
000880 e0b1      	LDI  R27,HIGH(_count_btn)
000881 940e 0d33 	CALL SUBOPT_0x36
                 ; 0000 010A if(count_btn >= 8) count_btn = 0;
                 _0x177:
000883 91a0 0182 	LDS  R26,_count_btn
000885 91b0 0183 	LDS  R27,_count_btn+1
000887 9718      	SBIW R26,8
000888 f02c      	BRLT _0x178
000889 e0e0      	LDI  R30,LOW(0)
00088a 93e0 0182 	STS  _count_btn,R30
00088c 93e0 0183 	STS  _count_btn+1,R30
                 ; 0000 010B delay(200);
                 _0x178:
00088e 940e 0d2f 	CALL SUBOPT_0x35
                 ; 0000 010C changeMenu(count_btn, false);
000890 940e 0d39 	CALL SUBOPT_0x37
000892 e0a0      	LDI  R26,LOW(0)
000893 dd4d      	RCALL _changeMenu
                 ; 0000 010D }
                 ; 0000 010E if((t2 == 0)) {
                 _0x176:
000894 9999      	SBIC 0x13,1
000895 c006      	RJMP _0x179
                 ; 0000 010F changeMenu(count_btn, true);
000896 940e 0d39 	CALL SUBOPT_0x37
000898 e0a1      	LDI  R26,LOW(1)
000899 dd47      	RCALL _changeMenu
                 ; 0000 0110 delay(200);
00089a 940e 0d2f 	CALL SUBOPT_0x35
                 ; 0000 0111 }
                 ; 0000 0112 if((t3 == 0)) {
                 _0x179:
00089c 999a      	SBIC 0x13,2
00089d c037      	RJMP _0x17A
                 ; 0000 0113 if(!ringPos) {
00089e 940e 0cb4 	CALL SUBOPT_0x23
0008a0 9730      	SBIW R30,0
0008a1 f419      	BRNE _0x17B
                 ; 0000 0114 ringPos = 1;
0008a2 940e 0d40 	CALL SUBOPT_0x38
0008a4 c005      	RJMP _0x198
                 ; 0000 0115 } else {
                 _0x17B:
                 ; 0000 0116 ringPos += 1;
0008a5 940e 0cb4 	CALL SUBOPT_0x23
0008a7 9631      	ADIW R30,1
0008a8 e2ad      	LDI  R26,LOW(_ringPos)
0008a9 e0b0      	LDI  R27,HIGH(_ringPos)
                 _0x198:
0008aa 940e 0dde 	CALL __EEPROMWRW
                 ; 0000 0117 }
                 ; 0000 0118 
                 ; 0000 0119 if((ringPos > 2) && (pointPos == 'O')) {
0008ac 940e 0cb4 	CALL SUBOPT_0x23
0008ae 9733      	SBIW R30,3
0008af f024      	BRLT _0x17E
0008b0 940e 0c96 	CALL SUBOPT_0x1D
0008b2 34ef      	CPI  R30,LOW(0x4F)
0008b3 f009      	BREQ _0x17F
                 _0x17E:
0008b4 c003      	RJMP _0x17D
                 _0x17F:
                 ; 0000 011A ringPos = 1;
0008b5 940e 0d40 	CALL SUBOPT_0x38
0008b7 c019      	RJMP _0x199
                 ; 0000 011B } else if((ringPos > 3) && (pointPos != 'Z')) {
                 _0x17D:
0008b8 940e 0cb4 	CALL SUBOPT_0x23
0008ba 9734      	SBIW R30,4
0008bb f024      	BRLT _0x182
0008bc 940e 0c96 	CALL SUBOPT_0x1D
0008be 35ea      	CPI  R30,LOW(0x5A)
0008bf f409      	BRNE _0x183
                 _0x182:
0008c0 c003      	RJMP _0x181
                 _0x183:
                 ; 0000 011C ringPos = 1;
0008c1 940e 0d40 	CALL SUBOPT_0x38
0008c3 c00d      	RJMP _0x199
                 ; 0000 011D } else if((ringPos > 3) && (pointPos == 'Z')) {
                 _0x181:
0008c4 940e 0cb4 	CALL SUBOPT_0x23
0008c6 9734      	SBIW R30,4
0008c7 f024      	BRLT _0x186
0008c8 940e 0c96 	CALL SUBOPT_0x1D
0008ca 35ea      	CPI  R30,LOW(0x5A)
0008cb f009      	BREQ _0x187
                 _0x186:
0008cc c006      	RJMP _0x185
                 _0x187:
                 ; 0000 011E ringPos = 4;
0008cd e2ad      	LDI  R26,LOW(_ringPos)
0008ce e0b0      	LDI  R27,HIGH(_ringPos)
0008cf e0e4      	LDI  R30,LOW(4)
0008d0 e0f0      	LDI  R31,HIGH(4)
                 _0x199:
0008d1 940e 0dde 	CALL __EEPROMWRW
                 ; 0000 011F }
                 ; 0000 0120 delay(200);
                 _0x185:
0008d3 940e 0d2f 	CALL SUBOPT_0x35
                 ; 0000 0121 }
                 ; 0000 0122 if((t4 == 0)) {
                 _0x17A:
0008d5 999b      	SBIC 0x13,3
0008d6 c035      	RJMP _0x188
                 ; 0000 0123 if(pointPos == 'O') {
0008d7 940e 0c96 	CALL SUBOPT_0x1D
0008d9 34ef      	CPI  R30,LOW(0x4F)
0008da f431      	BRNE _0x189
                 ; 0000 0124 pointPos = 'A';
0008db e2ac      	LDI  R26,LOW(_pointPos)
0008dc e0b0      	LDI  R27,HIGH(_pointPos)
0008dd e4e1      	LDI  R30,LOW(65)
0008de 940e 0de6 	CALL __EEPROMWRB
                 ; 0000 0125 } else if(pointPos == 'A') {
0008e0 c029      	RJMP _0x18A
                 _0x189:
0008e1 940e 0c96 	CALL SUBOPT_0x1D
0008e3 34e1      	CPI  R30,LOW(0x41)
0008e4 f481      	BRNE _0x18B
                 ; 0000 0126 pointPos = 'B';
0008e5 e2ac      	LDI  R26,LOW(_pointPos)
0008e6 e0b0      	LDI  R27,HIGH(_pointPos)
0008e7 e4e2      	LDI  R30,LOW(66)
0008e8 940e 0caa 	CALL SUBOPT_0x21
                 ; 0000 0127 if(ringPos == 4) ringPos = 1;
0008ea 940e 0dce 	CALL __EEPROMRDW
0008ec 30e4      	CPI  R30,LOW(0x4)
0008ed e0a0      	LDI  R26,HIGH(0x4)
0008ee 07fa      	CPC  R31,R26
0008ef f421      	BRNE _0x18C
0008f0 e2ad      	LDI  R26,LOW(_ringPos)
0008f1 e0b0      	LDI  R27,HIGH(_ringPos)
0008f2 940e 0caf 	CALL SUBOPT_0x22
                 ; 0000 0128 } else if(pointPos == 'B') {
                 _0x18C:
0008f4 c015      	RJMP _0x18D
                 _0x18B:
0008f5 940e 0c96 	CALL SUBOPT_0x1D
0008f7 34e2      	CPI  R30,LOW(0x42)
0008f8 f441      	BRNE _0x18E
                 ; 0000 0129 pointPos = 'Z';
0008f9 e2ac      	LDI  R26,LOW(_pointPos)
0008fa e0b0      	LDI  R27,HIGH(_pointPos)
0008fb e5ea      	LDI  R30,LOW(90)
0008fc 940e 0caa 	CALL SUBOPT_0x21
                 ; 0000 012A ringPos = 4;
0008fe e0e4      	LDI  R30,LOW(4)
0008ff e0f0      	LDI  R31,HIGH(4)
000900 c007      	RJMP _0x19A
                 ; 0000 012B } else {
                 _0x18E:
                 ; 0000 012C pointPos = 'O';
000901 e2ac      	LDI  R26,LOW(_pointPos)
000902 e0b0      	LDI  R27,HIGH(_pointPos)
000903 e4ef      	LDI  R30,LOW(79)
000904 940e 0caa 	CALL SUBOPT_0x21
                 ; 0000 012D ringPos = 1;
000906 e0e1      	LDI  R30,LOW(1)
000907 e0f0      	LDI  R31,HIGH(1)
                 _0x19A:
000908 940e 0dde 	CALL __EEPROMWRW
                 ; 0000 012E }
                 _0x18D:
                 _0x18A:
                 ; 0000 012F delay(200);
00090a 940e 0d2f 	CALL SUBOPT_0x35
                 ; 0000 0130 }
                 ; 0000 0131 }
                 _0x188:
00090c cf64      	RJMP _0x172
                 ; 0000 0132 }
                 _0x190:
00090d cfff      	RJMP _0x190
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00090e 93ba      	ST   -Y,R27
00090f 93aa      	ST   -Y,R26
000910 931a      	ST   -Y,R17
000911 930a      	ST   -Y,R16
000912 81aa      	LDD  R26,Y+2
000913 81bb      	LDD  R27,Y+2+1
000914 9612      	ADIW R26,2
000915 940e 0dc1 	CALL __GETW1P
000917 9730      	SBIW R30,0
000918 f129      	BREQ _0x2000010
000919 81aa      	LDD  R26,Y+2
00091a 81bb      	LDD  R27,Y+2+1
00091b 9614      	ADIW R26,4
00091c 940e 0dc1 	CALL __GETW1P
00091e 018f      	MOVW R16,R30
00091f 9730      	SBIW R30,0
000920 f061      	BREQ _0x2000012
                +
000921 3002     +CPI R16 , LOW ( 2 )
000922 e0e0     +LDI R30 , HIGH ( 2 )
000923 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000924 f080      	BRLO _0x2000013
000925 01f8      	MOVW R30,R16
000926 9731      	SBIW R30,1
000927 018f      	MOVW R16,R30
                +
000928 81aa     +LDD R26 , Y + 2
000929 81bb     +LDD R27 , Y + 2 + 1
00092a 9614     +ADIW R26 , 4
00092b 93ed     +ST X + , R30
00092c 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00092d 81aa      	LDD  R26,Y+2
00092e 81bb      	LDD  R27,Y+2+1
00092f 9612      	ADIW R26,2
000930 940e 0d33 	CALL SUBOPT_0x36
000932 9731      	SBIW R30,1
000933 81ac      	LDD  R26,Y+4
000934 83a0      	STD  Z+0,R26
                 _0x2000013:
000935 81aa      	LDD  R26,Y+2
000936 81bb      	LDD  R27,Y+2+1
000937 940e 0dc1 	CALL __GETW1P
000939 23ff      	TST  R31
00093a f012      	BRMI _0x2000014
00093b 940e 0d33 	CALL SUBOPT_0x36
                 _0x2000014:
00093d c006      	RJMP _0x2000015
                 _0x2000010:
00093e 81aa      	LDD  R26,Y+2
00093f 81bb      	LDD  R27,Y+2+1
000940 efef      	LDI  R30,LOW(65535)
000941 efff      	LDI  R31,HIGH(65535)
000942 93ed      	ST   X+,R30
000943 93fc      	ST   X,R31
                 _0x2000015:
000944 8119      	LDD  R17,Y+1
000945 8108      	LDD  R16,Y+0
000946 9625      	ADIW R28,5
000947 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000948 93ba      	ST   -Y,R27
000949 93aa      	ST   -Y,R26
00094a 9726      	SBIW R28,6
00094b 940e 0d6b 	CALL __SAVELOCR6
00094d e010      	LDI  R17,0
00094e 85ac      	LDD  R26,Y+12
00094f 85bd      	LDD  R27,Y+12+1
000950 e0e0      	LDI  R30,LOW(0)
000951 e0f0      	LDI  R31,HIGH(0)
000952 93ed      	ST   X+,R30
000953 93fc      	ST   X,R31
                 _0x2000016:
000954 89ea      	LDD  R30,Y+18
000955 89fb      	LDD  R31,Y+18+1
000956 9631      	ADIW R30,1
000957 8bea      	STD  Y+18,R30
000958 8bfb      	STD  Y+18+1,R31
000959 9731      	SBIW R30,1
00095a 91e4      	LPM  R30,Z
00095b 2f2e      	MOV  R18,R30
00095c 30e0      	CPI  R30,0
00095d f409      	BRNE PC+2
00095e c11d      	RJMP _0x2000018
00095f 2fe1      	MOV  R30,R17
000960 30e0      	CPI  R30,0
000961 f439      	BRNE _0x200001C
000962 3225      	CPI  R18,37
000963 f411      	BRNE _0x200001D
000964 e011      	LDI  R17,LOW(1)
000965 c002      	RJMP _0x200001E
                 _0x200001D:
000966 940e 0d45 	CALL SUBOPT_0x39
                 _0x200001E:
000968 c112      	RJMP _0x200001B
                 _0x200001C:
000969 30e1      	CPI  R30,LOW(0x1)
00096a f4a9      	BRNE _0x200001F
00096b 3225      	CPI  R18,37
00096c f419      	BRNE _0x2000020
00096d 940e 0d45 	CALL SUBOPT_0x39
00096f c10a      	RJMP _0x20000CC
                 _0x2000020:
000970 e012      	LDI  R17,LOW(2)
000971 e040      	LDI  R20,LOW(0)
000972 e000      	LDI  R16,LOW(0)
000973 322d      	CPI  R18,45
000974 f411      	BRNE _0x2000021
000975 e001      	LDI  R16,LOW(1)
000976 c104      	RJMP _0x200001B
                 _0x2000021:
000977 322b      	CPI  R18,43
000978 f411      	BRNE _0x2000022
000979 e24b      	LDI  R20,LOW(43)
00097a c100      	RJMP _0x200001B
                 _0x2000022:
00097b 3220      	CPI  R18,32
00097c f411      	BRNE _0x2000023
00097d e240      	LDI  R20,LOW(32)
00097e c0fc      	RJMP _0x200001B
                 _0x2000023:
00097f c002      	RJMP _0x2000024
                 _0x200001F:
000980 30e2      	CPI  R30,LOW(0x2)
000981 f439      	BRNE _0x2000025
                 _0x2000024:
000982 e050      	LDI  R21,LOW(0)
000983 e013      	LDI  R17,LOW(3)
000984 3320      	CPI  R18,48
000985 f411      	BRNE _0x2000026
000986 6800      	ORI  R16,LOW(128)
000987 c0f3      	RJMP _0x200001B
                 _0x2000026:
000988 c003      	RJMP _0x2000027
                 _0x2000025:
000989 30e3      	CPI  R30,LOW(0x3)
00098a f009      	BREQ PC+2
00098b c0ef      	RJMP _0x200001B
                 _0x2000027:
00098c 3320      	CPI  R18,48
00098d f010      	BRLO _0x200002A
00098e 332a      	CPI  R18,58
00098f f008      	BRLO _0x200002B
                 _0x200002A:
000990 c007      	RJMP _0x2000029
                 _0x200002B:
000991 e0aa      	LDI  R26,LOW(10)
000992 9f5a      	MUL  R21,R26
000993 2d50      	MOV  R21,R0
000994 2fe2      	MOV  R30,R18
000995 53e0      	SUBI R30,LOW(48)
000996 0f5e      	ADD  R21,R30
000997 c0e3      	RJMP _0x200001B
                 _0x2000029:
000998 2fe2      	MOV  R30,R18
000999 36e3      	CPI  R30,LOW(0x63)
00099a f449      	BRNE _0x200002F
00099b 940e 0d4c 	CALL SUBOPT_0x3A
00099d 89e8      	LDD  R30,Y+16
00099e 89f9      	LDD  R31,Y+16+1
00099f 81a4      	LDD  R26,Z+4
0009a0 93aa      	ST   -Y,R26
0009a1 940e 0d52 	CALL SUBOPT_0x3B
0009a3 c0d6      	RJMP _0x2000030
                 _0x200002F:
0009a4 37e3      	CPI  R30,LOW(0x73)
0009a5 f441      	BRNE _0x2000032
0009a6 940e 0d4c 	CALL SUBOPT_0x3A
0009a8 940e 0d58 	CALL SUBOPT_0x3C
0009aa 940e 0ac0 	CALL _strlen
0009ac 2f1e      	MOV  R17,R30
0009ad c00a      	RJMP _0x2000033
                 _0x2000032:
0009ae 37e0      	CPI  R30,LOW(0x70)
0009af f461      	BRNE _0x2000035
0009b0 940e 0d4c 	CALL SUBOPT_0x3A
0009b2 940e 0d58 	CALL SUBOPT_0x3C
0009b4 940e 0acc 	CALL _strlenf
0009b6 2f1e      	MOV  R17,R30
0009b7 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0009b8 6002      	ORI  R16,LOW(2)
0009b9 770f      	ANDI R16,LOW(127)
0009ba e030      	LDI  R19,LOW(0)
0009bb c03c      	RJMP _0x2000036
                 _0x2000035:
0009bc 36e4      	CPI  R30,LOW(0x64)
0009bd f011      	BREQ _0x2000039
0009be 36e9      	CPI  R30,LOW(0x69)
0009bf f411      	BRNE _0x200003A
                 _0x2000039:
0009c0 6004      	ORI  R16,LOW(4)
0009c1 c002      	RJMP _0x200003B
                 _0x200003A:
0009c2 37e5      	CPI  R30,LOW(0x75)
0009c3 f431      	BRNE _0x200003C
                 _0x200003B:
0009c4 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0009c5 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0009c6 83ee      	STD  Y+6,R30
0009c7 83ff      	STD  Y+6+1,R31
0009c8 e015      	LDI  R17,LOW(5)
0009c9 c00c      	RJMP _0x200003D
                 _0x200003C:
0009ca 35e8      	CPI  R30,LOW(0x58)
0009cb f411      	BRNE _0x200003F
0009cc 6008      	ORI  R16,LOW(8)
0009cd c003      	RJMP _0x2000040
                 _0x200003F:
0009ce 37e8      	CPI  R30,LOW(0x78)
0009cf f009      	BREQ PC+2
0009d0 c0a9      	RJMP _0x2000071
                 _0x2000040:
0009d1 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0009d2 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0009d3 83ee      	STD  Y+6,R30
0009d4 83ff      	STD  Y+6+1,R31
0009d5 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0009d6 ff02      	SBRS R16,2
0009d7 c017      	RJMP _0x2000042
0009d8 940e 0d4c 	CALL SUBOPT_0x3A
0009da 89a8      	LDD  R26,Y+16
0009db 89b9      	LDD  R27,Y+16+1
0009dc 9614      	ADIW R26,4
0009dd 91ed      	LD   R30,X+
0009de 91fd      	LD   R31,X+
0009df 87ea      	STD  Y+10,R30
0009e0 87fb      	STD  Y+10+1,R31
0009e1 85ab      	LDD  R26,Y+11
0009e2 23aa      	TST  R26
0009e3 f42a      	BRPL _0x2000043
0009e4 940e 0d7d 	CALL __ANEGW1
0009e6 87ea      	STD  Y+10,R30
0009e7 87fb      	STD  Y+10+1,R31
0009e8 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0009e9 3040      	CPI  R20,0
0009ea f011      	BREQ _0x2000044
0009eb 5f1f      	SUBI R17,-LOW(1)
0009ec c001      	RJMP _0x2000045
                 _0x2000044:
0009ed 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0009ee c009      	RJMP _0x2000046
                 _0x2000042:
0009ef 940e 0d4c 	CALL SUBOPT_0x3A
0009f1 89a8      	LDD  R26,Y+16
0009f2 89b9      	LDD  R27,Y+16+1
0009f3 9614      	ADIW R26,4
0009f4 940e 0dc1 	CALL __GETW1P
0009f6 87ea      	STD  Y+10,R30
0009f7 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
0009f8 fd00      	SBRC R16,0
0009f9 c011      	RJMP _0x2000047
                 _0x2000048:
0009fa 1715      	CP   R17,R21
0009fb f478      	BRSH _0x200004A
0009fc ff07      	SBRS R16,7
0009fd c008      	RJMP _0x200004B
0009fe ff02      	SBRS R16,2
0009ff c004      	RJMP _0x200004C
000a00 7f0b      	ANDI R16,LOW(251)
000a01 2f24      	MOV  R18,R20
000a02 5011      	SUBI R17,LOW(1)
000a03 c001      	RJMP _0x200004D
                 _0x200004C:
000a04 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000a05 c001      	RJMP _0x200004E
                 _0x200004B:
000a06 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000a07 940e 0d45 	CALL SUBOPT_0x39
000a09 5051      	SUBI R21,LOW(1)
000a0a cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000a0b 2f31      	MOV  R19,R17
000a0c ff01      	SBRS R16,1
000a0d c017      	RJMP _0x200004F
                 _0x2000050:
000a0e 3030      	CPI  R19,0
000a0f f0a1      	BREQ _0x2000052
000a10 ff03      	SBRS R16,3
000a11 c006      	RJMP _0x2000053
000a12 81ee      	LDD  R30,Y+6
000a13 81ff      	LDD  R31,Y+6+1
000a14 9125      	LPM  R18,Z+
000a15 83ee      	STD  Y+6,R30
000a16 83ff      	STD  Y+6+1,R31
000a17 c005      	RJMP _0x2000054
                 _0x2000053:
000a18 81ae      	LDD  R26,Y+6
000a19 81bf      	LDD  R27,Y+6+1
000a1a 912d      	LD   R18,X+
000a1b 83ae      	STD  Y+6,R26
000a1c 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000a1d 940e 0d45 	CALL SUBOPT_0x39
000a1f 3050      	CPI  R21,0
000a20 f009      	BREQ _0x2000055
000a21 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000a22 5031      	SUBI R19,LOW(1)
000a23 cfea      	RJMP _0x2000050
                 _0x2000052:
000a24 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000a25 e320      	LDI  R18,LOW(48)
000a26 81ee      	LDD  R30,Y+6
000a27 81ff      	LDD  R31,Y+6+1
000a28 940e 0dc5 	CALL __GETW1PF
000a2a 87e8      	STD  Y+8,R30
000a2b 87f9      	STD  Y+8+1,R31
000a2c 81ee      	LDD  R30,Y+6
000a2d 81ff      	LDD  R31,Y+6+1
000a2e 9632      	ADIW R30,2
000a2f 83ee      	STD  Y+6,R30
000a30 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000a31 85e8      	LDD  R30,Y+8
000a32 85f9      	LDD  R31,Y+8+1
000a33 85aa      	LDD  R26,Y+10
000a34 85bb      	LDD  R27,Y+10+1
000a35 17ae      	CP   R26,R30
000a36 07bf      	CPC  R27,R31
000a37 f050      	BRLO _0x200005C
000a38 5f2f      	SUBI R18,-LOW(1)
000a39 85a8      	LDD  R26,Y+8
000a3a 85b9      	LDD  R27,Y+8+1
000a3b 85ea      	LDD  R30,Y+10
000a3c 85fb      	LDD  R31,Y+10+1
000a3d 1bea      	SUB  R30,R26
000a3e 0bfb      	SBC  R31,R27
000a3f 87ea      	STD  Y+10,R30
000a40 87fb      	STD  Y+10+1,R31
000a41 cfef      	RJMP _0x200005A
                 _0x200005C:
000a42 332a      	CPI  R18,58
000a43 f028      	BRLO _0x200005D
000a44 ff03      	SBRS R16,3
000a45 c002      	RJMP _0x200005E
000a46 5f29      	SUBI R18,-LOW(7)
000a47 c001      	RJMP _0x200005F
                 _0x200005E:
000a48 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000a49 fd04      	SBRC R16,4
000a4a c01a      	RJMP _0x2000061
000a4b 3321      	CPI  R18,49
000a4c f420      	BRSH _0x2000063
000a4d 85a8      	LDD  R26,Y+8
000a4e 85b9      	LDD  R27,Y+8+1
000a4f 9711      	SBIW R26,1
000a50 f409      	BRNE _0x2000062
                 _0x2000063:
000a51 c009      	RJMP _0x20000CD
                 _0x2000062:
000a52 1753      	CP   R21,R19
000a53 f010      	BRLO _0x2000067
000a54 ff00      	SBRS R16,0
000a55 c001      	RJMP _0x2000068
                 _0x2000067:
000a56 c013      	RJMP _0x2000066
                 _0x2000068:
000a57 e220      	LDI  R18,LOW(32)
000a58 ff07      	SBRS R16,7
000a59 c00b      	RJMP _0x2000069
000a5a e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000a5b 6100      	ORI  R16,LOW(16)
000a5c ff02      	SBRS R16,2
000a5d c007      	RJMP _0x200006A
000a5e 7f0b      	ANDI R16,LOW(251)
000a5f 934a      	ST   -Y,R20
000a60 940e 0d52 	CALL SUBOPT_0x3B
000a62 3050      	CPI  R21,0
000a63 f009      	BREQ _0x200006B
000a64 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000a65 940e 0d45 	CALL SUBOPT_0x39
000a67 3050      	CPI  R21,0
000a68 f009      	BREQ _0x200006C
000a69 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000a6a 5031      	SUBI R19,LOW(1)
000a6b 85a8      	LDD  R26,Y+8
000a6c 85b9      	LDD  R27,Y+8+1
000a6d 9712      	SBIW R26,2
000a6e f008      	BRLO _0x2000059
000a6f cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000a70 ff00      	SBRS R16,0
000a71 c008      	RJMP _0x200006D
                 _0x200006E:
000a72 3050      	CPI  R21,0
000a73 f031      	BREQ _0x2000070
000a74 5051      	SUBI R21,LOW(1)
000a75 e2e0      	LDI  R30,LOW(32)
000a76 93ea      	ST   -Y,R30
000a77 940e 0d52 	CALL SUBOPT_0x3B
000a79 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000a7a e010      	LDI  R17,LOW(0)
                 _0x200001B:
000a7b ced8      	RJMP _0x2000016
                 _0x2000018:
000a7c 85ac      	LDD  R26,Y+12
000a7d 85bd      	LDD  R27,Y+12+1
000a7e 91ed      	LD   R30,X+
000a7f 91fd      	LD   R31,X+
000a80 940e 0d72 	CALL __LOADLOCR6
000a82 9664      	ADIW R28,20
000a83 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000a84 92ff      	PUSH R15
000a85 2ef8      	MOV  R15,R24
000a86 9726      	SBIW R28,6
000a87 940e 0d6d 	CALL __SAVELOCR4
000a89 01de      	MOVW R26,R28
000a8a 961c      	ADIW R26,12
000a8b 940e 0d79 	CALL __ADDW2R15
000a8d 940e 0dc1 	CALL __GETW1P
000a8f 9730      	SBIW R30,0
000a90 f419      	BRNE _0x2000072
000a91 efef      	LDI  R30,LOW(65535)
000a92 efff      	LDI  R31,HIGH(65535)
000a93 c027      	RJMP _0x20C0005
                 _0x2000072:
000a94 01de      	MOVW R26,R28
000a95 9616      	ADIW R26,6
000a96 940e 0d79 	CALL __ADDW2R15
000a98 018d      	MOVW R16,R26
000a99 01de      	MOVW R26,R28
000a9a 961c      	ADIW R26,12
000a9b 940e 0d79 	CALL __ADDW2R15
000a9d 91ed      	LD   R30,X+
000a9e 91fd      	LD   R31,X+
000a9f 83ee      	STD  Y+6,R30
000aa0 83ff      	STD  Y+6+1,R31
000aa1 e0e0      	LDI  R30,LOW(0)
000aa2 87e8      	STD  Y+8,R30
000aa3 87e9      	STD  Y+8+1,R30
000aa4 01de      	MOVW R26,R28
000aa5 961a      	ADIW R26,10
000aa6 940e 0d79 	CALL __ADDW2R15
000aa8 91ed      	LD   R30,X+
000aa9 91fd      	LD   R31,X+
000aaa 93fa      	ST   -Y,R31
000aab 93ea      	ST   -Y,R30
000aac 931a      	ST   -Y,R17
000aad 930a      	ST   -Y,R16
000aae e0ee      	LDI  R30,LOW(_put_buff_G100)
000aaf e0f9      	LDI  R31,HIGH(_put_buff_G100)
000ab0 93fa      	ST   -Y,R31
000ab1 93ea      	ST   -Y,R30
000ab2 01de      	MOVW R26,R28
000ab3 961a      	ADIW R26,10
000ab4 de93      	RCALL __print_G100
000ab5 019f      	MOVW R18,R30
000ab6 81ae      	LDD  R26,Y+6
000ab7 81bf      	LDD  R27,Y+6+1
000ab8 e0e0      	LDI  R30,LOW(0)
000ab9 93ec      	ST   X,R30
000aba 01f9      	MOVW R30,R18
                 _0x20C0005:
000abb 940e 0d74 	CALL __LOADLOCR4
000abd 962a      	ADIW R28,10
000abe 90ff      	POP  R15
000abf 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000ac0 93ba      	ST   -Y,R27
000ac1 93aa      	ST   -Y,R26
000ac2 91a9          ld   r26,y+
000ac3 91b9          ld   r27,y+
000ac4 27ee          clr  r30
000ac5 27ff          clr  r31
                 strlen0:
000ac6 916d          ld   r22,x+
000ac7 2366          tst  r22
000ac8 f011          breq strlen1
000ac9 9631          adiw r30,1
000aca cffb          rjmp strlen0
                 strlen1:
000acb 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000acc 93ba      	ST   -Y,R27
000acd 93aa      	ST   -Y,R26
000ace 27aa          clr  r26
000acf 27bb          clr  r27
000ad0 91e9          ld   r30,y+
000ad1 91f9          ld   r31,y+
                 strlenf0:
000ad2 9005      	lpm  r0,z+
000ad3 2000          tst  r0
000ad4 f011          breq strlenf1
000ad5 9611          adiw r26,1
000ad6 cffb          rjmp strlenf0
                 strlenf1:
000ad7 01fd          movw r30,r26
000ad8 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _abs:
                 ; .FSTART _abs
000ad9 93ba      	ST   -Y,R27
000ada 93aa      	ST   -Y,R26
000adb 91e9          ld   r30,y+
000adc 91f9          ld   r31,y+
000add 9730          sbiw r30,0
000ade f41a          brpl __abs0
000adf 95e0          com  r30
000ae0 95f0          com  r31
000ae1 9631          adiw r30,1
                 __abs0:
000ae2 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G103:
                 ; .FSTART __lcd_delay_G103
000ae3 e0ff          ldi   r31,15
                 __lcd_delay0:
000ae4 95fa          dec   r31
000ae5 f7f1          brne  __lcd_delay0
000ae6 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000ae7 b3a7          in    r26,__lcd_direction
000ae8 70af          andi  r26,0xf                 ;set as input
000ae9 bba7          out   __lcd_direction,r26
000aea 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000aeb 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000aec dff6      	RCALL __lcd_delay_G103
000aed 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000aee dff4      	RCALL __lcd_delay_G103
000aef b3a6          in    r26,__lcd_pin
000af0 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000af1 dff1      	RCALL __lcd_delay_G103
000af2 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000af3 dfef      	RCALL __lcd_delay_G103
000af4 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000af5 fda7          sbrc  r26,__lcd_busy_flag
000af6 cff5          rjmp  __lcd_busy
000af7 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
000af8 7fa0          andi  r26,0xf0
000af9 2bab          or    r26,r27
000afa bba8          out   __lcd_port,r26          ;write
000afb 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000afc 940e 0ae3 	CALL __lcd_delay_G103
000afe 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000aff 940e 0ae3 	CALL __lcd_delay_G103
000b01 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000b02 93aa      	ST   -Y,R26
000b03 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000b04 b3a7          in    r26,__lcd_direction
000b05 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000b06 bba7          out   __lcd_direction,r26
000b07 b3b8          in    r27,__lcd_port
000b08 70bf          andi  r27,0xf
000b09 81a8          ld    r26,y
000b0a dfed      	RCALL __lcd_write_nibble_G103
000b0b 81a8          ld    r26,y
000b0c 95a2          swap  r26
000b0d dfea      	RCALL __lcd_write_nibble_G103
000b0e 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000b0f 940c 0bd8 	JMP  _0x20C0001
                 ; .FEND
                 __lcd_read_nibble_G103:
                 ; .FSTART __lcd_read_nibble_G103
000b11 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000b12 940e 0ae3 	CALL __lcd_delay_G103
000b14 b3e6          in    r30,__lcd_pin           ;read
000b15 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000b16 940e 0ae3 	CALL __lcd_delay_G103
000b18 7fe0          andi  r30,0xf0
000b19 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G103:
                 ; .FSTART _lcd_read_byte0_G103
000b1a 940e 0ae3 	CALL __lcd_delay_G103
000b1c dff4      	RCALL __lcd_read_nibble_G103
000b1d 2fae          mov   r26,r30
000b1e dff2      	RCALL __lcd_read_nibble_G103
000b1f 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
000b20 95e2          swap  r30
000b21 2bea          or    r30,r26
000b22 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000b23 93aa      	ST   -Y,R26
000b24 940e 0ae7 	CALL __lcd_ready
000b26 81e8      	LD   R30,Y
000b27 e0f0      	LDI  R31,0
000b28 54ed      	SUBI R30,LOW(-__base_y_G103)
000b29 4ffe      	SBCI R31,HIGH(-__base_y_G103)
000b2a 81e0      	LD   R30,Z
000b2b 81a9      	LDD  R26,Y+1
000b2c 0fae      	ADD  R26,R30
000b2d 940e 0b02 	CALL __lcd_write_data
000b2f 81e9      	LDD  R30,Y+1
000b30 93e0 01b7 	STS  __lcd_x,R30
000b32 81e8      	LD   R30,Y
000b33 93e0 01b8 	STS  __lcd_y,R30
                 _0x20C0004:
000b35 9622      	ADIW R28,2
000b36 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000b37 940e 0ae7 	CALL __lcd_ready
000b39 e0a2      	LDI  R26,LOW(2)
000b3a 940e 0b02 	CALL __lcd_write_data
000b3c 940e 0ae7 	CALL __lcd_ready
000b3e e0ac      	LDI  R26,LOW(12)
000b3f 940e 0b02 	CALL __lcd_write_data
000b41 940e 0ae7 	CALL __lcd_ready
000b43 e0a1      	LDI  R26,LOW(1)
000b44 940e 0b02 	CALL __lcd_write_data
000b46 e0e0      	LDI  R30,LOW(0)
000b47 93e0 01b8 	STS  __lcd_y,R30
000b49 93e0 01b7 	STS  __lcd_x,R30
000b4b 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000b4c 93aa      	ST   -Y,R26
000b4d 93ef          push r30
000b4e 93ff          push r31
000b4f 81a8          ld   r26,y
000b50 9468          set
000b51 30aa          cpi  r26,10
000b52 f039          breq __lcd_putchar1
000b53 94e8          clt
000b54 91e0 01b9 	LDS  R30,__lcd_maxx
000b56 91a0 01b7 	LDS  R26,__lcd_x
000b58 17ae      	CP   R26,R30
000b59 f058      	BRLO _0x2060004
                 	__lcd_putchar1:
000b5a 91e0 01b8 	LDS  R30,__lcd_y
000b5c 5fef      	SUBI R30,-LOW(1)
000b5d 93e0 01b8 	STS  __lcd_y,R30
000b5f e0e0      	LDI  R30,LOW(0)
000b60 93ea      	ST   -Y,R30
000b61 91a0 01b8 	LDS  R26,__lcd_y
000b63 dfbf      	RCALL _lcd_gotoxy
000b64 f056      	brts __lcd_putchar0
                 _0x2060004:
000b65 91e0 01b7 	LDS  R30,__lcd_x
000b67 5fef      	SUBI R30,-LOW(1)
000b68 93e0 01b7 	STS  __lcd_x,R30
000b6a df7c          rcall __lcd_ready
000b6b 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
000b6c 81a8      	LD   R26,Y
000b6d 940e 0b02 	CALL __lcd_write_data
                 __lcd_putchar0:
000b6f 91ff          pop  r31
000b70 91ef          pop  r30
000b71 940c 0bd8 	JMP  _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000b73 93ba      	ST   -Y,R27
000b74 93aa      	ST   -Y,R26
000b75 931a      	ST   -Y,R17
                 _0x2060005:
000b76 81a9      	LDD  R26,Y+1
000b77 81ba      	LDD  R27,Y+1+1
000b78 91ed      	LD   R30,X+
000b79 83a9      	STD  Y+1,R26
000b7a 83ba      	STD  Y+1+1,R27
000b7b 2f1e      	MOV  R17,R30
000b7c 30e0      	CPI  R30,0
000b7d f019      	BREQ _0x2060007
000b7e 2fa1      	MOV  R26,R17
000b7f dfcc      	RCALL _lcd_putchar
000b80 cff5      	RJMP _0x2060005
                 _0x2060007:
000b81 c010      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000b82 93ba      	ST   -Y,R27
000b83 93aa      	ST   -Y,R26
000b84 931a      	ST   -Y,R17
                 _0x2060008:
000b85 81e9      	LDD  R30,Y+1
000b86 81fa      	LDD  R31,Y+1+1
000b87 9631      	ADIW R30,1
000b88 83e9      	STD  Y+1,R30
000b89 83fa      	STD  Y+1+1,R31
000b8a 9731      	SBIW R30,1
000b8b 91e4      	LPM  R30,Z
000b8c 2f1e      	MOV  R17,R30
000b8d 30e0      	CPI  R30,0
000b8e f019      	BREQ _0x206000A
000b8f 2fa1      	MOV  R26,R17
000b90 dfbb      	RCALL _lcd_putchar
000b91 cff3      	RJMP _0x2060008
                 _0x206000A:
                 _0x20C0002:
000b92 8118      	LDD  R17,Y+0
                 _0x20C0003:
000b93 9623      	ADIW R28,3
000b94 9508      	RET
                 ; .FEND
                 __long_delay_G103:
                 ; .FSTART __long_delay_G103
000b95 27aa          clr   r26
000b96 27bb          clr   r27
                 __long_delay0:
000b97 9711          sbiw  r26,1         ;2 cycles
000b98 f7f1          brne  __long_delay0 ;2 cycles
000b99 9508      	RET
                 ; .FEND
                 __lcd_init_write_G103:
                 ; .FSTART __lcd_init_write_G103
000b9a 93aa      	ST   -Y,R26
000b9b 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000b9c b3a7          in    r26,__lcd_direction
000b9d 6fa7          ori   r26,0xf7                ;set as output
000b9e bba7          out   __lcd_direction,r26
000b9f b3b8          in    r27,__lcd_port
000ba0 70bf          andi  r27,0xf
000ba1 81a8          ld    r26,y
000ba2 940e 0af8 	CALL __lcd_write_nibble_G103
000ba4 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000ba5 c032      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000ba6 93aa      	ST   -Y,R26
000ba7 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000ba8 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
000ba9 81e8      	LD   R30,Y
000baa 93e0 01b9 	STS  __lcd_maxx,R30
000bac 58e0      	SUBI R30,-LOW(128)
                +
000bad 93e0 01b5+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
000baf 81e8      	LD   R30,Y
000bb0 54e0      	SUBI R30,-LOW(192)
                +
000bb1 93e0 01b6+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
000bb3 940e 0d62 	CALL SUBOPT_0x3D
000bb5 940e 0d62 	CALL SUBOPT_0x3D
000bb7 940e 0d62 	CALL SUBOPT_0x3D
000bb9 dfdb      	RCALL __long_delay_G103
000bba e2a0      	LDI  R26,LOW(32)
000bbb dfde      	RCALL __lcd_init_write_G103
000bbc dfd8      	RCALL __long_delay_G103
000bbd e2a8      	LDI  R26,LOW(40)
000bbe 940e 0d67 	CALL SUBOPT_0x3E
000bc0 e0a4      	LDI  R26,LOW(4)
000bc1 940e 0d67 	CALL SUBOPT_0x3E
000bc3 e8a5      	LDI  R26,LOW(133)
000bc4 940e 0d67 	CALL SUBOPT_0x3E
000bc6 b3a7          in    r26,__lcd_direction
000bc7 70af          andi  r26,0xf                 ;set as input
000bc8 bba7          out   __lcd_direction,r26
000bc9 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000bca 940e 0b1a 	CALL _lcd_read_byte0_G103
000bcc 30e5      	CPI  R30,LOW(0x5)
000bcd f011      	BREQ _0x206000B
000bce e0e0      	LDI  R30,LOW(0)
000bcf c008      	RJMP _0x20C0001
                 _0x206000B:
000bd0 940e 0ae7 	CALL __lcd_ready
000bd2 e0a6      	LDI  R26,LOW(6)
000bd3 940e 0b02 	CALL __lcd_write_data
000bd5 940e 0b37 	CALL _lcd_clear
000bd7 e0e1      	LDI  R30,LOW(1)
                 _0x20C0001:
000bd8 9621      	ADIW R28,1
000bd9 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _buff:
000160           	.BYTE 0x21
                 _a:
000181           	.BYTE 0x1
                 _count_btn:
000182           	.BYTE 0x2
                 _isChildSelect:
000184           	.BYTE 0x1
                 _isTestTombol:
000185           	.BYTE 0x1
                 
                 	.ESEG
                 _garis:
000000           	.BYTE 0xE
                 _back:
00000e           	.BYTE 0xE
                 _tengah:
00001c           	.BYTE 0xE
                 
                 	.DSEG
                 _sen:
000186           	.BYTE 0x7
                 _sensor:
00018d           	.BYTE 0x2
                 _error:
00018f           	.BYTE 0x2
                 _lastError:
000191           	.BYTE 0x2
                 _kp:
000193           	.BYTE 0x2
                 _kd:
000195           	.BYTE 0x2
                 _SPEED:
000197           	.BYTE 0x2
                 _MIN_SPEED:
000199           	.BYTE 0x2
                 _MAX_SPEED:
00019b           	.BYTE 0x2
                 _count:
00019d           	.BYTE 0x2
                 _second:
00019f           	.BYTE 0x2
                 
                 	.ESEG
                 _mapMirror:
00002a           	.BYTE 0x2
                 _pointPos:
00002c           	.BYTE 0x1
                 _ringPos:
00002d           	.BYTE 0x2
                 
                 	.DSEG
                 _maxHijau:
0001a1           	.BYTE 0x2
                 _maxKuning:
0001a3           	.BYTE 0x2
                 _maxMerah:
0001a5           	.BYTE 0x2
                 _minHijau:
0001a7           	.BYTE 0x2
                 _minKuning:
0001a9           	.BYTE 0x2
                 _minMerah:
0001ab           	.BYTE 0x2
                 _isWarna:
0001ad           	.BYTE 0x2
                 __seed_G102:
0001af           	.BYTE 0x4
                 __base_y_G103:
0001b3           	.BYTE 0x4
                 __lcd_x:
0001b7           	.BYTE 0x1
                 __lcd_y:
0001b8           	.BYTE 0x1
                 __lcd_maxx:
0001b9           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000bda e0e7      	LDI  R30,LOW(7)
000bdb e0f0      	LDI  R31,HIGH(7)
000bdc 168e      	CP   R8,R30
000bdd 069f      	CPC  R9,R31
000bde 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
000bdf 2da8      	MOV  R26,R8
000be0 940e 018b 	CALL _read_adc
000be2 2e0e      	MOV  R0,R30
000be3 01f4      	MOVW R30,R8
000be4 e1ac      	LDI  R26,LOW(_tengah)
000be5 e0b0      	LDI  R27,HIGH(_tengah)
000be6 0fee      	LSL  R30
000be7 1fff      	ROL  R31
000be8 0fae      	ADD  R26,R30
000be9 1fbf      	ADC  R27,R31
000bea 940e 0dce 	CALL __EEPROMRDW
000bec 2da0      	MOV  R26,R0
000bed e0b0      	LDI  R27,0
000bee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000bef 9fea      	MUL  R30,R26
000bf0 01f0      	MOVW R30,R0
                +
000bf1 0f6e     +ADD R22 , R30
000bf2 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
000bf3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x3:
000bf4 93ea      	ST   -Y,R30
000bf5 e0a0      	LDI  R26,LOW(0)
000bf6 940c 0b23 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
000bf8 e6e0      	LDI  R30,LOW(_buff)
000bf9 e0f1      	LDI  R31,HIGH(_buff)
000bfa 93fa      	ST   -Y,R31
000bfb 93ea      	ST   -Y,R30
000bfc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x5:
000bfd 27ff      	CLR  R31
000bfe 2766      	CLR  R22
000bff 2777      	CLR  R23
000c00 940e 0dc9 	CALL __PUTPARD1
000c02 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000c03 e6a0      	LDI  R26,LOW(_buff)
000c04 e0b1      	LDI  R27,HIGH(_buff)
000c05 940c 0b73 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000c07 01f4      	MOVW R30,R8
000c08 e0a0      	LDI  R26,LOW(_garis)
000c09 e0b0      	LDI  R27,HIGH(_garis)
000c0a 0fee      	LSL  R30
000c0b 1fff      	ROL  R31
000c0c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000c0d e0f0      	LDI  R31,0
000c0e 940e 0dde 	CALL __EEPROMWRW
000c10 e0e0      	LDI  R30,LOW(0)
000c11 cfe2      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x9:
000c12 940e 0b82 	CALL _lcd_putsf
000c14 e0e0      	LDI  R30,LOW(0)
000c15 93ea      	ST   -Y,R30
000c16 e0a1      	LDI  R26,LOW(1)
000c17 940e 0b23 	CALL _lcd_gotoxy
000c19 cfde      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
                +
000c1a e9e9     +LDI R30 , LOW ( 2 * _0x0 + ( 25 ) )
000c1b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW1FN _0x0,25
000c1c 93fa      	ST   -Y,R31
000c1d 93ea      	ST   -Y,R30
000c1e 01f4      	MOVW R30,R8
000c1f 940e 0d89 	CALL __CWD1
000c21 940e 0dc9 	CALL __PUTPARD1
000c23 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xB:
000c24 0fae      	ADD  R26,R30
000c25 1fbf      	ADC  R27,R31
000c26 940e 0dce 	CALL __EEPROMRDW
000c28 940e 0d89 	CALL __CWD1
000c2a 940e 0dc9 	CALL __PUTPARD1
000c2c e088      	LDI  R24,8
000c2d 940e 0a84 	CALL _sprintf
000c2f 962c      	ADIW R28,12
000c30 cfd2      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000c31 98c3      	CBI  0x18,3
000c32 e6a4      	LDI  R26,LOW(100)
000c33 e0b0      	LDI  R27,0
000c34 940e 0ee2 	CALL _delay_ms
000c36 9ac3      	SBI  0x18,3
000c37 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
000c38 01f4      	MOVW R30,R8
000c39 e0ae      	LDI  R26,LOW(_back)
000c3a e0b0      	LDI  R27,HIGH(_back)
000c3b 0fee      	LSL  R30
000c3c 1fff      	ROL  R31
000c3d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000c3e 940e 0d89 	CALL __CWD1
000c40 940e 0dc9 	CALL __PUTPARD1
000c42 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xF:
000c43 93aa      	ST   -Y,R26
000c44 81e8      	LD   R30,Y
000c45 e0f0      	LDI  R31,0
000c46 bdf9      	OUT  0x28+1,R31
000c47 bde8      	OUT  0x28,R30
000c48 81e9      	LDD  R30,Y+1
000c49 e0f0      	LDI  R31,0
000c4a bdfb      	OUT  0x2A+1,R31
000c4b bdea      	OUT  0x2A,R30
000c4c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000c4d 81a8      	LD   R26,Y
000c4e 81b9      	LDD  R27,Y+1
000c4f 940e 0df7 	CALL __CPW02
000c51 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
000c52 81a8      	LD   R26,Y
000c53 81b9      	LDD  R27,Y+1
000c54 940c 0196 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
000c56 81e8      	LD   R30,Y
000c57 81f9      	LDD  R31,Y+1
000c58 940e 0d89 	CALL __CWD1
000c5a 940e 0e67 	CALL __CDF1
000c5c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000c5d 940e 0e30 	CALL __CFD1
000c5f 93ed      	ST   X+,R30
000c60 93fc      	ST   X,R31
000c61 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x14:
000c62 91e0 018d 	LDS  R30,_sensor
000c64 91f0 018e 	LDS  R31,_sensor+1
000c66 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
000c67 91e0 019b 	LDS  R30,_MAX_SPEED
000c69 91f0 019c 	LDS  R31,_MAX_SPEED+1
000c6b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
000c6c 91e0 0199 	LDS  R30,_MIN_SPEED
000c6e 91f0 019a 	LDS  R31,_MIN_SPEED+1
000c70 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000c71 dff0      	RCALL SUBOPT_0x14
000c72 71ec      	ANDI R30,LOW(0x1C)
000c73 31ec      	CPI  R30,LOW(0x1C)
000c74 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x18:
000c75 81ea      	LDD  R30,Y+2
000c76 93ea      	ST   -Y,R30
000c77 81ab      	LDD  R26,Y+3
000c78 940e 02b0 	CALL _kiri
000c7a 940c 01e7 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x19:
000c7c 81ea      	LDD  R30,Y+2
000c7d 93ea      	ST   -Y,R30
000c7e 81ab      	LDD  R26,Y+3
000c7f 940e 02a9 	CALL _kanan
000c81 940c 01e7 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1A:
000c83 93ba      	ST   -Y,R27
000c84 93aa      	ST   -Y,R26
000c85 e2aa      	LDI  R26,LOW(_mapMirror)
000c86 e0b0      	LDI  R27,HIGH(_mapMirror)
000c87 940e 0dce 	CALL __EEPROMRDW
000c89 9730      	SBIW R30,0
000c8a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1B:
000c8b 81ea      	LDD  R30,Y+2
000c8c 81fb      	LDD  R31,Y+2+1
000c8d 93fa      	ST   -Y,R31
000c8e 93ea      	ST   -Y,R30
000c8f 81aa      	LDD  R26,Y+2
000c90 81bb      	LDD  R27,Y+2+1
000c91 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 24 TIMES, CODE SIZE REDUCTION:43 WORDS
                 SUBOPT_0x1C:
000c92 93ea      	ST   -Y,R30
000c93 e0a1      	LDI  R26,LOW(1)
000c94 940c 0b23 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x1D:
000c96 e2ac      	LDI  R26,LOW(_pointPos)
000c97 e0b0      	LDI  R27,HIGH(_pointPos)
000c98 940e 0dd2 	CALL __EEPROMRDB
000c9a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1E:
000c9b ede0      	LDI  R30,LOW(2000)
000c9c e0f7      	LDI  R31,HIGH(2000)
000c9d 93fa      	ST   -Y,R31
000c9e 93ea      	ST   -Y,R30
000c9f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x1F:
000ca0 93fa      	ST   -Y,R31
000ca1 93ea      	ST   -Y,R30
000ca2 eda0      	LDI  R26,LOW(2000)
000ca3 e0b7      	LDI  R27,HIGH(2000)
000ca4 940c 03fe 	JMP  _scanX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x20:
000ca6 eca8      	LDI  R26,LOW(200)
000ca7 e0b0      	LDI  R27,0
000ca8 940c 0493 	JMP  _belokKiri
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x21:
000caa 940e 0de6 	CALL __EEPROMWRB
000cac e2ad      	LDI  R26,LOW(_ringPos)
000cad e0b0      	LDI  R27,HIGH(_ringPos)
000cae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
000caf e0e1      	LDI  R30,LOW(1)
000cb0 e0f0      	LDI  R31,HIGH(1)
000cb1 940e 0dde 	CALL __EEPROMWRW
000cb3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x23:
000cb4 e2ad      	LDI  R26,LOW(_ringPos)
000cb5 e0b0      	LDI  R27,HIGH(_ringPos)
000cb6 940e 0dce 	CALL __EEPROMRDW
000cb8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x24:
000cb9 eda0      	LDI  R26,LOW(2000)
000cba e0b7      	LDI  R27,HIGH(2000)
000cbb 940c 03fe 	JMP  _scanX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x25:
000cbd e0e0      	LDI  R30,LOW(0)
000cbe 93e0 01ad 	STS  _isWarna,R30
000cc0 93e0 01ae 	STS  _isWarna+1,R30
000cc2 91e0 01ad 	LDS  R30,_isWarna
000cc4 91f0 01ae 	LDS  R31,_isWarna+1
000cc6 9730      	SBIW R30,0
000cc7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x26:
000cc8 91a0 01ad 	LDS  R26,_isWarna
000cca 91b0 01ae 	LDS  R27,_isWarna+1
000ccc 9711      	SBIW R26,1
000ccd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x27:
000cce eca8      	LDI  R26,LOW(200)
000ccf e0b0      	LDI  R27,0
000cd0 940c 0488 	JMP  _belokKanan
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x28:
000cd2 ede0      	LDI  R30,LOW(208)
000cd3 93ea      	ST   -Y,R30
000cd4 eda0      	LDI  R26,LOW(208)
000cd5 940e 02a2 	CALL _mundur
000cd7 e5ae      	LDI  R26,LOW(350)
000cd8 e0b1      	LDI  R27,HIGH(350)
000cd9 940e 0196 	CALL _delay
000cdb 91e0 01ad 	LDS  R30,_isWarna
000cdd 91f0 01ae 	LDS  R31,_isWarna+1
000cdf 9730      	SBIW R30,0
000ce0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x29:
000ce1 eaec      	LDI  R30,LOW(3500)
000ce2 e0fd      	LDI  R31,HIGH(3500)
000ce3 93fa      	ST   -Y,R31
000ce4 93ea      	ST   -Y,R30
000ce5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2A:
000ce6 e0e2      	LDI  R30,LOW(2)
000ce7 e0f0      	LDI  R31,HIGH(2)
000ce8 cfb7      	RJMP SUBOPT_0x1F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2B:
000ce9 940e 0b37 	CALL _lcd_clear
000ceb e0e0      	LDI  R30,LOW(0)
000cec cf07      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x2C:
000ced 940e 0b82 	CALL _lcd_putsf
000cef e0e0      	LDI  R30,LOW(0)
000cf0 cfa1      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2D:
000cf1 e0e0      	LDI  R30,LOW(0)
000cf2 93e0 0184 	STS  _isChildSelect,R30
000cf4 e0e0      	LDI  R30,LOW(0)
000cf5 e0f0      	LDI  R31,HIGH(0)
000cf6 93fa      	ST   -Y,R31
000cf7 93ea      	ST   -Y,R30
000cf8 e0a0      	LDI  R26,LOW(0)
000cf9 940c 05e1 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2E:
000cfb eea8      	LDI  R26,LOW(1000)
000cfc e0b3      	LDI  R27,HIGH(1000)
000cfd 940c 0196 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
000cff 940e 0b82 	CALL _lcd_putsf
000d01 eee8      	LDI  R30,LOW(1000)
000d02 e0f3      	LDI  R31,HIGH(1000)
000d03 93fa      	ST   -Y,R31
000d04 93ea      	ST   -Y,R30
000d05 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x30:
000d06 eea8      	LDI  R26,LOW(1000)
000d07 e0b3      	LDI  R27,HIGH(1000)
000d08 940e 02b7 	CALL _setMotor
000d0a eda0      	LDI  R26,LOW(2000)
000d0b e0b7      	LDI  R27,HIGH(2000)
000d0c 940c 0ee2 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x31:
000d0e 940e 0b82 	CALL _lcd_putsf
000d10 e1e8      	LDI  R30,LOW(64536)
000d11 effc      	LDI  R31,HIGH(64536)
000d12 93fa      	ST   -Y,R31
000d13 93ea      	ST   -Y,R30
000d14 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x32:
000d15 e1a8      	LDI  R26,LOW(64536)
000d16 efbc      	LDI  R27,HIGH(64536)
000d17 940e 02b7 	CALL _setMotor
000d19 eda0      	LDI  R26,LOW(2000)
000d1a e0b7      	LDI  R27,HIGH(2000)
000d1b 940e 0ee2 	CALL _delay_ms
000d1d e0e0      	LDI  R30,LOW(0)
000d1e cf73      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x33:
000d1f e0e0      	LDI  R30,LOW(0)
000d20 e0f0      	LDI  R31,HIGH(0)
000d21 93fa      	ST   -Y,R31
000d22 93ea      	ST   -Y,R30
000d23 e0a0      	LDI  R26,LOW(0)
000d24 940c 05e1 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x34:
000d26 940e 0b82 	CALL _lcd_putsf
000d28 e0e0      	LDI  R30,LOW(0)
000d29 93e0 0185 	STS  _isTestTombol,R30
000d2b efa4      	LDI  R26,LOW(500)
000d2c e0b1      	LDI  R27,HIGH(500)
000d2d 940c 0196 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x35:
000d2f eca8      	LDI  R26,LOW(200)
000d30 e0b0      	LDI  R27,0
000d31 940c 0196 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x36:
000d33 91ed      	LD   R30,X+
000d34 91fd      	LD   R31,X+
000d35 9631      	ADIW R30,1
000d36 93fe      	ST   -X,R31
000d37 93ee      	ST   -X,R30
000d38 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x37:
000d39 91e0 0182 	LDS  R30,_count_btn
000d3b 91f0 0183 	LDS  R31,_count_btn+1
000d3d 93fa      	ST   -Y,R31
000d3e 93ea      	ST   -Y,R30
000d3f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x38:
000d40 e2ad      	LDI  R26,LOW(_ringPos)
000d41 e0b0      	LDI  R27,HIGH(_ringPos)
000d42 e0e1      	LDI  R30,LOW(1)
000d43 e0f0      	LDI  R31,HIGH(1)
000d44 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x39:
000d45 932a      	ST   -Y,R18
000d46 85ad      	LDD  R26,Y+13
000d47 85be      	LDD  R27,Y+13+1
000d48 85ef      	LDD  R30,Y+15
000d49 89f8      	LDD  R31,Y+15+1
000d4a 9509      	ICALL
000d4b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3A:
000d4c 89e8      	LDD  R30,Y+16
000d4d 89f9      	LDD  R31,Y+16+1
000d4e 9734      	SBIW R30,4
000d4f 8be8      	STD  Y+16,R30
000d50 8bf9      	STD  Y+16+1,R31
000d51 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3B:
000d52 85ad      	LDD  R26,Y+13
000d53 85be      	LDD  R27,Y+13+1
000d54 85ef      	LDD  R30,Y+15
000d55 89f8      	LDD  R31,Y+15+1
000d56 9509      	ICALL
000d57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3C:
000d58 89a8      	LDD  R26,Y+16
000d59 89b9      	LDD  R27,Y+16+1
000d5a 9614      	ADIW R26,4
000d5b 91ed      	LD   R30,X+
000d5c 91fd      	LD   R31,X+
000d5d 83ee      	STD  Y+6,R30
000d5e 83ff      	STD  Y+6+1,R31
000d5f 81ae      	LDD  R26,Y+6
000d60 81bf      	LDD  R27,Y+6+1
000d61 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3D:
000d62 940e 0b95 	CALL __long_delay_G103
000d64 e3a0      	LDI  R26,LOW(48)
000d65 940c 0b9a 	JMP  __lcd_init_write_G103
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3E:
000d67 940e 0b02 	CALL __lcd_write_data
000d69 940c 0b95 	JMP  __long_delay_G103
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000d6b 935a      	ST   -Y,R21
                 __SAVELOCR5:
000d6c 934a      	ST   -Y,R20
                 __SAVELOCR4:
000d6d 933a      	ST   -Y,R19
                 __SAVELOCR3:
000d6e 932a      	ST   -Y,R18
                 __SAVELOCR2:
000d6f 931a      	ST   -Y,R17
000d70 930a      	ST   -Y,R16
000d71 9508      	RET
                 
                 __LOADLOCR6:
000d72 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000d73 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000d74 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000d75 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000d76 8119      	LDD  R17,Y+1
000d77 8108      	LD   R16,Y
000d78 9508      	RET
                 
                 __ADDW2R15:
000d79 2400      	CLR  R0
000d7a 0daf      	ADD  R26,R15
000d7b 1db0      	ADC  R27,R0
000d7c 9508      	RET
                 
                 __ANEGW1:
000d7d 95f1      	NEG  R31
000d7e 95e1      	NEG  R30
000d7f 40f0      	SBCI R31,0
000d80 9508      	RET
                 
                 __ANEGD1:
000d81 95f0      	COM  R31
000d82 9560      	COM  R22
000d83 9570      	COM  R23
000d84 95e1      	NEG  R30
000d85 4fff      	SBCI R31,-1
000d86 4f6f      	SBCI R22,-1
000d87 4f7f      	SBCI R23,-1
000d88 9508      	RET
                 
                 __CWD1:
000d89 2f6f      	MOV  R22,R31
000d8a 0f66      	ADD  R22,R22
000d8b 0b66      	SBC  R22,R22
000d8c 2f76      	MOV  R23,R22
000d8d 9508      	RET
                 
                 __MULW12U:
000d8e 9ffa      	MUL  R31,R26
000d8f 2df0      	MOV  R31,R0
000d90 9feb      	MUL  R30,R27
000d91 0df0      	ADD  R31,R0
000d92 9fea      	MUL  R30,R26
000d93 2de0      	MOV  R30,R0
000d94 0df1      	ADD  R31,R1
000d95 9508      	RET
                 
                 __MULW12:
000d96 d01c      	RCALL __CHKSIGNW
000d97 dff6      	RCALL __MULW12U
000d98 f40e      	BRTC __MULW121
000d99 dfe3      	RCALL __ANEGW1
                 __MULW121:
000d9a 9508      	RET
                 
                 __DIVW21U:
000d9b 2400      	CLR  R0
000d9c 2411      	CLR  R1
000d9d e190      	LDI  R25,16
                 __DIVW21U1:
000d9e 0faa      	LSL  R26
000d9f 1fbb      	ROL  R27
000da0 1c00      	ROL  R0
000da1 1c11      	ROL  R1
000da2 1a0e      	SUB  R0,R30
000da3 0a1f      	SBC  R1,R31
000da4 f418      	BRCC __DIVW21U2
000da5 0e0e      	ADD  R0,R30
000da6 1e1f      	ADC  R1,R31
000da7 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000da8 60a1      	SBR  R26,1
                 __DIVW21U3:
000da9 959a      	DEC  R25
000daa f799      	BRNE __DIVW21U1
000dab 01fd      	MOVW R30,R26
000dac 01d0      	MOVW R26,R0
000dad 9508      	RET
                 
                 __DIVW21:
000dae d004      	RCALL __CHKSIGNW
000daf dfeb      	RCALL __DIVW21U
000db0 f40e      	BRTC __DIVW211
000db1 dfcb      	RCALL __ANEGW1
                 __DIVW211:
000db2 9508      	RET
                 
                 __CHKSIGNW:
000db3 94e8      	CLT
000db4 fff7      	SBRS R31,7
000db5 c002      	RJMP __CHKSW1
000db6 dfc6      	RCALL __ANEGW1
000db7 9468      	SET
                 __CHKSW1:
000db8 ffb7      	SBRS R27,7
000db9 c006      	RJMP __CHKSW2
000dba 95b1      	NEG  R27
000dbb 95a1      	NEG  R26
000dbc 40b0      	SBCI R27,0
000dbd f800      	BLD  R0,0
000dbe 9403      	INC  R0
000dbf fa00      	BST  R0,0
                 __CHKSW2:
000dc0 9508      	RET
                 
                 __GETW1P:
000dc1 91ed      	LD   R30,X+
000dc2 91fc      	LD   R31,X
000dc3 9711      	SBIW R26,1
000dc4 9508      	RET
                 
                 __GETW1PF:
000dc5 9005      	LPM  R0,Z+
000dc6 91f4      	LPM  R31,Z
000dc7 2de0      	MOV  R30,R0
000dc8 9508      	RET
                 
                 __PUTPARD1:
000dc9 937a      	ST   -Y,R23
000dca 936a      	ST   -Y,R22
000dcb 93fa      	ST   -Y,R31
000dcc 93ea      	ST   -Y,R30
000dcd 9508      	RET
                 
                 __EEPROMRDW:
000dce 9611      	ADIW R26,1
000dcf d002      	RCALL __EEPROMRDB
000dd0 2ffe      	MOV  R31,R30
000dd1 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000dd2 99e1      	SBIC EECR,EEWE
000dd3 cffe      	RJMP __EEPROMRDB
000dd4 93ff      	PUSH R31
000dd5 b7ff      	IN   R31,SREG
000dd6 94f8      	CLI
000dd7 bbae      	OUT  EEARL,R26
000dd8 bbbf      	OUT  EEARH,R27
000dd9 9ae0      	SBI  EECR,EERE
000dda b3ed      	IN   R30,EEDR
000ddb bfff      	OUT  SREG,R31
000ddc 91ff      	POP  R31
000ddd 9508      	RET
                 
                 __EEPROMWRW:
000dde d007      	RCALL __EEPROMWRB
000ddf 9611      	ADIW R26,1
000de0 93ef      	PUSH R30
000de1 2fef      	MOV  R30,R31
000de2 d003      	RCALL __EEPROMWRB
000de3 91ef      	POP  R30
000de4 9711      	SBIW R26,1
000de5 9508      	RET
                 
                 __EEPROMWRB:
000de6 9be1      	SBIS EECR,EEWE
000de7 c002      	RJMP __EEPROMWRB1
000de8 95a8      	WDR
000de9 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000dea b79f      	IN   R25,SREG
000deb 94f8      	CLI
000dec bbae      	OUT  EEARL,R26
000ded bbbf      	OUT  EEARH,R27
000dee 9ae0      	SBI  EECR,EERE
000def b38d      	IN   R24,EEDR
000df0 17e8      	CP   R30,R24
000df1 f019      	BREQ __EEPROMWRB0
000df2 bbed      	OUT  EEDR,R30
000df3 9ae2      	SBI  EECR,EEMWE
000df4 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000df5 bf9f      	OUT  SREG,R25
000df6 9508      	RET
                 
                 __CPW02:
000df7 2400      	CLR  R0
000df8 160a      	CP   R0,R26
000df9 060b      	CPC  R0,R27
000dfa 9508      	RET
                 
                 __ANEGF1:
000dfb 9730      	SBIW R30,0
000dfc 4060      	SBCI R22,0
000dfd 4070      	SBCI R23,0
000dfe f009      	BREQ __ANEGF10
000dff 5870      	SUBI R23,0x80
                 __ANEGF10:
000e00 9508      	RET
                 
                 __ROUND_REPACK:
000e01 2355      	TST  R21
000e02 f442      	BRPL __REPACK
000e03 3850      	CPI  R21,0x80
000e04 f411      	BRNE __ROUND_REPACK0
000e05 ffe0      	SBRS R30,0
000e06 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000e07 9631      	ADIW R30,1
000e08 1f69      	ADC  R22,R25
000e09 1f79      	ADC  R23,R25
000e0a f06b      	BRVS __REPACK1
                 
                 __REPACK:
000e0b e850      	LDI  R21,0x80
000e0c 2757      	EOR  R21,R23
000e0d f411      	BRNE __REPACK0
000e0e 935f      	PUSH R21
000e0f c073      	RJMP __ZERORES
                 __REPACK0:
000e10 3f5f      	CPI  R21,0xFF
000e11 f031      	BREQ __REPACK1
000e12 0f66      	LSL  R22
000e13 0c00      	LSL  R0
000e14 9557      	ROR  R21
000e15 9567      	ROR  R22
000e16 2f75      	MOV  R23,R21
000e17 9508      	RET
                 __REPACK1:
000e18 935f      	PUSH R21
000e19 2000      	TST  R0
000e1a f00a      	BRMI __REPACK2
000e1b c072      	RJMP __MAXRES
                 __REPACK2:
000e1c c06b      	RJMP __MINRES
                 
                 __UNPACK:
000e1d e850      	LDI  R21,0x80
000e1e 2e19      	MOV  R1,R25
000e1f 2215      	AND  R1,R21
000e20 0f88      	LSL  R24
000e21 1f99      	ROL  R25
000e22 2795      	EOR  R25,R21
000e23 0f55      	LSL  R21
000e24 9587      	ROR  R24
                 
                 __UNPACK1:
000e25 e850      	LDI  R21,0x80
000e26 2e07      	MOV  R0,R23
000e27 2205      	AND  R0,R21
000e28 0f66      	LSL  R22
000e29 1f77      	ROL  R23
000e2a 2775      	EOR  R23,R21
000e2b 0f55      	LSL  R21
000e2c 9567      	ROR  R22
000e2d 9508      	RET
                 
                 __CFD1U:
000e2e 9468      	SET
000e2f c001      	RJMP __CFD1U0
                 __CFD1:
000e30 94e8      	CLT
                 __CFD1U0:
000e31 935f      	PUSH R21
000e32 dff2      	RCALL __UNPACK1
000e33 3870      	CPI  R23,0x80
000e34 f018      	BRLO __CFD10
000e35 3f7f      	CPI  R23,0xFF
000e36 f408      	BRCC __CFD10
000e37 c04b      	RJMP __ZERORES
                 __CFD10:
000e38 e156      	LDI  R21,22
000e39 1b57      	SUB  R21,R23
000e3a f4aa      	BRPL __CFD11
000e3b 9551      	NEG  R21
000e3c 3058      	CPI  R21,8
000e3d f40e      	BRTC __CFD19
000e3e 3059      	CPI  R21,9
                 __CFD19:
000e3f f030      	BRLO __CFD17
000e40 efef      	SER  R30
000e41 efff      	SER  R31
000e42 ef6f      	SER  R22
000e43 e77f      	LDI  R23,0x7F
000e44 f977      	BLD  R23,7
000e45 c01a      	RJMP __CFD15
                 __CFD17:
000e46 2777      	CLR  R23
000e47 2355      	TST  R21
000e48 f0b9      	BREQ __CFD15
                 __CFD18:
000e49 0fee      	LSL  R30
000e4a 1fff      	ROL  R31
000e4b 1f66      	ROL  R22
000e4c 1f77      	ROL  R23
000e4d 955a      	DEC  R21
000e4e f7d1      	BRNE __CFD18
000e4f c010      	RJMP __CFD15
                 __CFD11:
000e50 2777      	CLR  R23
                 __CFD12:
000e51 3058      	CPI  R21,8
000e52 f028      	BRLO __CFD13
000e53 2fef      	MOV  R30,R31
000e54 2ff6      	MOV  R31,R22
000e55 2f67      	MOV  R22,R23
000e56 5058      	SUBI R21,8
000e57 cff9      	RJMP __CFD12
                 __CFD13:
000e58 2355      	TST  R21
000e59 f031      	BREQ __CFD15
                 __CFD14:
000e5a 9576      	LSR  R23
000e5b 9567      	ROR  R22
000e5c 95f7      	ROR  R31
000e5d 95e7      	ROR  R30
000e5e 955a      	DEC  R21
000e5f f7d1      	BRNE __CFD14
                 __CFD15:
000e60 2000      	TST  R0
000e61 f40a      	BRPL __CFD16
000e62 df1e      	RCALL __ANEGD1
                 __CFD16:
000e63 915f      	POP  R21
000e64 9508      	RET
                 
                 __CDF1U:
000e65 9468      	SET
000e66 c001      	RJMP __CDF1U0
                 __CDF1:
000e67 94e8      	CLT
                 __CDF1U0:
000e68 9730      	SBIW R30,0
000e69 4060      	SBCI R22,0
000e6a 4070      	SBCI R23,0
000e6b f0b1      	BREQ __CDF10
000e6c 2400      	CLR  R0
000e6d f026      	BRTS __CDF11
000e6e 2377      	TST  R23
000e6f f412      	BRPL __CDF11
000e70 9400      	COM  R0
000e71 df0f      	RCALL __ANEGD1
                 __CDF11:
000e72 2e17      	MOV  R1,R23
000e73 e17e      	LDI  R23,30
000e74 2011      	TST  R1
                 __CDF12:
000e75 f032      	BRMI __CDF13
000e76 957a      	DEC  R23
000e77 0fee      	LSL  R30
000e78 1fff      	ROL  R31
000e79 1f66      	ROL  R22
000e7a 1c11      	ROL  R1
000e7b cff9      	RJMP __CDF12
                 __CDF13:
000e7c 2fef      	MOV  R30,R31
000e7d 2ff6      	MOV  R31,R22
000e7e 2d61      	MOV  R22,R1
000e7f 935f      	PUSH R21
000e80 df8a      	RCALL __REPACK
000e81 915f      	POP  R21
                 __CDF10:
000e82 9508      	RET
                 
                 __ZERORES:
000e83 27ee      	CLR  R30
000e84 27ff      	CLR  R31
000e85 01bf      	MOVW R22,R30
000e86 915f      	POP  R21
000e87 9508      	RET
                 
                 __MINRES:
000e88 efef      	SER  R30
000e89 efff      	SER  R31
000e8a e76f      	LDI  R22,0x7F
000e8b ef7f      	SER  R23
000e8c 915f      	POP  R21
000e8d 9508      	RET
                 
                 __MAXRES:
000e8e efef      	SER  R30
000e8f efff      	SER  R31
000e90 e76f      	LDI  R22,0x7F
000e91 e77f      	LDI  R23,0x7F
000e92 915f      	POP  R21
000e93 9508      	RET
                 
                 __MULF12:
000e94 935f      	PUSH R21
000e95 df87      	RCALL __UNPACK
000e96 3870      	CPI  R23,0x80
000e97 f359      	BREQ __ZERORES
000e98 3890      	CPI  R25,0x80
000e99 f349      	BREQ __ZERORES
000e9a 2401      	EOR  R0,R1
000e9b 9408      	SEC
000e9c 1f79      	ADC  R23,R25
000e9d f423      	BRVC __MULF124
000e9e f324      	BRLT __ZERORES
                 __MULF125:
000e9f 2000      	TST  R0
000ea0 f33a      	BRMI __MINRES
000ea1 cfec      	RJMP __MAXRES
                 __MULF124:
000ea2 920f      	PUSH R0
000ea3 931f      	PUSH R17
000ea4 932f      	PUSH R18
000ea5 933f      	PUSH R19
000ea6 934f      	PUSH R20
000ea7 2711      	CLR  R17
000ea8 2722      	CLR  R18
000ea9 2799      	CLR  R25
000eaa 9f68      	MUL  R22,R24
000eab 01a0      	MOVW R20,R0
000eac 9f8f      	MUL  R24,R31
000ead 2d30      	MOV  R19,R0
000eae 0d41      	ADD  R20,R1
000eaf 1f59      	ADC  R21,R25
000eb0 9f6b      	MUL  R22,R27
000eb1 0d30      	ADD  R19,R0
000eb2 1d41      	ADC  R20,R1
000eb3 1f59      	ADC  R21,R25
000eb4 9f8e      	MUL  R24,R30
000eb5 d027      	RCALL __MULF126
000eb6 9fbf      	MUL  R27,R31
000eb7 d025      	RCALL __MULF126
000eb8 9f6a      	MUL  R22,R26
000eb9 d023      	RCALL __MULF126
000eba 9fbe      	MUL  R27,R30
000ebb d01d      	RCALL __MULF127
000ebc 9faf      	MUL  R26,R31
000ebd d01b      	RCALL __MULF127
000ebe 9fae      	MUL  R26,R30
000ebf 0d11      	ADD  R17,R1
000ec0 1f29      	ADC  R18,R25
000ec1 1f39      	ADC  R19,R25
000ec2 1f49      	ADC  R20,R25
000ec3 1f59      	ADC  R21,R25
000ec4 2fe3      	MOV  R30,R19
000ec5 2ff4      	MOV  R31,R20
000ec6 2f65      	MOV  R22,R21
000ec7 2f52      	MOV  R21,R18
000ec8 914f      	POP  R20
000ec9 913f      	POP  R19
000eca 912f      	POP  R18
000ecb 911f      	POP  R17
000ecc 900f      	POP  R0
000ecd 2366      	TST  R22
000ece f02a      	BRMI __MULF122
000ecf 0f55      	LSL  R21
000ed0 1fee      	ROL  R30
000ed1 1fff      	ROL  R31
000ed2 1f66      	ROL  R22
000ed3 c002      	RJMP __MULF123
                 __MULF122:
000ed4 9573      	INC  R23
000ed5 f24b      	BRVS __MULF125
                 __MULF123:
000ed6 df2a      	RCALL __ROUND_REPACK
000ed7 915f      	POP  R21
000ed8 9508      	RET
                 
                 __MULF127:
000ed9 0d10      	ADD  R17,R0
000eda 1d21      	ADC  R18,R1
000edb 1f39      	ADC  R19,R25
000edc c002      	RJMP __MULF128
                 __MULF126:
000edd 0d20      	ADD  R18,R0
000ede 1d31      	ADC  R19,R1
                 __MULF128:
000edf 1f49      	ADC  R20,R25
000ee0 1f59      	ADC  R21,R25
000ee1 9508      	RET
                 
                 _delay_ms:
000ee2 9610      	adiw r26,0
000ee3 f039      	breq __delay_ms1
                 __delay_ms0:
000ee4 95a8      	wdr
                +
000ee5 ec8d     +LDI R24 , LOW ( 0xACD )
000ee6 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000ee7 9701     +SBIW R24 , 1
000ee8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
000ee9 9711      	sbiw r26,1
000eea f7c9      	brne __delay_ms0
                 __delay_ms1:
000eeb 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  50 r1 :  18 r2 :   0 r3 :   0 r4 :   8 r5 :   4 r6 :   2 r7 :   1 
r8 :  25 r9 :   7 r10:   0 r11:   0 r12:   6 r13:   7 r14:   0 r15:   4 
r16:  36 r17:  32 r18:  38 r19:  17 r20:  23 r21:  66 r22:  48 r23:  37 
r24:  25 r25:  27 r26: 397 r27: 209 r28:  25 r29:   1 r30: 690 r31: 268 
x  :  32 y  : 343 z  :  16 
Registers used: 30 out of 35 (85.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  31 add   :  26 
adiw  :  47 and   :   2 andi  :  15 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  56 
brge  :  17 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  13 
brlt  :   5 brmi  :   5 brne  :  98 brpl  :   6 brsh  :   2 brtc  :   3 
brts  :   2 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  : 395 
cbi   :  33 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  38 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   6 
cp    :  17 cpc   :  41 cpi   : 120 cpse  :   0 dec   :   6 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  15 inc   :   2 jmp   :  44 ld    :  62 ldd   : 126 ldi   : 518 
lds   :  76 lpm   :  16 lsl   :  15 lsr   :   1 mov   :  54 movw  :  57 
mul   :  16 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   2 
ori   :   9 out   :  67 pop   :  20 push  :  19 rcall : 101 ret   : 106 
reti  :   2 rjmp  : 197 rol   :  19 ror   :   7 sbc   :   5 sbci  :  10 
sbi   :  34 sbic  :  10 sbis  :   2 sbiw  :  44 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 147 std   :  43 sts   :  36 sub   :   5 subi  :  21 swap  :   2 
tst   :  13 wdr   :   2 
Instructions used: 78 out of 116 (67.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001dd8   7030    610   7640   16384  46.6%
[.dseg] 0x000060 0x0001ba      0     90     90    1024   8.8%
[.eseg] 0x000000 0x00002f      0     47     47     512   9.2%

Assembly complete, 0 errors, 22 warnings
