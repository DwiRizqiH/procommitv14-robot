
AVRASM ver. 2.1.30  d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm Tue Oct 29 15:05:32 2024

d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1083): warning: Register r4 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1084): warning: Register r5 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1085): warning: Register r6 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1086): warning: Register r7 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1087): warning: Register r8 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1088): warning: Register r9 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1089): warning: Register r10 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1090): warning: Register r11 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1091): warning: Register r13 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1092): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 11.059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hitung=R4
                 	.DEF _hitung_msb=R5
                 	.DEF _nadc7=R6
                 	.DEF _nadc7_msb=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _k=R10
                 	.DEF _k_msb=R11
                 	.DEF _pos_servo1=R13
                 	.DEF _pos_servo2=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 015b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 07cd 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 07eb 	JMP  _timer0_comp_isr
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x6:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1134): warning: .cseg .db misalignment - padding zero byte
000035 000a      	.DB  0xA
                 _0x7:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1136): warning: .cseg .db misalignment - padding zero byte
000036 0064      	.DB  0x64
                 _0x8:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1138): warning: .cseg .db misalignment - padding zero byte
000037 00c8      	.DB  0xC8
                 _0x9:
000038 ff60      	.DB  0x60,0xFF
                 _0xA:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1142): warning: .cseg .db misalignment - padding zero byte
000039 00c8      	.DB  0xC8
                 _0xB:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1144): warning: .cseg .db misalignment - padding zero byte
00003a 00dc      	.DB  0xDC
                 _0xC:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1146): warning: .cseg .db misalignment - padding zero byte
00003b 0050      	.DB  0x50
                 _0xD:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1148): warning: .cseg .db misalignment - padding zero byte
00003c 00a5      	.DB  0xA5
                 _0xE:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1150): warning: .cseg .db misalignment - padding zero byte
00003d 00aa      	.DB  0xAA
                 _0xF:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1152): warning: .cseg .db misalignment - padding zero byte
00003e 0005      	.DB  0x5
                 _0x10:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1154): warning: .cseg .db misalignment - padding zero byte
00003f 0055      	.DB  0x55
                 _0x0:
000040 6425
000041 6425
000042 6425
000043 6425      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x25,0x64
000044 6425
000045 6425
000046 6425
000047 4200      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x0,0x42
000048 6361
000049 2061
00004a 694c
00004b 656e      	.DB  0x61,0x63,0x61,0x20,0x4C,0x69,0x6E,0x65
00004c 7300
00004d 6e65
00004e 6f73
00004f 3a72      	.DB  0x0,0x73,0x65,0x6E,0x73,0x6F,0x72,0x3A
000050 6425
000051 3d20
000052 2520
000053 2064      	.DB  0x25,0x64,0x20,0x3D,0x20,0x25,0x64,0x20
000054 0020
000055 6142
000056 6163
000057 4220      	.DB  0x20,0x0,0x42,0x61,0x63,0x61,0x20,0x42
000058 6361
000059 676b
00005a 6f72
00005b 6e75      	.DB  0x61,0x63,0x6B,0x67,0x72,0x6F,0x75,0x6E
00005c 0064
00005d 6543
00005e 746e
00005f 7265      	.DB  0x64,0x0,0x43,0x65,0x6E,0x74,0x65,0x72
000060 5020
000061 696f
000062 746e
000063 2020      	.DB  0x20,0x50,0x6F,0x69,0x6E,0x74,0x20,0x20
000064 2020
000065 7300
000066 6e65
000067 6f73      	.DB  0x20,0x20,0x0,0x73,0x65,0x6E,0x73,0x6F
000068 3a72
000069 6425
00006a 2d20
00006b 3e2d      	.DB  0x72,0x3A,0x25,0x64,0x20,0x2D,0x2D,0x3E
00006c 2520
00006d 2064
00006e 0020
00006f 6425      	.DB  0x20,0x25,0x64,0x20,0x20,0x0,0x25,0x64
000070 2020
000071 0020
000072 654d
000073 756e      	.DB  0x20,0x20,0x20,0x0,0x4D,0x65,0x6E,0x75
000074 4b00
000075 6c61
000076 6269
000077 6172      	.DB  0x0,0x4B,0x61,0x6C,0x69,0x62,0x72,0x61
000078 6973
000079 5200
00007a 6e75
00007b 4220      	.DB  0x73,0x69,0x0,0x52,0x75,0x6E,0x20,0x42
00007c 746f
00007d 5300
00007e 6e65
00007f 2073      	.DB  0x6F,0x74,0x0,0x53,0x65,0x6E,0x73,0x20
000080 6157
000081 6e72
000082 0061
000083 614d      	.DB  0x57,0x61,0x72,0x6E,0x61,0x0,0x4D,0x61
000084 2070
000085 6942
000086 7572
000087 4d00      	.DB  0x70,0x20,0x42,0x69,0x72,0x75,0x0,0x4D
000088 7061
000089 4d20
00008a 7265
00008b 6861      	.DB  0x61,0x70,0x20,0x4D,0x65,0x72,0x61,0x68
00008c 4d00
00008d 746f
00008e 726f
00008f 4200      	.DB  0x0,0x4D,0x6F,0x74,0x6F,0x72,0x0,0x42
000090 7475
000091 6f74
000092 006e
000093 6143      	.DB  0x75,0x74,0x74,0x6F,0x6E,0x0,0x43,0x61
000094 6970
000095 0074
000096 6c43
000097 6369      	.DB  0x70,0x69,0x74,0x0,0x43,0x6C,0x69,0x63
000098 206b
000099 2032
00009a 6f74
00009b 7320      	.DB  0x6B,0x20,0x32,0x20,0x74,0x6F,0x20,0x73
00009c 6174
00009d 7472
00009e 5200
00009f 6e75      	.DB  0x74,0x61,0x72,0x74,0x0,0x52,0x75,0x6E
0000a0 696e
0000a1 676e
0000a2 2e2e
0000a3 002e      	.DB  0x6E,0x69,0x6E,0x67,0x2E,0x2E,0x2E,0x0
0000a4 6554
0000a5 7473
0000a6 4d20
0000a7 746f      	.DB  0x54,0x65,0x73,0x74,0x20,0x4D,0x6F,0x74
0000a8 726f
0000a9 2b00
0000aa 3031
0000ab 3030      	.DB  0x6F,0x72,0x0,0x2B,0x31,0x30,0x30,0x30
0000ac 2b20
0000ad 3031
0000ae 3030
0000af 2d00      	.DB  0x20,0x2B,0x31,0x30,0x30,0x30,0x0,0x2D
0000b0 3031
0000b1 3030
0000b2 2d20
0000b3 3031      	.DB  0x31,0x30,0x30,0x30,0x20,0x2D,0x31,0x30
0000b4 3030
0000b5 2b00
0000b6 3031
0000b7 3030      	.DB  0x30,0x30,0x0,0x2B,0x31,0x30,0x30,0x30
0000b8 2d20
0000b9 3031
0000ba 3030
0000bb 2d00      	.DB  0x20,0x2D,0x31,0x30,0x30,0x30,0x0,0x2D
0000bc 3031
0000bd 3030
0000be 2b20
0000bf 3031      	.DB  0x31,0x30,0x30,0x30,0x20,0x2B,0x31,0x30
0000c0 3030
0000c1 4300
0000c2 696c
0000c3 6b63      	.DB  0x30,0x30,0x0,0x43,0x6C,0x69,0x63,0x6B
0000c4 3120
0000c5 7420
0000c6 206f
0000c7 7865      	.DB  0x20,0x31,0x20,0x74,0x6F,0x20,0x65,0x78
0000c8 7469
0000c9 7400
0000ca 6d6f
0000cb 6f62      	.DB  0x69,0x74,0x0,0x74,0x6F,0x6D,0x62,0x6F
0000cc 206c
0000cd 203d
0000ce 2031
0000cf 2020      	.DB  0x6C,0x20,0x3D,0x20,0x31,0x20,0x20,0x20
0000d0 2020
0000d1 7400
0000d2 6d6f
0000d3 6f62      	.DB  0x20,0x20,0x0,0x74,0x6F,0x6D,0x62,0x6F
0000d4 206c
0000d5 203d
0000d6 2032
0000d7 2020      	.DB  0x6C,0x20,0x3D,0x20,0x32,0x20,0x20,0x20
0000d8 2020
0000d9 7400
0000da 6d6f
0000db 6f62      	.DB  0x20,0x20,0x0,0x74,0x6F,0x6D,0x62,0x6F
0000dc 206c
0000dd 203d
0000de 2033
0000df 2020      	.DB  0x6C,0x20,0x3D,0x20,0x33,0x20,0x20,0x20
0000e0 2020
0000e1 7400
0000e2 6d6f
0000e3 6f62      	.DB  0x20,0x20,0x0,0x74,0x6F,0x6D,0x62,0x6F
0000e4 206c
0000e5 203d
0000e6 2034
0000e7 2020      	.DB  0x6C,0x20,0x3D,0x20,0x34,0x20,0x20,0x20
0000e8 2020
0000e9 5700
0000ea 7261
0000eb 616e      	.DB  0x20,0x20,0x0,0x57,0x61,0x72,0x6E,0x61
0000ec 003a
0000ed 7845
0000ee 7469
0000ef 6e69      	.DB  0x3A,0x0,0x45,0x78,0x69,0x74,0x69,0x6E
0000f0 2e67
0000f1 2e2e
0000f2 5400
0000f3 7365      	.DB  0x67,0x2E,0x2E,0x2E,0x0,0x54,0x65,0x73
0000f4 2074
0000f5 6143
0000f6 6970
0000f7 0074      	.DB  0x74,0x20,0x43,0x61,0x70,0x69,0x74,0x0
0000f8 6143
0000f9 6970
0000fa 3a74
0000fb 3e20      	.DB  0x43,0x61,0x70,0x69,0x74,0x3A,0x20,0x3E
0000fc 3c20
0000fd 4300
0000fe 7061
0000ff 7469      	.DB  0x20,0x3C,0x0,0x43,0x61,0x70,0x69,0x74
000100 203a
000101 203c
000102 003e
000103 6143      	.DB  0x3A,0x20,0x3C,0x20,0x3E,0x0,0x43,0x61
000104 6970
000105 3a74
000106 5c20
000107 002f      	.DB  0x70,0x69,0x74,0x3A,0x20,0x5C,0x2F,0x0
000108 6143
000109 6970
00010a 3a74
00010b 2f20      	.DB  0x43,0x61,0x70,0x69,0x74,0x3A,0x20,0x2F
00010c 005c
00010d 6f48
00010e 646c
00010f 3120      	.DB  0x5C,0x0,0x48,0x6F,0x6C,0x64,0x20,0x31
000110 7420
000111 206f
000112 7865
000113 7469      	.DB  0x20,0x74,0x6F,0x20,0x65,0x78,0x69,0x74
000114 5800
000115 0044
000116 6325
000117 6425      	.DB  0x0,0x58,0x44,0x0,0x25,0x63,0x25,0x64
000118 2000
000119 2020
00011a 2020
00011b 454c      	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x4C,0x45
00011c 4947
00011d 4e4f
00011e 2020
00011f 2020      	.DB  0x47,0x49,0x4F,0x4E,0x20,0x20,0x20,0x20
000120 0020
000121 4d20
000122 4e41
000123 3420      	.DB  0x20,0x0,0x20,0x4D,0x41,0x4E,0x20,0x34
000124 4a20
000125 4d4f
000126 4142
000127 474e      	.DB  0x20,0x4A,0x4F,0x4D,0x42,0x41,0x4E,0x47
000128 0020      	.DB  0x20,0x0
                 _0x2040060:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1216): warning: .cseg .db misalignment - padding zero byte
000129 0001      	.DB  0x1
                 _0x2040000:
00012a 4e2d
00012b 4e41
00012c 4900
00012d 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1219): warning: .cseg .db misalignment - padding zero byte
00012e 0000      	.DB  0x0
                 _0x2060003:
00012f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000130 0004      	.DW  0x04
000131 0004      	.DW  0x04
000132 0066      	.DW  __REG_VARS*2
                 
000133 0001      	.DW  0x01
000134 0193      	.DW  _kp
000135 006a      	.DW  _0x6*2
                 
000136 0001      	.DW  0x01
000137 0195      	.DW  _kd
000138 006c      	.DW  _0x7*2
                 
000139 0001      	.DW  0x01
00013a 0197      	.DW  _SPEED
00013b 006e      	.DW  _0x8*2
                 
00013c 0002      	.DW  0x02
00013d 0199      	.DW  _MIN_SPEED
00013e 0070      	.DW  _0x9*2
                 
00013f 0001      	.DW  0x01
000140 019b      	.DW  _MAX_SPEED
000141 0072      	.DW  _0xA*2
                 
000142 0001      	.DW  0x01
000143 01a1      	.DW  _maxHijau
000144 0074      	.DW  _0xB*2
                 
000145 0001      	.DW  0x01
000146 01a3      	.DW  _maxKuning
000147 0076      	.DW  _0xC*2
                 
000148 0001      	.DW  0x01
000149 01a5      	.DW  _maxMerah
00014a 0078      	.DW  _0xD*2
                 
00014b 0001      	.DW  0x01
00014c 01a7      	.DW  _minHijau
00014d 007a      	.DW  _0xE*2
                 
00014e 0001      	.DW  0x01
00014f 01a9      	.DW  _minKuning
000150 007c      	.DW  _0xF*2
                 
000151 0001      	.DW  0x01
000152 01ab      	.DW  _minMerah
000153 007e      	.DW  _0x10*2
                 
000154 0001      	.DW  0x01
000155 01af      	.DW  __seed_G102
000156 0252      	.DW  _0x2040060*2
                 
000157 0002      	.DW  0x02
000158 01b3      	.DW  __base_y_G103
000159 025e      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
00015a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00015b 94f8      	CLI
00015c 27ee      	CLR  R30
00015d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00015e e0f1      	LDI  R31,1
00015f bffb      	OUT  GICR,R31
000160 bfeb      	OUT  GICR,R30
000161 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000162 e1f8      	LDI  R31,0x18
000163 bdf1      	OUT  WDTCR,R31
000164 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000165 e08d      	LDI  R24,(14-2)+1
000166 e0a2      	LDI  R26,2
000167 27bb      	CLR  R27
                 __CLEAR_REG:
000168 93ed      	ST   X+,R30
000169 958a      	DEC  R24
00016a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00016b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00016c e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00016d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00016e 93ed      	ST   X+,R30
00016f 9701      	SBIW R24,1
000170 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000171 e6e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000172 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000173 9185      	LPM  R24,Z+
000174 9195      	LPM  R25,Z+
000175 9700      	SBIW R24,0
000176 f061      	BREQ __GLOBAL_INI_END
000177 91a5      	LPM  R26,Z+
000178 91b5      	LPM  R27,Z+
000179 9005      	LPM  R0,Z+
00017a 9015      	LPM  R1,Z+
00017b 01bf      	MOVW R22,R30
00017c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00017d 9005      	LPM  R0,Z+
00017e 920d      	ST   X+,R0
00017f 9701      	SBIW R24,1
000180 f7e1      	BRNE __GLOBAL_INI_LOOP
000181 01fb      	MOVW R30,R22
000182 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000183 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000184 bfed      	OUT  SPL,R30
000185 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000186 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000187 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000188 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000189 940c 07ec 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                    .equ __lcd_port=0x18 ;PORTB
                 ; 0000 0029 #endasm
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0030 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0031 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
00018b 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00018c 81e8      	LD   R30,Y
00018d 66e0      	ORI  R30,LOW(0x60)
00018e b9e7      	OUT  0x7,R30
                 ; 0000 0032 // Start the AD conversion
                 ; 0000 0033 ADCSRA|=0x40;
00018f 9a36      	SBI  0x6,6
                 ; 0000 0034 // Wait for the AD conversion to complete
                 ; 0000 0035 while ((ADCSRA & 0x10)==0);
                 _0x3:
000190 9b34      	SBIS 0x6,4
000191 cffe      	RJMP _0x3
                 ; 0000 0036 ADCSRA|=0x10;
000192 9a34      	SBI  0x6,4
                 ; 0000 0037 return ADCH;
000193 b1e5      	IN   R30,0x5
000194 9621      	ADIW R28,1
000195 9508      	RET
                 ; 0000 0038 }
                 ; .FEND
                 ;int hitung = 0;
                 ;unsigned int nadc7 = 0;
                 ;char buff[33];
                 ;int i, k;
                 ;unsigned char pos_servo1, pos_servo2, a;
                 ;int count_btn = 0;
                 ;int count_child_btn = 0;
                 ;bool isChildSelect = false;
                 ;bool isTestTombol = false;
                 ;eeprom int garis[7], back[7], tengah[7];
                 ;char sen[7];
                 ;int sensor;
                 ;int error = 0;
                 ;int lastError = 0;
                 ;int kp = 10;
                 
                 	.DSEG
                 ;int kd = 100;
                 ;int SPEED = 200;
                 ;int MIN_SPEED = -160;
                 ;int MAX_SPEED = 200;
                 ;int count = 0;
                 ;int second = 0;
                 ;int positionD = 0;
                 ;eeprom int mapMirror; // 0 - map/lintasan bagian biru, 1 - map/lintasan bagian m ...
                 ;eeprom char pointPos;
                 ;eeprom int ringPos;
                 ;int maxHijau = 220;
                 ;int maxKuning = 80;
                 ;int maxMerah = 165;
                 ;int minHijau = 170;
                 ;int minKuning = 5;
                 ;int minMerah = 85;
                 ;void delay(int ms)
                 ; 0000 0059 {
                 
                 	.CSEG
                 _delay:
                 ; .FSTART _delay
                 ;delay_ms(ms);
000196 93ba      	ST   -Y,R27
000197 93aa      	ST   -Y,R26
                 ;	ms -> Y+0
000198 81a8      	LD   R26,Y
000199 81b9      	LDD  R27,Y+1
00019a 940e 0ea8 	CALL _delay_ms
00019c c30c      	RJMP _0x20C000A
                 ; .FEND
                 ;void lcd_kedip(int ulangi)
                 ;for(i = 0; i < ulangi; i++)
                 ;	ulangi -> Y+0
                 ;lampu=0;
                 ;delay_ms(100);
                 ;lampu=1;
                 ;delay_ms(100);
                 ;void konvert_logic()
                 ; 0000 005A {
                 _konvert_logic:
                 ; .FSTART _konvert_logic
                 ;for(i = 0; i < 7; i++)
00019d 2488      	CLR  R8
00019e 2499      	CLR  R9
                 _0x19:
00019f 940e 0bc3 	CALL SUBOPT_0x0
0001a1 f4d4      	BRGE _0x1A
                 ;if(read_adc(i) > tengah[i]) {
0001a2 940e 0bc8 	CALL SUBOPT_0x1
0001a4 17ea      	CP   R30,R26
0001a5 07fb      	CPC  R31,R27
0001a6 f434      	BRGE _0x1B
                 ;sen[i]=1;
0001a7 e8a6      	LDI  R26,LOW(_sen)
0001a8 e0b1      	LDI  R27,HIGH(_sen)
0001a9 0da8      	ADD  R26,R8
0001aa 1db9      	ADC  R27,R9
0001ab e0e1      	LDI  R30,LOW(1)
0001ac c00a      	RJMP _0x188
                 ;else if(read_adc(i) < tengah[i]) {
                 _0x1B:
0001ad 940e 0bc8 	CALL SUBOPT_0x1
0001af 17ae      	CP   R26,R30
0001b0 07bf      	CPC  R27,R31
0001b1 f434      	BRGE _0x1D
                 ;sen[i]=0;
0001b2 e8a6      	LDI  R26,LOW(_sen)
0001b3 e0b1      	LDI  R27,HIGH(_sen)
0001b4 0da8      	ADD  R26,R8
0001b5 1db9      	ADC  R27,R9
0001b6 e0e0      	LDI  R30,LOW(0)
                 _0x188:
0001b7 93ec      	ST   X,R30
                 _0x1D:
0001b8 01f4      	MOVW R30,R8
0001b9 9631      	ADIW R30,1
0001ba 014f      	MOVW R8,R30
0001bb cfe3      	RJMP _0x19
                 _0x1A:
0001bc 9508      	RET
                 ; .FEND
                 ;void logika()
                 _logika:
                 ; .FSTART _logika
                 ;sensor = (sen[6] * 64) + (sen[5] * 32) + (sen[4] * 16) + (sen[3] * 8) + (sen[2]  ...
                +
0001bd 91a0 018c+LDS R26 , _sen + ( 6 )
                 	__GETB2MN _sen,6
0001bf e4e0      	LDI  R30,LOW(64)
0001c0 9fea      	MUL  R30,R26
0001c1 01b0      	MOVW R22,R0
                +
0001c2 91a0 018b+LDS R26 , _sen + ( 5 )
                 	__GETB2MN _sen,5
0001c4 e2e0      	LDI  R30,LOW(32)
0001c5 940e 0bd8 	CALL SUBOPT_0x2
                +
0001c7 91a0 018a+LDS R26 , _sen + ( 4 )
                 	__GETB2MN _sen,4
0001c9 e1e0      	LDI  R30,LOW(16)
0001ca 940e 0bd8 	CALL SUBOPT_0x2
                +
0001cc 91a0 0189+LDS R26 , _sen + ( 3 )
                 	__GETB2MN _sen,3
0001ce e0e8      	LDI  R30,LOW(8)
0001cf 940e 0bd8 	CALL SUBOPT_0x2
                +
0001d1 91a0 0188+LDS R26 , _sen + ( 2 )
                 	__GETB2MN _sen,2
0001d3 e0e4      	LDI  R30,LOW(4)
0001d4 940e 0bd8 	CALL SUBOPT_0x2
                +
0001d6 91a0 0187+LDS R26 , _sen + ( 1 )
                 	__GETB2MN _sen,1
0001d8 e0e2      	LDI  R30,LOW(2)
0001d9 940e 0bd8 	CALL SUBOPT_0x2
0001db 91a0 0186 	LDS  R26,_sen
0001dd e0e1      	LDI  R30,LOW(1)
0001de 9fea      	MUL  R30,R26
0001df 01f0      	MOVW R30,R0
0001e0 0fe6      	ADD  R30,R22
0001e1 1ff7      	ADC  R31,R23
0001e2 93e0 018d 	STS  _sensor,R30
0001e4 93f0 018e 	STS  _sensor+1,R31
0001e6 9508      	RET
                 ; .FEND
                 ;void cek_sensor()
                 _cek_sensor:
                 ; .FSTART _cek_sensor
                 ;konvert_logic();
0001e7 dfb5      	RCALL _konvert_logic
                 ;logika();
0001e8 dfd4      	RCALL _logika
0001e9 9508      	RET
                 ; .FEND
                 ;void display_sensor()
                 _display_sensor:
                 ; .FSTART _display_sensor
                 ;konvert_logic();
0001ea dfb2      	RCALL _konvert_logic
                 ;lcd_gotoxy(9, 0);
0001eb e0e9      	LDI  R30,LOW(9)
0001ec 940e 0bdd 	CALL SUBOPT_0x3
                 ;sprintf(buff, "%d%d%d%d%d%d%d", sen[0] , sen[1] , sen[2], sen[3], sen[4], sen[5] ...
0001ee 940e 0be1 	CALL SUBOPT_0x4
                +
0001f0 e8e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001f1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001f2 93fa      	ST   -Y,R31
0001f3 93ea      	ST   -Y,R30
0001f4 91e0 0186 	LDS  R30,_sen
0001f6 940e 0be6 	CALL SUBOPT_0x5
                +
0001f8 91e0 0187+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
0001fa 940e 0be6 	CALL SUBOPT_0x5
                +
0001fc 91e0 0188+LDS R30 , _sen + ( 2 )
                 	__GETB1MN _sen,2
0001fe 940e 0be6 	CALL SUBOPT_0x5
                +
000200 91e0 0189+LDS R30 , _sen + ( 3 )
                 	__GETB1MN _sen,3
000202 940e 0be6 	CALL SUBOPT_0x5
                +
000204 91e0 018a+LDS R30 , _sen + ( 4 )
                 	__GETB1MN _sen,4
000206 940e 0be6 	CALL SUBOPT_0x5
                +
000208 91e0 018b+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
00020a 940e 0be6 	CALL SUBOPT_0x5
                +
00020c 91e0 018c+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
00020e 940e 0be6 	CALL SUBOPT_0x5
000210 e18c      	LDI  R24,28
000211 940e 0a6d 	CALL _sprintf
000213 96a0      	ADIW R28,32
                 ;lcd_puts(buff);
000214 940e 0bec 	CALL SUBOPT_0x6
000216 9508      	RET
                 ; .FEND
                 ;void scan_garis()
                 _scan_garis:
                 ; .FSTART _scan_garis
                 ;for (i = 0; i < 7; i++)
000217 2488      	CLR  R8
000218 2499      	CLR  R9
                 _0x1F:
000219 940e 0bc3 	CALL SUBOPT_0x0
00021b f4e4      	BRGE _0x20
                 ;garis[i] = read_adc(i);
00021c 940e 0bf0 	CALL SUBOPT_0x7
00021e 0fea      	ADD  R30,R26
00021f 1ffb      	ADC  R31,R27
000220 93ff      	PUSH R31
000221 93ef      	PUSH R30
000222 2da8      	MOV  R26,R8
000223 df67      	RCALL _read_adc
000224 91af      	POP  R26
000225 91bf      	POP  R27
000226 940e 0bf6 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Line");
                +
000228 e8af     +LDI R26 , LOW ( 2 * _0x0 + ( 15 ) )
000229 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW2FN _0x0,15
00022a 940e 0bfb 	CALL SUBOPT_0x9
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, garis[i]);
00022c 940e 0c03 	CALL SUBOPT_0xA
00022e 940e 0bf0 	CALL SUBOPT_0x7
000230 940e 0c0d 	CALL SUBOPT_0xB
                 ;lcd_puts(buff);
                 ;lampu = 0;
000232 940e 0c1a 	CALL SUBOPT_0xC
                 ;delay_ms(100);
                 ;lampu = 1;
000234 01f4      	MOVW R30,R8
000235 9631      	ADIW R30,1
000236 014f      	MOVW R8,R30
000237 cfe1      	RJMP _0x1F
                 _0x20:
000238 9508      	RET
                 ; .FEND
                 ;void scan_back()
                 _scan_back:
                 ; .FSTART _scan_back
                 ;for (i = 0; i < 7; i++)
000239 2488      	CLR  R8
00023a 2499      	CLR  R9
                 _0x26:
00023b 940e 0bc3 	CALL SUBOPT_0x0
00023d f4e4      	BRGE _0x27
                 ;back[i] = read_adc(i);
00023e 940e 0c21 	CALL SUBOPT_0xD
000240 0fea      	ADD  R30,R26
000241 1ffb      	ADC  R31,R27
000242 93ff      	PUSH R31
000243 93ef      	PUSH R30
000244 2da8      	MOV  R26,R8
000245 df45      	RCALL _read_adc
000246 91af      	POP  R26
000247 91bf      	POP  R27
000248 940e 0bf6 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Background");
                +
00024a eaaa     +LDI R26 , LOW ( 2 * _0x0 + ( 42 ) )
00024b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 42 ) )
                 	__POINTW2FN _0x0,42
00024c 940e 0bfb 	CALL SUBOPT_0x9
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, back[i]);
00024e 940e 0c03 	CALL SUBOPT_0xA
000250 940e 0c21 	CALL SUBOPT_0xD
000252 940e 0c0d 	CALL SUBOPT_0xB
                 ;lcd_puts(buff);
                 ;lampu = 0;
000254 940e 0c1a 	CALL SUBOPT_0xC
                 ;delay_ms(100);
                 ;lampu = 1;
000256 01f4      	MOVW R30,R8
000257 9631      	ADIW R30,1
000258 014f      	MOVW R8,R30
000259 cfe1      	RJMP _0x26
                 _0x27:
00025a 9508      	RET
                 ; .FEND
                 ;void hit_tengah()
                 _hit_tengah:
                 ; .FSTART _hit_tengah
                 ;for (i = 0; i < 7; i++)
00025b 2488      	CLR  R8
00025c 2499      	CLR  R9
                 _0x2D:
00025d 940e 0bc3 	CALL SUBOPT_0x0
00025f f5d4      	BRGE _0x2E
                 ;tengah[i] = (back[i] + garis[i]) / 2;
000260 01f4      	MOVW R30,R8
000261 e1ac      	LDI  R26,LOW(_tengah)
000262 e0b0      	LDI  R27,HIGH(_tengah)
000263 0fee      	LSL  R30
000264 1fff      	ROL  R31
000265 0fea      	ADD  R30,R26
000266 1ffb      	ADC  R31,R27
000267 01bf      	MOVW R22,R30
000268 940e 0c21 	CALL SUBOPT_0xD
00026a 0fae      	ADD  R26,R30
00026b 1fbf      	ADC  R27,R31
00026c 940e 0d94 	CALL __EEPROMRDW
00026e 010f      	MOVW R0,R30
00026f 940e 0bf0 	CALL SUBOPT_0x7
000271 0fae      	ADD  R26,R30
000272 1fbf      	ADC  R27,R31
000273 940e 0d94 	CALL __EEPROMRDW
000275 01d0      	MOVW R26,R0
000276 0fae      	ADD  R26,R30
000277 1fbf      	ADC  R27,R31
000278 e0e2      	LDI  R30,LOW(2)
000279 e0f0      	LDI  R31,HIGH(2)
00027a 940e 0d74 	CALL __DIVW21
00027c 01db      	MOVW R26,R22
00027d 940e 0da4 	CALL __EEPROMWRW
                 ;lcd_gotoxy(0, 0);
00027f e0e0      	LDI  R30,LOW(0)
000280 940e 0bdd 	CALL SUBOPT_0x3
                 ;lcd_putsf("Center Point    ");
                +
000282 ebaa     +LDI R26 , LOW ( 2 * _0x0 + ( 58 ) )
000283 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 58 ) )
                 	__POINTW2FN _0x0,58
000284 940e 0bfb 	CALL SUBOPT_0x9
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d --> %d  ", i, tengah[i]);
                +
000286 eceb     +LDI R30 , LOW ( 2 * _0x0 + ( 75 ) )
000287 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 75 ) )
                 	__POINTW1FN _0x0,75
000288 93fa      	ST   -Y,R31
000289 93ea      	ST   -Y,R30
00028a 01f4      	MOVW R30,R8
00028b 940e 0c27 	CALL SUBOPT_0xE
00028d 01f4      	MOVW R30,R8
00028e e1ac      	LDI  R26,LOW(_tengah)
00028f e0b0      	LDI  R27,HIGH(_tengah)
000290 0fee      	LSL  R30
000291 1fff      	ROL  R31
000292 940e 0c0d 	CALL SUBOPT_0xB
                 ;lcd_puts(buff);
                 ;lampu = 0;
000294 98c3      	CBI  0x18,3
                 ;lampu = 1;
000295 9ac3      	SBI  0x18,3
000296 01f4      	MOVW R30,R8
000297 9631      	ADIW R30,1
000298 014f      	MOVW R8,R30
000299 cfc3      	RJMP _0x2D
                 _0x2E:
00029a 9508      	RET
                 ; .FEND
                 ;void cekdatasensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", garis[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 0);
                 ;sprintf(buff, " %d  ", back[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, " %d  ", tengah[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 1);
                 ;sprintf(buff, " %d  ", read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(200);
                 ;void maju(unsigned char ki, unsigned char ka)
                 ; 0000 005B {
                 _maju:
                 ; .FSTART _maju
                 ;pwmka = ka;
00029b 940e 0c2c 	CALL SUBOPT_0xF
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
00029d 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
00029e 9893      	CBI  0x12,3
                 ;PORTD.6 = 0;
00029f 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
0002a0 9a97      	SBI  0x12,7
0002a1 c207      	RJMP _0x20C000A
                 ; .FEND
                 ;void mundur(unsigned char ki, unsigned char ka)
                 _mundur:
                 ; .FSTART _mundur
                 ;pwmka = ka;
0002a2 940e 0c2c 	CALL SUBOPT_0xF
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
0002a4 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002a5 9a93      	SBI  0x12,3
                 ;PORTD.6 = 1;
0002a6 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
0002a7 9897      	CBI  0x12,7
0002a8 c200      	RJMP _0x20C000A
                 ; .FEND
                 ;void kanan(unsigned char ki, unsigned char ka)
                 _kanan:
                 ; .FSTART _kanan
                 ;pwmka = ka;
0002a9 940e 0c2c 	CALL SUBOPT_0xF
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
0002ab 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002ac 9a93      	SBI  0x12,3
                 ;PORTD.6 = 0;
0002ad 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
0002ae 9a97      	SBI  0x12,7
0002af c1f9      	RJMP _0x20C000A
                 ; .FEND
                 ;void kiri(unsigned char ki, unsigned char ka)
                 _kiri:
                 ; .FSTART _kiri
                 ;pwmka = ka;
0002b0 940e 0c2c 	CALL SUBOPT_0xF
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
0002b2 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
0002b3 9893      	CBI  0x12,3
                 ;PORTD.6 = 1;
0002b4 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
0002b5 9897      	CBI  0x12,7
0002b6 c1f2      	RJMP _0x20C000A
                 ; .FEND
                 ;void setMotor(int ki, int ka)
                 _setMotor:
                 ; .FSTART _setMotor
                 ;pwmki = abs(ki);
0002b7 93ba      	ST   -Y,R27
0002b8 93aa      	ST   -Y,R26
                 ;	ki -> Y+2
                 ;	ka -> Y+0
0002b9 81aa      	LDD  R26,Y+2
0002ba 81bb      	LDD  R27,Y+2+1
0002bb 940e 0ac2 	CALL _abs
0002bd bdfb      	OUT  0x2A+1,R31
0002be bdea      	OUT  0x2A,R30
                 ;if (ki > 0)
0002bf 81aa      	LDD  R26,Y+2
0002c0 81bb      	LDD  R27,Y+2+1
0002c1 940e 0dbd 	CALL __CPW02
0002c3 f41c      	BRGE _0x56
                 ;PORTD.2 = 1;
0002c4 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
0002c5 9893      	CBI  0x12,3
                 ;else
0002c6 c002      	RJMP _0x5B
                 _0x56:
                 ;PORTD.2 = 0;
0002c7 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002c8 9a93      	SBI  0x12,3
                 _0x5B:
                 ;pwmka = abs(ka);
0002c9 81a8      	LD   R26,Y
0002ca 81b9      	LDD  R27,Y+1
0002cb 940e 0ac2 	CALL _abs
0002cd bdf9      	OUT  0x28+1,R31
0002ce bde8      	OUT  0x28,R30
                 ;if (ka > 0)
0002cf 940e 0c36 	CALL SUBOPT_0x10
0002d1 f41c      	BRGE _0x60
                 ;PORTD.7 = 1;
0002d2 9a97      	SBI  0x12,7
                 ;PORTD.6 = 0;
0002d3 9896      	CBI  0x12,6
                 ;else
0002d4 c002      	RJMP _0x65
                 _0x60:
                 ;PORTD.7 = 0;
0002d5 9897      	CBI  0x12,7
                 ;PORTD.6 = 1;
0002d6 9a96      	SBI  0x12,6
                 _0x65:
0002d7 c1c5      	RJMP _0x20C000B
                 ; .FEND
                 ;void rem(int nilai_rem)
                 _rem:
                 ; .FSTART _rem
                 ;PORTD .4 = 1;
0002d8 93ba      	ST   -Y,R27
0002d9 93aa      	ST   -Y,R26
                 ;	nilai_rem -> Y+0
0002da 9a94      	SBI  0x12,4
                 ;PORTD .5 = 1;
0002db 9a95      	SBI  0x12,5
                 ;PORTD .2 = 0;
0002dc 9892      	CBI  0x12,2
                 ;PORTD .3 = 0;
0002dd 9893      	CBI  0x12,3
                 ;PORTD .6 = 0;
0002de 9896      	CBI  0x12,6
                 ;PORTD .7 = 0;
0002df 9897      	CBI  0x12,7
                 ;delay_ms(nilai_rem);
0002e0 81a8      	LD   R26,Y
0002e1 81b9      	LDD  R27,Y+1
0002e2 940e 0ea8 	CALL _delay_ms
0002e4 c1c4      	RJMP _0x20C000A
                 ; .FEND
                 ;void maju_delay(int kec, int lama)
                 _maju_delay:
                 ; .FSTART _maju_delay
                 ;maju(kec, kec);
0002e5 93ba      	ST   -Y,R27
0002e6 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
0002e7 81ea      	LDD  R30,Y+2
0002e8 93ea      	ST   -Y,R30
0002e9 81ab      	LDD  R26,Y+3
0002ea dfb0      	RCALL _maju
                 ;delay(lama);
0002eb 940e 0c3b 	CALL SUBOPT_0x11
0002ed c1af      	RJMP _0x20C000B
                 ; .FEND
                 ;void pilihSpeed(int kec)
                 _pilihSpeed:
                 ; .FSTART _pilihSpeed
                 ;kp = kec * 0.15;
0002ee 93ba      	ST   -Y,R27
0002ef 93aa      	ST   -Y,R26
                 ;	kec -> Y+0
0002f0 940e 0c3f 	CALL SUBOPT_0x12
                +
0002f2 e9aa     +LDI R26 , LOW ( 0x3E19999A )
0002f3 e9b9     +LDI R27 , HIGH ( 0x3E19999A )
0002f4 e189     +LDI R24 , BYTE3 ( 0x3E19999A )
0002f5 e39e     +LDI R25 , BYTE4 ( 0x3E19999A )
                 	__GETD2N 0x3E19999A
0002f6 940e 0e5a 	CALL __MULF12
0002f8 e9a3      	LDI  R26,LOW(_kp)
0002f9 e0b1      	LDI  R27,HIGH(_kp)
0002fa 940e 0c46 	CALL SUBOPT_0x13
                 ;kd = kec * 0.6;
0002fc 940e 0c3f 	CALL SUBOPT_0x12
                +
0002fe e9aa     +LDI R26 , LOW ( 0x3F19999A )
0002ff e9b9     +LDI R27 , HIGH ( 0x3F19999A )
000300 e189     +LDI R24 , BYTE3 ( 0x3F19999A )
000301 e39f     +LDI R25 , BYTE4 ( 0x3F19999A )
                 	__GETD2N 0x3F19999A
000302 940e 0e5a 	CALL __MULF12
000304 e9a5      	LDI  R26,LOW(_kd)
000305 e0b1      	LDI  R27,HIGH(_kd)
000306 940e 0c46 	CALL SUBOPT_0x13
                 ;SPEED = kec;
000308 81e8      	LD   R30,Y
000309 81f9      	LDD  R31,Y+1
00030a 93e0 0197 	STS  _SPEED,R30
00030c 93f0 0198 	STS  _SPEED+1,R31
                 ;MIN_SPEED = -(kec * 0.75);
00030e 940e 0c3f 	CALL SUBOPT_0x12
                +
000310 e0a0     +LDI R26 , LOW ( 0x3F400000 )
000311 e0b0     +LDI R27 , HIGH ( 0x3F400000 )
000312 e480     +LDI R24 , BYTE3 ( 0x3F400000 )
000313 e39f     +LDI R25 , BYTE4 ( 0x3F400000 )
                 	__GETD2N 0x3F400000
000314 940e 0e5a 	CALL __MULF12
000316 940e 0dc1 	CALL __ANEGF1
000318 e9a9      	LDI  R26,LOW(_MIN_SPEED)
000319 e0b1      	LDI  R27,HIGH(_MIN_SPEED)
00031a 940e 0c46 	CALL SUBOPT_0x13
                 ;MAX_SPEED = kec;
00031c 81e8      	LD   R30,Y
00031d 81f9      	LDD  R31,Y+1
00031e 93e0 019b 	STS  _MAX_SPEED,R30
000320 93f0 019c 	STS  _MAX_SPEED+1,R31
000322 c186      	RJMP _0x20C000A
                 ; .FEND
                 ;void maju_cari_garis()
                 ;maju(180, 182);
                 ;cek_sensor(); // 0b01000000)!=0b00000000)
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;rem(100);
                 ;void parkir()
                 ;lampu = 0;
                 ;while (1)
                 ;rem(100);
                 ;void scan(int kec)
                 _scan:
                 ; .FSTART _scan
                 ;int rateError;
                 ;int moveVal, moveLeft, moveRight;
                 ;pilihSpeed(kec);
000323 93ba      	ST   -Y,R27
000324 93aa      	ST   -Y,R26
000325 9722      	SBIW R28,2
000326 940e 0d31 	CALL __SAVELOCR6
                 ;	kec -> Y+8
                 ;	rateError -> R16,R17
                 ;	moveVal -> R18,R19
                 ;	moveLeft -> R20,R21
                 ;	moveRight -> Y+6
000328 85a8      	LDD  R26,Y+8
000329 85b9      	LDD  R27,Y+8+1
00032a dfc3      	RCALL _pilihSpeed
                 ;sensor = sensor & 0b01111111;
00032b 940e 0c4b 	CALL SUBOPT_0x14
00032d 77ef      	ANDI R30,LOW(0x7F)
00032e 70f0      	ANDI R31,HIGH(0x7F)
00032f 93e0 018d 	STS  _sensor,R30
000331 93f0 018e 	STS  _sensor+1,R31
                 ;switch (sensor) //  1=kiri 8=kanan
000333 940e 0c4b 	CALL SUBOPT_0x14
                 ;{               //  7......1
                 ;case 0b00000001:
000335 30e1      	CPI  R30,LOW(0x1)
000336 e0a0      	LDI  R26,HIGH(0x1)
000337 07fa      	CPC  R31,R26
000338 f419      	BRNE _0x81
                 ;error = -6;
000339 efea      	LDI  R30,LOW(65530)
00033a efff      	LDI  R31,HIGH(65530)
00033b c056      	RJMP _0x189
                 ;break; // DOMINAN KANAN
                 ;case 0b00000011:
                 _0x81:
00033c 30e3      	CPI  R30,LOW(0x3)
00033d e0a0      	LDI  R26,HIGH(0x3)
00033e 07fa      	CPC  R31,R26
00033f f419      	BRNE _0x82
                 ;error = -5;
000340 efeb      	LDI  R30,LOW(65531)
000341 efff      	LDI  R31,HIGH(65531)
000342 c04f      	RJMP _0x189
                 ;break;
                 ;case 0b00000010:
                 _0x82:
000343 30e2      	CPI  R30,LOW(0x2)
000344 e0a0      	LDI  R26,HIGH(0x2)
000345 07fa      	CPC  R31,R26
000346 f419      	BRNE _0x83
                 ;error = -4;
000347 efec      	LDI  R30,LOW(65532)
000348 efff      	LDI  R31,HIGH(65532)
000349 c048      	RJMP _0x189
                 ;break;
                 ;case 0b00000110:
                 _0x83:
00034a 30e6      	CPI  R30,LOW(0x6)
00034b e0a0      	LDI  R26,HIGH(0x6)
00034c 07fa      	CPC  R31,R26
00034d f419      	BRNE _0x84
                 ;error = -3;
00034e efed      	LDI  R30,LOW(65533)
00034f efff      	LDI  R31,HIGH(65533)
000350 c041      	RJMP _0x189
                 ;break;
                 ;case 0b00000100:
                 _0x84:
000351 30e4      	CPI  R30,LOW(0x4)
000352 e0a0      	LDI  R26,HIGH(0x4)
000353 07fa      	CPC  R31,R26
000354 f419      	BRNE _0x85
                 ;error = -2;
000355 efee      	LDI  R30,LOW(65534)
000356 efff      	LDI  R31,HIGH(65534)
000357 c03a      	RJMP _0x189
                 ;break;
                 ;case 0b00001100:
                 _0x85:
000358 30ec      	CPI  R30,LOW(0xC)
000359 e0a0      	LDI  R26,HIGH(0xC)
00035a 07fa      	CPC  R31,R26
00035b f419      	BRNE _0x86
                 ;error = -1;
00035c efef      	LDI  R30,LOW(65535)
00035d efff      	LDI  R31,HIGH(65535)
00035e c033      	RJMP _0x189
                 ;break;
                 ;case 0b00001000:
                 _0x86:
00035f 30e8      	CPI  R30,LOW(0x8)
000360 e0a0      	LDI  R26,HIGH(0x8)
000361 07fa      	CPC  R31,R26
000362 f431      	BRNE _0x87
                 ;error = 0;
000363 e0e0      	LDI  R30,LOW(0)
000364 93e0 018f 	STS  _error,R30
000366 93e0 0190 	STS  _error+1,R30
                 ;break;
000368 c02d      	RJMP _0x80
                 ;case 0b00011000:
                 _0x87:
000369 31e8      	CPI  R30,LOW(0x18)
00036a e0a0      	LDI  R26,HIGH(0x18)
00036b 07fa      	CPC  R31,R26
00036c f419      	BRNE _0x88
                 ;error = 1;
00036d e0e1      	LDI  R30,LOW(1)
00036e e0f0      	LDI  R31,HIGH(1)
00036f c022      	RJMP _0x189
                 ;break;
                 ;case 0b00010000:
                 _0x88:
000370 31e0      	CPI  R30,LOW(0x10)
000371 e0a0      	LDI  R26,HIGH(0x10)
000372 07fa      	CPC  R31,R26
000373 f419      	BRNE _0x89
                 ;error = 2;
000374 e0e2      	LDI  R30,LOW(2)
000375 e0f0      	LDI  R31,HIGH(2)
000376 c01b      	RJMP _0x189
                 ;break;
                 ;case 0b00110000:
                 _0x89:
000377 33e0      	CPI  R30,LOW(0x30)
000378 e0a0      	LDI  R26,HIGH(0x30)
000379 07fa      	CPC  R31,R26
00037a f419      	BRNE _0x8A
                 ;error = 3;
00037b e0e3      	LDI  R30,LOW(3)
00037c e0f0      	LDI  R31,HIGH(3)
00037d c014      	RJMP _0x189
                 ;break;
                 ;case 0b00100000:
                 _0x8A:
00037e 32e0      	CPI  R30,LOW(0x20)
00037f e0a0      	LDI  R26,HIGH(0x20)
000380 07fa      	CPC  R31,R26
000381 f419      	BRNE _0x8B
                 ;error = 4;
000382 e0e4      	LDI  R30,LOW(4)
000383 e0f0      	LDI  R31,HIGH(4)
000384 c00d      	RJMP _0x189
                 ;break;
                 ;case 0b01100000:
                 _0x8B:
000385 36e0      	CPI  R30,LOW(0x60)
000386 e0a0      	LDI  R26,HIGH(0x60)
000387 07fa      	CPC  R31,R26
000388 f419      	BRNE _0x8C
                 ;error = 5;
000389 e0e5      	LDI  R30,LOW(5)
00038a e0f0      	LDI  R31,HIGH(5)
00038b c006      	RJMP _0x189
                 ;break;
                 ;case 0b01000000:
                 _0x8C:
00038c 34e0      	CPI  R30,LOW(0x40)
00038d e0a0      	LDI  R26,HIGH(0x40)
00038e 07fa      	CPC  R31,R26
00038f f431      	BRNE _0x80
                 ;error = 6;
000390 e0e6      	LDI  R30,LOW(6)
000391 e0f0      	LDI  R31,HIGH(6)
                 _0x189:
000392 93e0 018f 	STS  _error,R30
000394 93f0 0190 	STS  _error+1,R31
                 ;break; // DOMINAN KIRI
                 _0x80:
                 ;rateError = error - lastError;
000396 91a0 0191 	LDS  R26,_lastError
000398 91b0 0192 	LDS  R27,_lastError+1
00039a 91e0 018f 	LDS  R30,_error
00039c 91f0 0190 	LDS  R31,_error+1
00039e 1bea      	SUB  R30,R26
00039f 0bfb      	SBC  R31,R27
0003a0 018f      	MOVW R16,R30
                 ;lastError = error;
0003a1 91e0 018f 	LDS  R30,_error
0003a3 91f0 0190 	LDS  R31,_error+1
0003a5 93e0 0191 	STS  _lastError,R30
0003a7 93f0 0192 	STS  _lastError+1,R31
                 ;moveVal = (int)(error * kp) + (rateError * kd);
0003a9 91e0 0193 	LDS  R30,_kp
0003ab 91f0 0194 	LDS  R31,_kp+1
0003ad 91a0 018f 	LDS  R26,_error
0003af 91b0 0190 	LDS  R27,_error+1
0003b1 940e 0d5c 	CALL __MULW12
0003b3 01bf      	MOVW R22,R30
0003b4 91e0 0195 	LDS  R30,_kd
0003b6 91f0 0196 	LDS  R31,_kd+1
0003b8 01d8      	MOVW R26,R16
0003b9 940e 0d5c 	CALL __MULW12
0003bb 0fe6      	ADD  R30,R22
0003bc 1ff7      	ADC  R31,R23
0003bd 019f      	MOVW R18,R30
                 ;moveLeft = SPEED + moveVal;
0003be 91a0 0197 	LDS  R26,_SPEED
0003c0 91b0 0198 	LDS  R27,_SPEED+1
0003c2 0fea      	ADD  R30,R26
0003c3 1ffb      	ADC  R31,R27
0003c4 01af      	MOVW R20,R30
                 ;moveRight = SPEED - moveVal;
0003c5 91e0 0197 	LDS  R30,_SPEED
0003c7 91f0 0198 	LDS  R31,_SPEED+1
0003c9 1be2      	SUB  R30,R18
0003ca 0bf3      	SBC  R31,R19
0003cb 83ee      	STD  Y+6,R30
0003cc 83ff      	STD  Y+6+1,R31
                 ;if (moveLeft > MAX_SPEED)
0003cd 940e 0c50 	CALL SUBOPT_0x15
0003cf 17e4      	CP   R30,R20
0003d0 07f5      	CPC  R31,R21
0003d1 f424      	BRGE _0x8E
                 ;moveLeft = MAX_SPEED;
                +
0003d2 9140 019b+LDS R20 , 0 + ( _MAX_SPEED )
0003d4 9150 019c+LDS R21 , 0 + ( _MAX_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MAX_SPEED
                 ;if (moveLeft < MIN_SPEED)
                 _0x8E:
0003d6 940e 0c55 	CALL SUBOPT_0x16
0003d8 174e      	CP   R20,R30
0003d9 075f      	CPC  R21,R31
0003da f424      	BRGE _0x8F
                 ;moveLeft = MIN_SPEED;
                +
0003db 9140 0199+LDS R20 , 0 + ( _MIN_SPEED )
0003dd 9150 019a+LDS R21 , 0 + ( _MIN_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MIN_SPEED
                 ;if (moveRight > MAX_SPEED)
                 _0x8F:
0003df 940e 0c50 	CALL SUBOPT_0x15
0003e1 81ae      	LDD  R26,Y+6
0003e2 81bf      	LDD  R27,Y+6+1
0003e3 17ea      	CP   R30,R26
0003e4 07fb      	CPC  R31,R27
0003e5 f424      	BRGE _0x90
                 ;moveRight = MAX_SPEED;
0003e6 940e 0c50 	CALL SUBOPT_0x15
0003e8 83ee      	STD  Y+6,R30
0003e9 83ff      	STD  Y+6+1,R31
                 ;if (moveRight < MIN_SPEED)
                 _0x90:
0003ea 940e 0c55 	CALL SUBOPT_0x16
0003ec 81ae      	LDD  R26,Y+6
0003ed 81bf      	LDD  R27,Y+6+1
0003ee 17ae      	CP   R26,R30
0003ef 07bf      	CPC  R27,R31
0003f0 f424      	BRGE _0x91
                 ;moveRight = MIN_SPEED;
0003f1 940e 0c55 	CALL SUBOPT_0x16
0003f3 83ee      	STD  Y+6,R30
0003f4 83ff      	STD  Y+6+1,R31
                 ;setMotor(moveLeft, moveRight);
                 _0x91:
0003f5 935a      	ST   -Y,R21
0003f6 934a      	ST   -Y,R20
0003f7 85a8      	LDD  R26,Y+8
0003f8 85b9      	LDD  R27,Y+8+1
0003f9 debd      	RCALL _setMotor
0003fa 940e 0d38 	CALL __LOADLOCR6
0003fc 962a      	ADIW R28,10
0003fd 9508      	RET
                 ; .FEND
                 ;void scanX(int brpkali, int kec)
                 _scanX:
                 ; .FSTART _scanX
                 ;while (hitung < brpkali)
0003fe 93ba      	ST   -Y,R27
0003ff 93aa      	ST   -Y,R26
                 ;	brpkali -> Y+2
                 ;	kec -> Y+0
                 _0x92:
000400 81ea      	LDD  R30,Y+2
000401 81fb      	LDD  R31,Y+2+1
000402 164e      	CP   R4,R30
000403 065f      	CPC  R5,R31
000404 f4d4      	BRGE _0x94
                 ;while ((sensor & 0b00011100) != 0b00011100)
                 _0x95:
000405 940e 0c5a 	CALL SUBOPT_0x17
000407 f029      	BREQ _0x97
                 ;cek_sensor();
000408 ddde      	RCALL _cek_sensor
                 ;scan(kec);
000409 81a8      	LD   R26,Y
00040a 81b9      	LDD  R27,Y+1
00040b df17      	RCALL _scan
00040c cff8      	RJMP _0x95
                 _0x97:
                 ;while ((sensor & 0b00011100) == 0b00011100)
                 _0x98:
00040d 940e 0c5a 	CALL SUBOPT_0x17
00040f f471      	BRNE _0x9A
                 ;cek_sensor();
000410 ddd6      	RCALL _cek_sensor
                 ;lampu = 0;
000411 98c3      	CBI  0x18,3
                 ;scan(kec);
000412 81a8      	LD   R26,Y
000413 81b9      	LDD  R27,Y+1
000414 df0e      	RCALL _scan
                 ;if ((sensor & 0b00011100) != 0b00011100)
000415 940e 0c5a 	CALL SUBOPT_0x17
000417 f029      	BREQ _0x9D
                 ;hitung++;
000418 01f2      	MOVW R30,R4
000419 9631      	ADIW R30,1
00041a 012f      	MOVW R4,R30
00041b 9731      	SBIW R30,1
                 ;lampu = 1;
00041c 9ac3      	SBI  0x18,3
                 ;};
                 _0x9D:
00041d cfef      	RJMP _0x98
                 _0x9A:
                 ;};
00041e cfe1      	RJMP _0x92
                 _0x94:
                 ;hitung = 0;
00041f 2444      	CLR  R4
000420 2455      	CLR  R5
000421 c07b      	RJMP _0x20C000B
                 ; .FEND
                 ;void scanTimer(int countGoal, int kec, int lama)
                 ;count = 0;
                 ;	countGoal -> Y+4
                 ;	kec -> Y+2
                 ;	lama -> Y+0
                 ;while (count < countGoal)
                 ;cek_sensor();
                 ;scan(kec);
                 ;count++;
                 ;rem(lama);
                 ;void scanKotak(int brpkali, int kec, int lama_rem) {
                 _scanKotak:
                 ; .FSTART _scanKotak
                 ;while (hitung < brpkali) {
000422 93ba      	ST   -Y,R27
000423 93aa      	ST   -Y,R26
                 ;	brpkali -> Y+4
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
                 _0xA3:
000424 81ec      	LDD  R30,Y+4
000425 81fd      	LDD  R31,Y+4+1
000426 164e      	CP   R4,R30
000427 065f      	CPC  R5,R31
000428 f4cc      	BRGE _0xA5
                 ;while(1)
                 _0xA6:
                 ;cek_sensor();
000429 ddbd      	RCALL _cek_sensor
                 ;scan(kec);
00042a 81aa      	LDD  R26,Y+2
00042b 81bb      	LDD  R27,Y+2+1
00042c def6      	RCALL _scan
                 ;if((sensor & 0b01111111) == 0b01111111) {
00042d 940e 0c4b 	CALL SUBOPT_0x14
00042f 77ef      	ANDI R30,0x7F
000430 37ef      	CPI  R30,LOW(0x7F)
000431 f471      	BRNE _0xA9
                 ;hitung++; mundur(kec, kec); delay(lama_rem); rem(10); break;
000432 01f2      	MOVW R30,R4
000433 9631      	ADIW R30,1
000434 012f      	MOVW R4,R30
000435 9731      	SBIW R30,1
000436 81ea      	LDD  R30,Y+2
000437 93ea      	ST   -Y,R30
000438 81ab      	LDD  R26,Y+3
000439 de68      	RCALL _mundur
00043a 940e 0c3b 	CALL SUBOPT_0x11
00043c e0aa      	LDI  R26,LOW(10)
00043d e0b0      	LDI  R27,0
00043e de99      	RCALL _rem
00043f c001      	RJMP _0xA8
                 _0xA9:
000440 cfe8      	RJMP _0xA6
                 _0xA8:
000441 cfe2      	RJMP _0xA3
                 _0xA5:
                 ;hitung = 0;
000442 2444      	CLR  R4
000443 2455      	CLR  R5
000444 9626      	ADIW R28,6
000445 9508      	RET
                 ; .FEND
                 ;void scanTka(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b01110000) != 0b01110000) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b01110000) == 0b01110000)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b01110000) != 0b01110000)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scanTki(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b00000111) != 0b00000111) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b00000111) == 0b00000111)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b00000111) != 0b00000111)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scan7ki()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b01000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ka()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b00000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ki2()
                 ;cek_sensor();
                 ;while (sensor == 0b00000000) // sensor !=0b00111111||0b00000011|| 0b00000001
                 ;cek_sensor();
                 ;scan(170);
                 ;void belki(int kec, int lama)
                 _belki:
                 ; .FSTART _belki
                 ;cek_sensor();
000446 93ba      	ST   -Y,R27
000447 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
000448 dd9e      	RCALL _cek_sensor
                 ;while (sen[0] || sen[1])
                 _0xC7:
000449 91e0 0186 	LDS  R30,_sen
00044b 30e0      	CPI  R30,0
00044c f421      	BRNE _0xCA
                +
00044d 91e0 0187+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
00044f 30e0      	CPI  R30,0
000450 f019      	BREQ _0xC9
                 _0xCA:
                 ;kiri(kec, kec);
000451 940e 0c5e 	CALL SUBOPT_0x18
                 ;cek_sensor();
000453 cff5      	RJMP _0xC7
                 _0xC9:
                 ;while (!sen[0] && !sen[1])
                 _0xCC:
000454 91e0 0186 	LDS  R30,_sen
000456 30e0      	CPI  R30,0
000457 f421      	BRNE _0xCF
                +
000458 91e0 0187+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
00045a 30e0      	CPI  R30,0
00045b f009      	BREQ _0xD0
                 _0xCF:
00045c c003      	RJMP _0xCE
                 _0xD0:
                 ;kiri(kec, kec);
00045d 940e 0c5e 	CALL SUBOPT_0x18
                 ;cek_sensor();
00045f cff4      	RJMP _0xCC
                 _0xCE:
                 ;if (lama > 0)
000460 940e 0c36 	CALL SUBOPT_0x10
000462 f41c      	BRGE _0xD1
                 ;rem(lama);
000463 81a8      	LD   R26,Y
000464 81b9      	LDD  R27,Y+1
000465 de72      	RCALL _rem
                 _0xD1:
000466 c036      	RJMP _0x20C000B
                 ; .FEND
                 ;void belki2()
                 ;cek_sensor();
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;kiri(150, 150);
                 ;void belka(int kec, int lama)
                 _belka:
                 ; .FSTART _belka
                 ;cek_sensor();
000467 93ba      	ST   -Y,R27
000468 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
000469 dd7d      	RCALL _cek_sensor
                 ;while (sen[5] || sen[6])
                 _0xD5:
                +
00046a 91e0 018b+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
00046c 30e0      	CPI  R30,0
00046d f421      	BRNE _0xD8
                +
00046e 91e0 018c+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
000470 30e0      	CPI  R30,0
000471 f019      	BREQ _0xD7
                 _0xD8:
                 ;kanan(kec, kec);
000472 940e 0c65 	CALL SUBOPT_0x19
                 ;cek_sensor();
000474 cff5      	RJMP _0xD5
                 _0xD7:
                 ;while (!sen[5] && !sen[6])
                 _0xDA:
                +
000475 91e0 018b+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
000477 30e0      	CPI  R30,0
000478 f421      	BRNE _0xDD
                +
000479 91e0 018c+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
00047b 30e0      	CPI  R30,0
00047c f009      	BREQ _0xDE
                 _0xDD:
00047d c003      	RJMP _0xDC
                 _0xDE:
                 ;kanan(kec, kec);
00047e 940e 0c65 	CALL SUBOPT_0x19
                 ;cek_sensor();
000480 cff4      	RJMP _0xDA
                 _0xDC:
                 ;if (lama > 0)
000481 940e 0c36 	CALL SUBOPT_0x10
000483 f41c      	BRGE _0xDF
                 ;rem(lama);
000484 81a8      	LD   R26,Y
000485 81b9      	LDD  R27,Y+1
000486 de51      	RCALL _rem
                 _0xDF:
000487 c015      	RJMP _0x20C000B
                 ; .FEND
                 ;void belkacenter()
                 ;cek_sensor();
                 ;while ((sensor & 0b00001000) != 0b00001000)
                 ;cek_sensor();
                 ;kanan(180, 180);
                 ;if ((sensor & 0b10000000) == 0b10000000)
                 ;lcd_kedip(1);
                 ;void scan_delay(int ms)
                 ;k = 0;
                 ;	ms -> Y+0
                 ;maju(172, 170);
                 ;while (k < ms / 10)
                 ;delay_ms(10);
                 ;k++;
                 ;cek_sensor();
                 ;scan(180);
                 ;void belokKanan(int kec, int lama_rem) {
                 _belokKanan:
                 ; .FSTART _belokKanan
                 ;if(mapMirror == map_biru) {
000488 940e 0c6c 	CALL SUBOPT_0x1A
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
00048a f421      	BRNE _0xE7
                 ;belka(kec, lama_rem);
00048b 940e 0c74 	CALL SUBOPT_0x1B
00048d dfd9      	RCALL _belka
                 ;} else {
00048e c003      	RJMP _0xE8
                 _0xE7:
                 ;belki(kec, lama_rem);
00048f 940e 0c74 	CALL SUBOPT_0x1B
000491 dfb4      	RCALL _belki
                 _0xE8:
000492 c00a      	RJMP _0x20C000B
                 ; .FEND
                 ;void belokKiri(int kec, int lama_rem) {
                 _belokKiri:
                 ; .FSTART _belokKiri
                 ;if(mapMirror == map_biru) {
000493 940e 0c6c 	CALL SUBOPT_0x1A
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
000495 f421      	BRNE _0xE9
                 ;belki(kec, lama_rem);
000496 940e 0c74 	CALL SUBOPT_0x1B
000498 dfad      	RCALL _belki
                 ;} else {
000499 c003      	RJMP _0xEA
                 _0xE9:
                 ;belka(kec, lama_rem);
00049a 940e 0c74 	CALL SUBOPT_0x1B
00049c dfca      	RCALL _belka
                 _0xEA:
                 _0x20C000B:
00049d 9624      	ADIW R28,4
00049e 9508      	RET
                 ; .FEND
                 ;void griper()
                 ; 0000 005D {
                 ;capit_lepas;
                 ;lengan_tengah;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_ambil;
                 ;delay_ms(7000);
                 ;lengan_atas;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_lepas;
                 ;void ambil(int lama)
                 _ambil:
                 ; .FSTART _ambil
                 ;capit_ambil;
00049f 93ba      	ST   -Y,R27
0004a0 93aa      	ST   -Y,R26
                 ;	lama -> Y+0
0004a1 eeed      	LDI  R30,LOW(237)
0004a2 2ede      	MOV  R13,R30
                 ;delay(lama);
0004a3 940e 0c3b 	CALL SUBOPT_0x11
                 ;lengan_atas;
0004a5 eeea      	LDI  R30,LOW(234)
0004a6 2ece      	MOV  R12,R30
                 ;delay(lama);
0004a7 940e 0c3b 	CALL SUBOPT_0x11
                 _0x20C000A:
0004a9 9622      	ADIW R28,2
0004aa 9508      	RET
                 ; .FEND
                 ;void taruh(int lama)
                 ;lengan_bawah;
                 ;	lama -> Y+0
                 ;delay(lama);
                 ;capit_lepas;
                 ;delay(lama);
                 ;lengan_atas;
                 ;void bawah_lepas()
                 _bawah_lepas:
                 ; .FSTART _bawah_lepas
                 ;lengan_bawah;
0004ab efe0      	LDI  R30,LOW(240)
0004ac 2ece      	MOV  R12,R30
                 ;capit_lepas;
0004ad eee6      	LDI  R30,LOW(230)
0004ae 2ede      	MOV  R13,R30
0004af 9508      	RET
                 ; .FEND
                 ;void atas_lepas()
                 ;lengan_atas;
                 ;capit_lepas;
                 ;void bacawarna()
                 ; 0000 005E {
                 _bacawarna:
                 ; .FSTART _bacawarna
                 ;nadc7 = read_adc(7);
0004b0 e0a7      	LDI  R26,LOW(7)
0004b1 dcd9      	RCALL _read_adc
0004b2 2e6e      	MOV  R6,R30
0004b3 2477      	CLR  R7
                 ;lcd_gotoxy(13, 1);
0004b4 e0ed      	LDI  R30,LOW(13)
0004b5 940e 0c7b 	CALL SUBOPT_0x1C
                 ;sprintf(buff, "%d   ", nadc7);
0004b7 940e 0be1 	CALL SUBOPT_0x4
                +
0004b9 edee     +LDI R30 , LOW ( 2 * _0x0 + ( 94 ) )
0004ba e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 94 ) )
                 	__POINTW1FN _0x0,94
0004bb 93fa      	ST   -Y,R31
0004bc 93ea      	ST   -Y,R30
0004bd 01f3      	MOVW R30,R6
0004be 2766      	CLR  R22
0004bf 2777      	CLR  R23
0004c0 940e 0d8f 	CALL __PUTPARD1
0004c2 e084      	LDI  R24,4
0004c3 940e 0a6d 	CALL _sprintf
0004c5 9628      	ADIW R28,8
                 ;lcd_puts(buff);
0004c6 c301      	RJMP _0x20C0006
                 ; .FEND
                 ;int checkWarna() {
                 ;int warna;
                 ;nadc7 = read_adc(7);
                 ;	warna -> R16,R17
                 ;if(nadc7 > minMerah && nadc7 < maxMerah){
                 ;warna = 0;
                 ;} else if(nadc7 > minKuning && nadc7 < maxKuning){
                 ;warna = 1;
                 ;} else if(nadc7 > minHijau && nadc7 < maxHijau){
                 ;warna = 2;
                 ;} else {
                 ;warna = 3;
                 ;return warna;
                 ;int isWarna;
                 ;void fromReloadToA();
                 ;void fromReloadToB();
                 ;void fromReloadToZ();
                 ;void fromAToReload();
                 ;void fromBToReload();
                 ;void Program_Jalan() {
                 ; 0000 005F void Program_Jalan() {
                 _Program_Jalan:
                 ; .FSTART _Program_Jalan
                 ;if(pointPos == 'O') {
0004c7 940e 0c7f 	CALL SUBOPT_0x1D
0004c9 34ef      	CPI  R30,LOW(0x4F)
0004ca f4a1      	BRNE _0xF7
                 ;maju_delay(2000, 400);
0004cb 940e 0c84 	CALL SUBOPT_0x1E
0004cd e9a0      	LDI  R26,LOW(400)
0004ce e0b1      	LDI  R27,HIGH(400)
0004cf de15      	RCALL _maju_delay
                 ;scanX(1, 2000); belokKiri(2000, 200);
0004d0 e0e1      	LDI  R30,LOW(1)
0004d1 e0f0      	LDI  R31,HIGH(1)
0004d2 940e 0c89 	CALL SUBOPT_0x1F
0004d4 940e 0c84 	CALL SUBOPT_0x1E
0004d6 940e 0c8f 	CALL SUBOPT_0x20
                 ;pointPos = 'A';
0004d8 e2ac      	LDI  R26,LOW(_pointPos)
0004d9 e0b0      	LDI  R27,HIGH(_pointPos)
0004da e4e1      	LDI  R30,LOW(65)
0004db 940e 0c93 	CALL SUBOPT_0x21
                 ;ringPos = 1;
0004dd 940e 0c98 	CALL SUBOPT_0x22
                 ;if(pointPos == 'A') fromReloadToA();
                 _0xF7:
0004df 940e 0c7f 	CALL SUBOPT_0x1D
0004e1 34e1      	CPI  R30,LOW(0x41)
0004e2 f411      	BRNE _0xF8
0004e3 d0bc      	RCALL _fromReloadToA
                 ;else if(pointPos == 'B') fromReloadToB();
0004e4 c00b      	RJMP _0xF9
                 _0xF8:
0004e5 940e 0c7f 	CALL SUBOPT_0x1D
0004e7 34e2      	CPI  R30,LOW(0x42)
0004e8 f411      	BRNE _0xFA
0004e9 d0b9      	RCALL _fromReloadToB
                 ;else if(pointPos == 'Z') fromReloadToZ();
0004ea c005      	RJMP _0xFB
                 _0xFA:
0004eb 940e 0c7f 	CALL SUBOPT_0x1D
0004ed 35ea      	CPI  R30,LOW(0x5A)
0004ee f409      	BRNE _0xFC
0004ef d0be      	RCALL _fromReloadToZ
                 ;if((pointPos == 'A') || (pointPos == 'B')) {
                 _0xFC:
                 _0xFB:
                 _0xF9:
0004f0 940e 0c7f 	CALL SUBOPT_0x1D
0004f2 34e1      	CPI  R30,LOW(0x41)
0004f3 f019      	BREQ _0xFE
0004f4 34e2      	CPI  R30,LOW(0x42)
0004f5 f009      	BREQ _0xFE
0004f6 c092      	RJMP _0xFD
                 _0xFE:
                 ;if(ringPos == 1) scanX(5, 2000);
0004f7 940e 0c9d 	CALL SUBOPT_0x23
0004f9 30e1      	CPI  R30,LOW(0x1)
0004fa e0a0      	LDI  R26,HIGH(0x1)
0004fb 07fa      	CPC  R31,R26
0004fc f419      	BRNE _0x100
0004fd e0e5      	LDI  R30,LOW(5)
0004fe e0f0      	LDI  R31,HIGH(5)
0004ff c011      	RJMP _0x18A
                 ;else if(ringPos == 2) scanX(3, 2000);
                 _0x100:
000500 940e 0c9d 	CALL SUBOPT_0x23
000502 30e2      	CPI  R30,LOW(0x2)
000503 e0a0      	LDI  R26,HIGH(0x2)
000504 07fa      	CPC  R31,R26
000505 f419      	BRNE _0x102
000506 e0e3      	LDI  R30,LOW(3)
000507 e0f0      	LDI  R31,HIGH(3)
000508 c008      	RJMP _0x18A
                 ;else if(ringPos == 3) scanX(1, 2000);
                 _0x102:
000509 940e 0c9d 	CALL SUBOPT_0x23
00050b 30e3      	CPI  R30,LOW(0x3)
00050c e0a0      	LDI  R26,HIGH(0x3)
00050d 07fa      	CPC  R31,R26
00050e f431      	BRNE _0x104
00050f e0e1      	LDI  R30,LOW(1)
000510 e0f0      	LDI  R31,HIGH(1)
                 _0x18A:
000511 93fa      	ST   -Y,R31
000512 93ea      	ST   -Y,R30
000513 940e 0ca2 	CALL SUBOPT_0x24
                 ;isWarna = 0;
                 _0x104:
000515 e0e0      	LDI  R30,LOW(0)
000516 93e0 01ad 	STS  _isWarna,R30
000518 93e0 01ae 	STS  _isWarna+1,R30
                 ;if(isWarna == 0) {
00051a 91e0 01ad 	LDS  R30,_isWarna
00051c 91f0 01ae 	LDS  R31,_isWarna+1
00051e 9730      	SBIW R30,0
00051f f429      	BRNE _0x105
                 ;belokKiri(2000, 200);
000520 940e 0c84 	CALL SUBOPT_0x1E
000522 940e 0c8f 	CALL SUBOPT_0x20
                 ;scanX(1, 2000); rem(200);
000524 c00a      	RJMP _0x18B
                 ;} else if(isWarna == 1) {
                 _0x105:
000525 91a0 01ad 	LDS  R26,_isWarna
000527 91b0 01ae 	LDS  R27,_isWarna+1
000529 9711      	SBIW R26,1
00052a f459      	BRNE _0x107
                 ;belokKanan(2000, 200);
00052b 940e 0c84 	CALL SUBOPT_0x1E
00052d 940e 0ca6 	CALL SUBOPT_0x25
                 ;scanX(1, 2000); rem(200);
                 _0x18B:
00052f e0e1      	LDI  R30,LOW(1)
000530 e0f0      	LDI  R31,HIGH(1)
000531 940e 0c89 	CALL SUBOPT_0x1F
000533 eca8      	LDI  R26,LOW(200)
000534 e0b0      	LDI  R27,0
000535 dda2      	RCALL _rem
                 ;mundur(2000, 2000); delay(350);
                 _0x107:
000536 940e 0caa 	CALL SUBOPT_0x26
000538 e5ae      	LDI  R26,LOW(350)
000539 e0b1      	LDI  R27,HIGH(350)
00053a dc5b      	RCALL _delay
                 ;if(isWarna == 0) belokKiri(3500, 200);
00053b 91e0 01ad 	LDS  R30,_isWarna
00053d 91f0 01ae 	LDS  R31,_isWarna+1
00053f 9730      	SBIW R30,0
000540 f439      	BRNE _0x108
000541 eaec      	LDI  R30,LOW(3500)
000542 e0fd      	LDI  R31,HIGH(3500)
000543 93fa      	ST   -Y,R31
000544 93ea      	ST   -Y,R30
000545 940e 0c8f 	CALL SUBOPT_0x20
                 ;else if(isWarna == 1) belokKanan(3500, 200);
000547 c00c      	RJMP _0x109
                 _0x108:
000548 91a0 01ad 	LDS  R26,_isWarna
00054a 91b0 01ae 	LDS  R27,_isWarna+1
00054c 9711      	SBIW R26,1
00054d f431      	BRNE _0x10A
00054e eaec      	LDI  R30,LOW(3500)
00054f e0fd      	LDI  R31,HIGH(3500)
000550 93fa      	ST   -Y,R31
000551 93ea      	ST   -Y,R30
000552 940e 0ca6 	CALL SUBOPT_0x25
                 ;if(ringPos == 1) scanX(5, 2000);
                 _0x10A:
                 _0x109:
000554 940e 0c9d 	CALL SUBOPT_0x23
000556 30e1      	CPI  R30,LOW(0x1)
000557 e0a0      	LDI  R26,HIGH(0x1)
000558 07fa      	CPC  R31,R26
000559 f419      	BRNE _0x10B
00055a e0e5      	LDI  R30,LOW(5)
00055b e0f0      	LDI  R31,HIGH(5)
00055c c011      	RJMP _0x18C
                 ;else if(ringPos == 2) scanX(3, 2000);
                 _0x10B:
00055d 940e 0c9d 	CALL SUBOPT_0x23
00055f 30e2      	CPI  R30,LOW(0x2)
000560 e0a0      	LDI  R26,HIGH(0x2)
000561 07fa      	CPC  R31,R26
000562 f419      	BRNE _0x10D
000563 e0e3      	LDI  R30,LOW(3)
000564 e0f0      	LDI  R31,HIGH(3)
000565 c008      	RJMP _0x18C
                 ;else if(ringPos == 3) scanX(1, 2000);
                 _0x10D:
000566 940e 0c9d 	CALL SUBOPT_0x23
000568 30e3      	CPI  R30,LOW(0x3)
000569 e0a0      	LDI  R26,HIGH(0x3)
00056a 07fa      	CPC  R31,R26
00056b f431      	BRNE _0x10F
00056c e0e1      	LDI  R30,LOW(1)
00056d e0f0      	LDI  R31,HIGH(1)
                 _0x18C:
00056e 93fa      	ST   -Y,R31
00056f 93ea      	ST   -Y,R30
000570 940e 0ca2 	CALL SUBOPT_0x24
                 ;belokKiri(2000, 200);
                 _0x10F:
000572 940e 0c84 	CALL SUBOPT_0x1E
000574 940e 0c8f 	CALL SUBOPT_0x20
                 ;if((pointPos == 'A')) fromAToReload();
000576 940e 0c7f 	CALL SUBOPT_0x1D
000578 34e1      	CPI  R30,LOW(0x41)
000579 f411      	BRNE _0x110
00057a d045      	RCALL _fromAToReload
                 ;else if((pointPos == 'B')) fromBToReload();
00057b c005      	RJMP _0x111
                 _0x110:
00057c 940e 0c7f 	CALL SUBOPT_0x1D
00057e 34e2      	CPI  R30,LOW(0x42)
00057f f409      	BRNE _0x112
000580 d042      	RCALL _fromBToReload
                 ;mundur(2000, 2000); delay(50); rem(200);
                 _0x112:
                 _0x111:
000581 940e 0caa 	CALL SUBOPT_0x26
000583 e3a2      	LDI  R26,LOW(50)
000584 e0b0      	LDI  R27,0
000585 dc10      	RCALL _delay
000586 eca8      	LDI  R26,LOW(200)
000587 e0b0      	LDI  R27,0
000588 c015      	RJMP _0x18D
                 ;else if(pointPos == 'Z') {
                 _0xFD:
000589 940e 0c7f 	CALL SUBOPT_0x1D
00058b 35ea      	CPI  R30,LOW(0x5A)
00058c f491      	BRNE _0x114
                 ;mundur(2000, 2000); delay(350);
00058d 940e 0caa 	CALL SUBOPT_0x26
00058f e5ae      	LDI  R26,LOW(350)
000590 e0b1      	LDI  R27,HIGH(350)
000591 dc04      	RCALL _delay
                 ;belokKanan(2500, 200);
000592 ece4      	LDI  R30,LOW(2500)
000593 e0f9      	LDI  R31,HIGH(2500)
000594 93fa      	ST   -Y,R31
000595 93ea      	ST   -Y,R30
000596 940e 0ca6 	CALL SUBOPT_0x25
                 ;scanX(2, 2000); rem(500);
000598 e0e2      	LDI  R30,LOW(2)
000599 e0f0      	LDI  R31,HIGH(2)
00059a 940e 0c89 	CALL SUBOPT_0x1F
00059c efa4      	LDI  R26,LOW(500)
00059d e0b1      	LDI  R27,HIGH(500)
                 _0x18D:
00059e dd39      	RCALL _rem
                 _0x114:
00059f 9508      	RET
                 ; .FEND
                 ;void fromReloadToA() {
                 _fromReloadToA:
                 ; .FSTART _fromReloadToA
                 ;scanX(5, 2000); belokKanan(2000, 200);
0005a0 e0e5      	LDI  R30,LOW(5)
0005a1 e0f0      	LDI  R31,HIGH(5)
0005a2 c002      	RJMP _0x20C0009
                 ; .FEND
                 ;void fromReloadToB() {
                 _fromReloadToB:
                 ; .FSTART _fromReloadToB
                 ;scanX(2, 2000); belokKanan(2000, 200);
0005a3 e0e2      	LDI  R30,LOW(2)
0005a4 e0f0      	LDI  R31,HIGH(2)
                 _0x20C0009:
0005a5 93fa      	ST   -Y,R31
0005a6 93ea      	ST   -Y,R30
0005a7 940e 0ca2 	CALL SUBOPT_0x24
0005a9 940e 0c84 	CALL SUBOPT_0x1E
0005ab 940e 0ca6 	CALL SUBOPT_0x25
0005ad 9508      	RET
                 ; .FEND
                 ;void fromReloadToZ() {
                 _fromReloadToZ:
                 ; .FSTART _fromReloadToZ
                 ;scanX(2, 2000); belokKanan(2000, 200);
0005ae e0e2      	LDI  R30,LOW(2)
0005af e0f0      	LDI  R31,HIGH(2)
0005b0 940e 0c89 	CALL SUBOPT_0x1F
0005b2 940e 0c84 	CALL SUBOPT_0x1E
0005b4 940e 0ca6 	CALL SUBOPT_0x25
                 ;scanKotak(1, 2000, 200);
0005b6 e0e1      	LDI  R30,LOW(1)
0005b7 e0f0      	LDI  R31,HIGH(1)
0005b8 93fa      	ST   -Y,R31
0005b9 93ea      	ST   -Y,R30
0005ba 940e 0c84 	CALL SUBOPT_0x1E
0005bc eca8      	LDI  R26,LOW(200)
0005bd e0b0      	LDI  R27,0
0005be de63      	RCALL _scanKotak
0005bf 9508      	RET
                 ; .FEND
                 ;void fromAToReload() {
                 _fromAToReload:
                 ; .FSTART _fromAToReload
                 ;scanX(5, 2000);
0005c0 e0e5      	LDI  R30,LOW(5)
0005c1 e0f0      	LDI  R31,HIGH(5)
0005c2 c002      	RJMP _0x20C0008
                 ; .FEND
                 ;void fromBToReload() {
                 _fromBToReload:
                 ; .FSTART _fromBToReload
                 ;scanX(2, 2000);
0005c3 e0e2      	LDI  R30,LOW(2)
0005c4 e0f0      	LDI  R31,HIGH(2)
                 _0x20C0008:
0005c5 93fa      	ST   -Y,R31
0005c6 93ea      	ST   -Y,R30
0005c7 940e 0ca2 	CALL SUBOPT_0x24
0005c9 9508      	RET
                 ; .FEND
                 ;void balikKanan() {
                 ;mundur(1000, 1000); delay(380);
                 ;belokKanan(1200, 0); belokKanan(1200, 100);
                 ;void balikKiri() {
                 ;belki(1000, 50); belki(1000, 200);
                 ;void runBot(void);
                 ;void calibration(void);
                 ;void Program_Jalan(void);
                 ;void test_motor(void);
                 ;void test_tombol(void);
                 ;void map_select(int map_num);
                 ;void sens_warna(void);
                 ;void test_capit(void);
                 ;void changeMenu(int menuSelect, bool isSelect) {
                 ; 0000 0060 void changeMenu(int menuSelect, _Bool isSelect) {
                 _changeMenu:
                 ; .FSTART _changeMenu
                 ;lampu = 0;
0005ca 93aa      	ST   -Y,R26
                 ;	menuSelect -> Y+1
                 ;	isSelect -> Y+0
0005cb 98c3      	CBI  0x18,3
                 ;count_btn = menuSelect;
0005cc 81e9      	LDD  R30,Y+1
0005cd 81fa      	LDD  R31,Y+1+1
0005ce 93e0 0182 	STS  _count_btn,R30
0005d0 93f0 0183 	STS  _count_btn+1,R31
                 ;if(!isSelect && !isChildSelect) {
0005d2 81e8      	LD   R30,Y
0005d3 30e0      	CPI  R30,0
0005d4 f421      	BRNE _0x118
0005d5 91e0 0184 	LDS  R30,_isChildSelect
0005d7 30e0      	CPI  R30,0
0005d8 f009      	BREQ _0x119
                 _0x118:
0005d9 c006      	RJMP _0x117
                 _0x119:
                 ;lcd_clear();
0005da 940e 0caf 	CALL SUBOPT_0x27
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Menu");
                +
0005dc eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
0005dd e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
0005de 940e 0b6b 	CALL _lcd_putsf
                 ;switch (menuSelect) {
                 _0x117:
0005e0 81e9      	LDD  R30,Y+1
0005e1 81fa      	LDD  R31,Y+1+1
                 ;case 0: // Calibration
0005e2 9730      	SBIW R30,0
0005e3 f469      	BRNE _0x11D
                 ;if(isSelect) { calibration(); break; }
0005e4 81e8      	LD   R30,Y
0005e5 30e0      	CPI  R30,0
0005e6 f011      	BREQ _0x11E
0005e7 d0b4      	RCALL _calibration
0005e8 c08e      	RJMP _0x11C
                 ;lcd_gotoxy(0, 1);
                 _0x11E:
0005e9 e0e0      	LDI  R30,LOW(0)
0005ea 940e 0c7b 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Kalibrasi");
                +
0005ec eea9     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
0005ed e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
0005ee 940e 0b6b 	CALL _lcd_putsf
                 ;break;
0005f0 c086      	RJMP _0x11C
                 ;case 1: // Run bot
                 _0x11D:
0005f1 30e1      	CPI  R30,LOW(0x1)
0005f2 e0a0      	LDI  R26,HIGH(0x1)
0005f3 07fa      	CPC  R31,R26
0005f4 f489      	BRNE _0x11F
                 ;if(isSelect || isChildSelect) { runBot(); break; }
0005f5 81e8      	LD   R30,Y
0005f6 30e0      	CPI  R30,0
0005f7 f421      	BRNE _0x121
0005f8 91e0 0184 	LDS  R30,_isChildSelect
0005fa 30e0      	CPI  R30,0
0005fb f011      	BREQ _0x120
                 _0x121:
0005fc d07c      	RCALL _runBot
0005fd c079      	RJMP _0x11C
                 ;lcd_gotoxy(0, 1);
                 _0x120:
0005fe e0e0      	LDI  R30,LOW(0)
0005ff 940e 0c7b 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Run Bot");
                +
000601 efa3     +LDI R26 , LOW ( 2 * _0x0 + ( 115 ) )
000602 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 115 ) )
                 	__POINTW2FN _0x0,115
000603 940e 0b6b 	CALL _lcd_putsf
                 ;break;
000605 c071      	RJMP _0x11C
                 ;case 2: // Sensor Warna
                 _0x11F:
000606 30e2      	CPI  R30,LOW(0x2)
000607 e0a0      	LDI  R26,HIGH(0x2)
000608 07fa      	CPC  R31,R26
000609 f469      	BRNE _0x123
                 ;if(isSelect) { sens_warna(); break; }
00060a 81e8      	LD   R30,Y
00060b 30e0      	CPI  R30,0
00060c f011      	BREQ _0x124
00060d d10e      	RCALL _sens_warna
00060e c068      	RJMP _0x11C
                 ;lcd_gotoxy(0, 1);
                 _0x124:
00060f e0e0      	LDI  R30,LOW(0)
000610 940e 0c7b 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Sens Warna");
                +
000612 efab     +LDI R26 , LOW ( 2 * _0x0 + ( 123 ) )
000613 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 123 ) )
                 	__POINTW2FN _0x0,123
000614 940e 0b6b 	CALL _lcd_putsf
                 ;break;
000616 c060      	RJMP _0x11C
                 ;case 3: // Map Select
                 _0x123:
000617 30e3      	CPI  R30,LOW(0x3)
000618 e0a0      	LDI  R26,HIGH(0x3)
000619 07fa      	CPC  R31,R26
00061a f499      	BRNE _0x125
                 ;if(isSelect || isChildSelect) { map_select(map_biru); break; }
00061b 81e8      	LD   R30,Y
00061c 30e0      	CPI  R30,0
00061d f421      	BRNE _0x127
00061e 91e0 0184 	LDS  R30,_isChildSelect
000620 30e0      	CPI  R30,0
000621 f021      	BREQ _0x126
                 _0x127:
000622 e0a0      	LDI  R26,LOW(0)
000623 e0b0      	LDI  R27,0
000624 d07f      	RCALL _map_select
000625 c051      	RJMP _0x11C
                 ;lcd_gotoxy(0, 1);
                 _0x126:
000626 e0e0      	LDI  R30,LOW(0)
000627 940e 0c7b 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Map Biru");
                +
000629 e0a6     +LDI R26 , LOW ( 2 * _0x0 + ( 134 ) )
00062a e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 134 ) )
                 	__POINTW2FN _0x0,134
00062b 940e 0b6b 	CALL _lcd_putsf
                 ;break;
00062d c049      	RJMP _0x11C
                 ;case 4: // Map Select
                 _0x125:
00062e 30e4      	CPI  R30,LOW(0x4)
00062f e0a0      	LDI  R26,HIGH(0x4)
000630 07fa      	CPC  R31,R26
000631 f499      	BRNE _0x129
                 ;if(isSelect || isChildSelect) { map_select(map_merah); break; }
000632 81e8      	LD   R30,Y
000633 30e0      	CPI  R30,0
000634 f421      	BRNE _0x12B
000635 91e0 0184 	LDS  R30,_isChildSelect
000637 30e0      	CPI  R30,0
000638 f021      	BREQ _0x12A
                 _0x12B:
000639 e0a1      	LDI  R26,LOW(1)
00063a e0b0      	LDI  R27,0
00063b d068      	RCALL _map_select
00063c c03a      	RJMP _0x11C
                 ;lcd_gotoxy(0, 1);
                 _0x12A:
00063d e0e0      	LDI  R30,LOW(0)
00063e 940e 0c7b 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Map Merah");
                +
000640 e0af     +LDI R26 , LOW ( 2 * _0x0 + ( 143 ) )
000641 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 143 ) )
                 	__POINTW2FN _0x0,143
000642 940e 0b6b 	CALL _lcd_putsf
                 ;break;
000644 c032      	RJMP _0x11C
                 ;case 5: // Test Motor
                 _0x129:
000645 30e5      	CPI  R30,LOW(0x5)
000646 e0a0      	LDI  R26,HIGH(0x5)
000647 07fa      	CPC  R31,R26
000648 f469      	BRNE _0x12D
                 ;if(isSelect) { test_motor(); break; }
000649 81e8      	LD   R30,Y
00064a 30e0      	CPI  R30,0
00064b f011      	BREQ _0x12E
00064c d06d      	RCALL _test_motor
00064d c029      	RJMP _0x11C
                 ;lcd_gotoxy(0, 1);
                 _0x12E:
00064e e0e0      	LDI  R30,LOW(0)
00064f 940e 0c7b 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Motor");
                +
000651 e1a9     +LDI R26 , LOW ( 2 * _0x0 + ( 153 ) )
000652 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 153 ) )
                 	__POINTW2FN _0x0,153
000653 940e 0b6b 	CALL _lcd_putsf
                 ;break;
000655 c021      	RJMP _0x11C
                 ;case 6: // Test tombol
                 _0x12D:
000656 30e6      	CPI  R30,LOW(0x6)
000657 e0a0      	LDI  R26,HIGH(0x6)
000658 07fa      	CPC  R31,R26
000659 f469      	BRNE _0x12F
                 ;if(isSelect) { test_tombol(); break; }
00065a 81e8      	LD   R30,Y
00065b 30e0      	CPI  R30,0
00065c f011      	BREQ _0x130
00065d d088      	RCALL _test_tombol
00065e c018      	RJMP _0x11C
                 ;lcd_gotoxy(0, 1);
                 _0x130:
00065f e0e0      	LDI  R30,LOW(0)
000660 940e 0c7b 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Button");
                +
000662 e1af     +LDI R26 , LOW ( 2 * _0x0 + ( 159 ) )
000663 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 159 ) )
                 	__POINTW2FN _0x0,159
000664 940e 0b6b 	CALL _lcd_putsf
                 ;break;
000666 c010      	RJMP _0x11C
                 ;case 7: // Test Capit
                 _0x12F:
000667 30e7      	CPI  R30,LOW(0x7)
000668 e0a0      	LDI  R26,HIGH(0x7)
000669 07fa      	CPC  R31,R26
00066a f461      	BRNE _0x133
                 ;if(isSelect) { test_capit(); break; }
00066b 81e8      	LD   R30,Y
00066c 30e0      	CPI  R30,0
00066d f011      	BREQ _0x132
00066e d0d7      	RCALL _test_capit
00066f c007      	RJMP _0x11C
                 ;lcd_gotoxy(0, 1);
                 _0x132:
000670 e0e0      	LDI  R30,LOW(0)
000671 940e 0c7b 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Capit");
                +
000673 e2a6     +LDI R26 , LOW ( 2 * _0x0 + ( 166 ) )
000674 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 166 ) )
                 	__POINTW2FN _0x0,166
000675 940e 0b6b 	CALL _lcd_putsf
                 ;break;
                 ;default:
                 _0x133:
                 ;break;
                 _0x11C:
000677 940c 0b7c 	JMP  _0x20C0003
                 ; .FEND
                 ;void runBot() {
                 _runBot:
                 ; .FSTART _runBot
                 ;if(!isChildSelect) {
000679 91e0 0184 	LDS  R30,_isChildSelect
00067b 30e0      	CPI  R30,0
00067c f471      	BRNE _0x134
                 ;lcd_clear();
00067d 940e 0caf 	CALL SUBOPT_0x27
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Run Bot");
                +
00067f efa3     +LDI R26 , LOW ( 2 * _0x0 + ( 115 ) )
000680 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 115 ) )
                 	__POINTW2FN _0x0,115
000681 940e 0cb3 	CALL SUBOPT_0x28
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Click 2 to start");
                +
000683 e2ac     +LDI R26 , LOW ( 2 * _0x0 + ( 172 ) )
000684 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 172 ) )
                 	__POINTW2FN _0x0,172
000685 940e 0b6b 	CALL _lcd_putsf
                 ;isChildSelect = true;
000687 e0e1      	LDI  R30,LOW(1)
000688 93e0 0184 	STS  _isChildSelect,R30
                 ;} else if(isChildSelect) {
00068a c010      	RJMP _0x135
                 _0x134:
00068b 91e0 0184 	LDS  R30,_isChildSelect
00068d 30e0      	CPI  R30,0
00068e f061      	BREQ _0x136
                 ;lcd_clear();
00068f 940e 0b20 	CALL _lcd_clear
                 ;lcd_gotoxy(0, 1);
000691 e0e0      	LDI  R30,LOW(0)
000692 940e 0c7b 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Running...");
                +
000694 e3ad     +LDI R26 , LOW ( 2 * _0x0 + ( 189 ) )
000695 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 189 ) )
                 	__POINTW2FN _0x0,189
000696 940e 0b6b 	CALL _lcd_putsf
                 ;Program_Jalan();
000698 de2e      	RCALL _Program_Jalan
                 ;isChildSelect = false;
000699 940e 0cb7 	CALL SUBOPT_0x29
                 ;changeMenu(0, false);
                 _0x136:
                 _0x135:
00069b 9508      	RET
                 ; .FEND
                 ;void calibration() {
                 _calibration:
                 ; .FSTART _calibration
                 ;scan_garis();
00069c db7a      	RCALL _scan_garis
                 ;delay(1000);
00069d 940e 0cc1 	CALL SUBOPT_0x2A
                 ;scan_back();
00069f db99      	RCALL _scan_back
                 ;delay(1000);
0006a0 940e 0cc1 	CALL SUBOPT_0x2A
                 ;hit_tengah();
0006a2 dbb8      	RCALL _hit_tengah
                 ;isChildSelect = false;
0006a3 c03c      	RJMP _0x20C0007
                 ;changeMenu(0, false);
                 ; .FEND
                 ;void map_select(int map_num) {
                 _map_select:
                 ; .FSTART _map_select
                 ;if(map_num != 0 && map_num != 1) map_num = 0;
0006a4 93ba      	ST   -Y,R27
0006a5 93aa      	ST   -Y,R26
                 ;	map_num -> Y+0
0006a6 81a8      	LD   R26,Y
0006a7 81b9      	LDD  R27,Y+1
0006a8 9710      	SBIW R26,0
0006a9 f011      	BREQ _0x138
0006aa 9711      	SBIW R26,1
0006ab f409      	BRNE _0x139
                 _0x138:
0006ac c003      	RJMP _0x137
                 _0x139:
0006ad e0e0      	LDI  R30,LOW(0)
0006ae 83e8      	STD  Y+0,R30
0006af 83e9      	STD  Y+0+1,R30
                 ;mapMirror = map_num;
                 _0x137:
0006b0 81e8      	LD   R30,Y
0006b1 81f9      	LDD  R31,Y+1
0006b2 e2aa      	LDI  R26,LOW(_mapMirror)
0006b3 e0b0      	LDI  R27,HIGH(_mapMirror)
0006b4 940e 0da4 	CALL __EEPROMWRW
                 ;isChildSelect = false;
0006b6 940e 0cb7 	CALL SUBOPT_0x29
                 ;changeMenu(0, false);
0006b8 940c 0b1e 	JMP  _0x20C0004
                 ; .FEND
                 ;void test_motor()
                 _test_motor:
                 ; .FSTART _test_motor
                 ;lcd_clear();
0006ba 940e 0caf 	CALL SUBOPT_0x27
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Motor");
                +
0006bc e4a8     +LDI R26 , LOW ( 2 * _0x0 + ( 200 ) )
0006bd e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 200 ) )
                 	__POINTW2FN _0x0,200
0006be 940e 0cb3 	CALL SUBOPT_0x28
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+1000 +1000");
                +
0006c0 e5a3     +LDI R26 , LOW ( 2 * _0x0 + ( 211 ) )
0006c1 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 211 ) )
                 	__POINTW2FN _0x0,211
0006c2 940e 0cc5 	CALL SUBOPT_0x2B
                 ;setMotor(1000, 1000);
0006c4 940e 0ccc 	CALL SUBOPT_0x2C
                 ;delay_ms(2000);
                 ;lcd_gotoxy(0, 1);
0006c6 e0e0      	LDI  R30,LOW(0)
0006c7 940e 0c7b 	CALL SUBOPT_0x1C
                 ;lcd_putsf("-1000 -1000");
                +
0006c9 e5af     +LDI R26 , LOW ( 2 * _0x0 + ( 223 ) )
0006ca e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 223 ) )
                 	__POINTW2FN _0x0,223
0006cb 940e 0cd4 	CALL SUBOPT_0x2D
                 ;setMotor(-1000, -1000);
0006cd 940e 0cdb 	CALL SUBOPT_0x2E
                 ;delay_ms(2000);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+1000 -1000");
                +
0006cf e6ab     +LDI R26 , LOW ( 2 * _0x0 + ( 235 ) )
0006d0 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 235 ) )
                 	__POINTW2FN _0x0,235
0006d1 940e 0cc5 	CALL SUBOPT_0x2B
                 ;setMotor(1000, -1000);
0006d3 940e 0cdb 	CALL SUBOPT_0x2E
                 ;delay_ms(2000);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("-1000 +1000");
                +
0006d5 e7a7     +LDI R26 , LOW ( 2 * _0x0 + ( 247 ) )
0006d6 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 247 ) )
                 	__POINTW2FN _0x0,247
0006d7 940e 0cd4 	CALL SUBOPT_0x2D
                 ;setMotor(-1000, 1000);
0006d9 940e 0ccc 	CALL SUBOPT_0x2C
                 ;delay_ms(2000);
                 ;rem(1000);
0006db eea8      	LDI  R26,LOW(1000)
0006dc e0b3      	LDI  R27,HIGH(1000)
0006dd dbfa      	RCALL _rem
                 ;lcd_clear();
0006de 940e 0caf 	CALL SUBOPT_0x27
                 ;lcd_gotoxy(0, 0);
                 ;isChildSelect = false;
                 _0x20C0007:
0006e0 e0e0      	LDI  R30,LOW(0)
0006e1 93e0 0184 	STS  _isChildSelect,R30
                 ;changeMenu(0, false);
0006e3 940e 0ce5 	CALL SUBOPT_0x2F
0006e5 9508      	RET
                 ; .FEND
                 ;void test_tombol()
                 _test_tombol:
                 ; .FSTART _test_tombol
                 ;lcd_gotoxy(0, 1);
0006e6 e0e0      	LDI  R30,LOW(0)
0006e7 940e 0c7b 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Click 1 to exit");
                +
0006e9 e8a3     +LDI R26 , LOW ( 2 * _0x0 + ( 259 ) )
0006ea e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 259 ) )
                 	__POINTW2FN _0x0,259
0006eb 940e 0b6b 	CALL _lcd_putsf
                 ;isTestTombol = true;
0006ed e0e1      	LDI  R30,LOW(1)
0006ee 93e0 0185 	STS  _isTestTombol,R30
                 ;while (1)
                 _0x13A:
                 ;if (!isTestTombol) break;
0006f0 91e0 0185 	LDS  R30,_isTestTombol
0006f2 30e0      	CPI  R30,0
0006f3 f139      	BREQ _0x13C
                 ;if ((t1 == 0))
0006f4 9998      	SBIC 0x13,0
0006f5 c009      	RJMP _0x13E
                 ;lcd_gotoxy(0, 0);
0006f6 e0e0      	LDI  R30,LOW(0)
0006f7 940e 0bdd 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 1     ");
                +
0006f9 e9a3     +LDI R26 , LOW ( 2 * _0x0 + ( 275 ) )
0006fa e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 275 ) )
                 	__POINTW2FN _0x0,275
0006fb 940e 0cec 	CALL SUBOPT_0x30
                 ;isTestTombol = false;
                 ;delay(500);
                 ;changeMenu(0, false);
0006fd 940e 0ce5 	CALL SUBOPT_0x2F
                 ;if (t2 == 0)
                 _0x13E:
0006ff 9999      	SBIC 0x13,1
000700 c007      	RJMP _0x13F
                 ;lcd_gotoxy(0, 0);
000701 e0e0      	LDI  R30,LOW(0)
000702 940e 0bdd 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 2     ");
                +
000704 eaa3     +LDI R26 , LOW ( 2 * _0x0 + ( 291 ) )
000705 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 291 ) )
                 	__POINTW2FN _0x0,291
000706 940e 0b6b 	CALL _lcd_putsf
                 ;if (t3 == 0)
                 _0x13F:
000708 999a      	SBIC 0x13,2
000709 c007      	RJMP _0x140
                 ;lcd_gotoxy(0, 0);
00070a e0e0      	LDI  R30,LOW(0)
00070b 940e 0bdd 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 3     ");
                +
00070d eba3     +LDI R26 , LOW ( 2 * _0x0 + ( 307 ) )
00070e e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 307 ) )
                 	__POINTW2FN _0x0,307
00070f 940e 0b6b 	CALL _lcd_putsf
                 ;if (t4 == 0)
                 _0x140:
000711 999b      	SBIC 0x13,3
000712 c007      	RJMP _0x141
                 ;lcd_gotoxy(0, 0);
000713 e0e0      	LDI  R30,LOW(0)
000714 940e 0bdd 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 4     ");
                +
000716 eca3     +LDI R26 , LOW ( 2 * _0x0 + ( 323 ) )
000717 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 323 ) )
                 	__POINTW2FN _0x0,323
000718 940e 0b6b 	CALL _lcd_putsf
                 _0x141:
00071a cfd5      	RJMP _0x13A
                 _0x13C:
00071b 9508      	RET
                 ; .FEND
                 ;void sens_warna()
                 _sens_warna:
                 ; .FSTART _sens_warna
                 ;lcd_clear();
00071c 940e 0caf 	CALL SUBOPT_0x27
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Sens Warna");
                +
00071e efab     +LDI R26 , LOW ( 2 * _0x0 + ( 123 ) )
00071f e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 123 ) )
                 	__POINTW2FN _0x0,123
000720 940e 0cb3 	CALL SUBOPT_0x28
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Warna:");
                +
000722 eda3     +LDI R26 , LOW ( 2 * _0x0 + ( 339 ) )
000723 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 339 ) )
                 	__POINTW2FN _0x0,339
000724 940e 0b6b 	CALL _lcd_putsf
                 ;isTestTombol = true;
000726 e0e1      	LDI  R30,LOW(1)
000727 93e0 0185 	STS  _isTestTombol,R30
                 ;bawah_lepas();
000729 dd81      	RCALL _bawah_lepas
                 ;delay(200);
00072a 940e 0cf5 	CALL SUBOPT_0x31
                 ;ambil(20);
00072c e1a4      	LDI  R26,LOW(20)
00072d e0b0      	LDI  R27,0
00072e dd70      	RCALL _ambil
                 ;while (1)
                 _0x142:
                 ;bacawarna();
00072f dd80      	RCALL _bacawarna
                 ;if (!isTestTombol) { lcd_clear(); capit_lepas; changeMenu(0, false); break; }
000730 91e0 0185 	LDS  R30,_isTestTombol
000732 30e0      	CPI  R30,0
000733 f439      	BRNE _0x145
000734 940e 0b20 	CALL _lcd_clear
000736 eee6      	LDI  R30,LOW(230)
000737 2ede      	MOV  R13,R30
000738 940e 0ce5 	CALL SUBOPT_0x2F
00073a c00a      	RJMP _0x144
                 ;if ((t1 == 0))
                 _0x145:
00073b 9998      	SBIC 0x13,0
00073c c007      	RJMP _0x146
                 ;lcd_gotoxy(0, 0);
00073d e0e0      	LDI  R30,LOW(0)
00073e 940e 0bdd 	CALL SUBOPT_0x3
                 ;lcd_putsf("Exiting...");
                +
000740 edaa     +LDI R26 , LOW ( 2 * _0x0 + ( 346 ) )
000741 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 346 ) )
                 	__POINTW2FN _0x0,346
000742 940e 0cec 	CALL SUBOPT_0x30
                 ;isTestTombol = false;
                 ;delay(500);
                 _0x146:
000744 cfea      	RJMP _0x142
                 _0x144:
000745 9508      	RET
                 ; .FEND
                 ;void test_capit()
                 _test_capit:
                 ; .FSTART _test_capit
                 ;lcd_clear();
000746 940e 0caf 	CALL SUBOPT_0x27
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Capit");
                +
000748 eea5     +LDI R26 , LOW ( 2 * _0x0 + ( 357 ) )
000749 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 357 ) )
                 	__POINTW2FN _0x0,357
00074a 940e 0cb3 	CALL SUBOPT_0x28
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Capit: > <");
                +
00074c efa0     +LDI R26 , LOW ( 2 * _0x0 + ( 368 ) )
00074d e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 368 ) )
                 	__POINTW2FN _0x0,368
00074e 940e 0b6b 	CALL _lcd_putsf
                 ;capit_ambil;
000750 eeed      	LDI  R30,LOW(237)
000751 2ede      	MOV  R13,R30
                 ;delay(500);
000752 efa4      	LDI  R26,LOW(500)
000753 e0b1      	LDI  R27,HIGH(500)
000754 da41      	RCALL _delay
                 ;lcd_gotoxy(0, 1);
000755 e0e0      	LDI  R30,LOW(0)
000756 940e 0c7b 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Capit: < >");
                +
000758 efab     +LDI R26 , LOW ( 2 * _0x0 + ( 379 ) )
000759 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 379 ) )
                 	__POINTW2FN _0x0,379
00075a 940e 0b6b 	CALL _lcd_putsf
                 ;capit_lepas;
00075c eee6      	LDI  R30,LOW(230)
00075d 2ede      	MOV  R13,R30
                 ;delay(1000);
00075e 940e 0cc1 	CALL SUBOPT_0x2A
                 ;lcd_gotoxy(0, 1);
000760 e0e0      	LDI  R30,LOW(0)
000761 940e 0c7b 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Capit: \\/");
                +
000763 e0a6     +LDI R26 , LOW ( 2 * _0x0 + ( 390 ) )
000764 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 390 ) )
                 	__POINTW2FN _0x0,390
000765 940e 0b6b 	CALL _lcd_putsf
                 ;lengan_bawah;
000767 efe0      	LDI  R30,LOW(240)
000768 2ece      	MOV  R12,R30
                 ;delay(1000);
000769 940e 0cc1 	CALL SUBOPT_0x2A
                 ;lcd_gotoxy(0, 1);
00076b e0e0      	LDI  R30,LOW(0)
00076c 940e 0c7b 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Capit: /\\");
                +
00076e e1a0     +LDI R26 , LOW ( 2 * _0x0 + ( 400 ) )
00076f e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 400 ) )
                 	__POINTW2FN _0x0,400
000770 940e 0b6b 	CALL _lcd_putsf
                 ;lengan_atas;
000772 eeea      	LDI  R30,LOW(234)
000773 2ece      	MOV  R12,R30
                 ;delay(1000);
000774 940e 0cc1 	CALL SUBOPT_0x2A
000776 9508      	RET
                 ; .FEND
                 ;void tepuk_tangan() {
                 ;lcd_clear();
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Hold 1 to exit");
                 ;lcd_gotoxy(0, 0);
                 ;while (1)
                 ;lcd_putsf("XD");
                 ;if(t1 == 0) break;
                 ;capit_lepas;
                 ;if(t1 == 0) break;
                 ;delay(500);
                 ;if(t1 == 0) break;
                 ;capit_ambil;
                 ;if(t1 == 0) break;
                 ;delay(500);
                 ;if(t1 == 0) break;
                 ;void display_map() {
                 _display_map:
                 ; .FSTART _display_map
                 ;cek_sensor();
000777 da6f      	RCALL _cek_sensor
                 ;lcd_gotoxy(7, 0);
000778 e0e7      	LDI  R30,LOW(7)
000779 940e 0bdd 	CALL SUBOPT_0x3
                 ;sprintf(buff, "%d", mapMirror);
00077b 940e 0be1 	CALL SUBOPT_0x4
                +
00077d e8ec     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
00077e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
00077f 93fa      	ST   -Y,R31
000780 93ea      	ST   -Y,R30
000781 e2aa      	LDI  R26,LOW(_mapMirror)
000782 e0b0      	LDI  R27,HIGH(_mapMirror)
000783 940e 0d94 	CALL __EEPROMRDW
000785 940e 0c27 	CALL SUBOPT_0xE
000787 e084      	LDI  R24,4
000788 940e 0a6d 	CALL _sprintf
00078a 9628      	ADIW R28,8
                 ;lcd_puts(buff);
00078b c03c      	RJMP _0x20C0006
                 ; .FEND
                 ;void display_checkpoint() {
                 _display_checkpoint:
                 ; .FSTART _display_checkpoint
                 ;if(pointPos != 'O' && pointPos != 'A' && pointPos != 'B' && pointPos != 'Z') poi ...
00078c 940e 0c7f 	CALL SUBOPT_0x1D
00078e 34ef      	CPI  R30,LOW(0x4F)
00078f f031      	BREQ _0x150
000790 34e1      	CPI  R30,LOW(0x41)
000791 f021      	BREQ _0x150
000792 34e2      	CPI  R30,LOW(0x42)
000793 f011      	BREQ _0x150
000794 35ea      	CPI  R30,LOW(0x5A)
000795 f409      	BRNE _0x151
                 _0x150:
000796 c005      	RJMP _0x14F
                 _0x151:
000797 e2ac      	LDI  R26,LOW(_pointPos)
000798 e0b0      	LDI  R27,HIGH(_pointPos)
000799 e4ef      	LDI  R30,LOW(79)
00079a 940e 0dac 	CALL __EEPROMWRB
                 ;if(ringPos != 1 && ringPos != 2 && ringPos != 3 && ringPos != 4) ringPos = 1;
                 _0x14F:
00079c 940e 0c9d 	CALL SUBOPT_0x23
00079e 01bf      	MOVW R22,R30
00079f 010f      	MOVW R0,R30
0007a0 01df      	MOVW R26,R30
0007a1 9731      	SBIW R30,1
0007a2 f059      	BREQ _0x153
0007a3 01fd      	MOVW R30,R26
0007a4 9732      	SBIW R30,2
0007a5 f041      	BREQ _0x153
0007a6 01f0      	MOVW R30,R0
0007a7 9733      	SBIW R30,3
0007a8 f029      	BREQ _0x153
0007a9 01fb      	MOVW R30,R22
0007aa 30e4      	CPI  R30,LOW(0x4)
0007ab e0a0      	LDI  R26,HIGH(0x4)
0007ac 07fa      	CPC  R31,R26
0007ad f409      	BRNE _0x154
                 _0x153:
0007ae c004      	RJMP _0x152
                 _0x154:
0007af e2ad      	LDI  R26,LOW(_ringPos)
0007b0 e0b0      	LDI  R27,HIGH(_ringPos)
0007b1 940e 0c98 	CALL SUBOPT_0x22
                 ;lcd_gotoxy(10, 1);
                 _0x152:
0007b3 e0ea      	LDI  R30,LOW(10)
0007b4 940e 0c7b 	CALL SUBOPT_0x1C
                 ;sprintf(buff, "%c%d", pointPos, ringPos);
0007b6 940e 0be1 	CALL SUBOPT_0x4
                +
0007b8 e2ec     +LDI R30 , LOW ( 2 * _0x0 + ( 428 ) )
0007b9 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 428 ) )
                 	__POINTW1FN _0x0,428
0007ba 93fa      	ST   -Y,R31
0007bb 93ea      	ST   -Y,R30
0007bc 940e 0c7f 	CALL SUBOPT_0x1D
0007be 940e 0be6 	CALL SUBOPT_0x5
0007c0 940e 0c9d 	CALL SUBOPT_0x23
0007c2 940e 0c27 	CALL SUBOPT_0xE
0007c4 e088      	LDI  R24,8
0007c5 940e 0a6d 	CALL _sprintf
0007c7 962c      	ADIW R28,12
                 ;lcd_puts(buff);
                 _0x20C0006:
0007c8 e6a0      	LDI  R26,LOW(_buff)
0007c9 e0b1      	LDI  R27,HIGH(_buff)
0007ca 940e 0b5c 	CALL _lcd_puts
0007cc 9508      	RET
                 ; .FEND
                 ;void tes_sensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, "sensor:%d = %d  ", i, read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(100);
                 ;void tampil_count()
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", second);
                 ;lcd_puts(buff);
                 ;interrupt[TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0065 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0007cd 93aa      	ST   -Y,R26
0007ce 93ea      	ST   -Y,R30
0007cf b7ef      	IN   R30,SREG
0007d0 93ea      	ST   -Y,R30
                 ; 0000 0066 TCNT0 = 0x96; // BE
0007d1 e9e6      	LDI  R30,LOW(150)
0007d2 bfe2      	OUT  0x32,R30
                 ; 0000 0067 a++;
0007d3 91e0 0181 	LDS  R30,_a
0007d5 5fef      	SUBI R30,-LOW(1)
0007d6 93e0 0181 	STS  _a,R30
                 ; 0000 0068 
                 ; 0000 0069 if (a <= pos_servo1)
0007d8 91a0 0181 	LDS  R26,_a
0007da 16da      	CP   R13,R26
0007db f010      	BRLO _0x158
                 ; 0000 006A {
                 ; 0000 006B servo1 = 0;
0007dc 98ae      	CBI  0x15,6
                 ; 0000 006C }
                 ; 0000 006D else
0007dd c001      	RJMP _0x15B
                 _0x158:
                 ; 0000 006E {
                 ; 0000 006F servo1 = 1;
0007de 9aae      	SBI  0x15,6
                 ; 0000 0070 }
                 _0x15B:
                 ; 0000 0071 if (a <= pos_servo2)
0007df 91a0 0181 	LDS  R26,_a
0007e1 16ca      	CP   R12,R26
0007e2 f010      	BRLO _0x15E
                 ; 0000 0072 {
                 ; 0000 0073 servo2 = 0;
0007e3 98af      	CBI  0x15,7
                 ; 0000 0074 }
                 ; 0000 0075 else
0007e4 c001      	RJMP _0x161
                 _0x15E:
                 ; 0000 0076 {
                 ; 0000 0077 servo2 = 1;
0007e5 9aaf      	SBI  0x15,7
                 ; 0000 0078 }
                 _0x161:
                 ; 0000 0079 }
0007e6 91e9      	LD   R30,Y+
0007e7 bfef      	OUT  SREG,R30
0007e8 91e9      	LD   R30,Y+
0007e9 91a9      	LD   R26,Y+
0007ea 9518      	RETI
                 ; .FEND
                 ;interrupt[TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 007D {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 007E // Place your code here
                 ; 0000 007F }
0007eb 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0082 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0083 // Declare your local variables here
                 ; 0000 0084 
                 ; 0000 0085 // Input/Output Ports initialization
                 ; 0000 0086 // Port A initialization
                 ; 0000 0087 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0088 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0089 PORTA=0x00;
0007ec e0e0      	LDI  R30,LOW(0)
0007ed bbeb      	OUT  0x1B,R30
                 ; 0000 008A DDRA=0x00;
0007ee bbea      	OUT  0x1A,R30
                 ; 0000 008B 
                 ; 0000 008C // Port B initialization
                 ; 0000 008D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 008E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 008F PORTB=0x08;
0007ef e0e8      	LDI  R30,LOW(8)
0007f0 bbe8      	OUT  0x18,R30
                 ; 0000 0090 DDRB=0Xff;//0x08;
0007f1 efef      	LDI  R30,LOW(255)
0007f2 bbe7      	OUT  0x17,R30
                 ; 0000 0091 
                 ; 0000 0092 // Port C initialization
                 ; 0000 0093 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0094 // State7=T State6=T State5=T State4=T State3=P State2=P State1=P State0=P
                 ; 0000 0095 PORTC=0xFF;
0007f3 bbe5      	OUT  0x15,R30
                 ; 0000 0096 DDRC=0xF0; //C0
0007f4 efe0      	LDI  R30,LOW(240)
0007f5 bbe4      	OUT  0x14,R30
                 ; 0000 0097 
                 ; 0000 0098 // Port D initialization
                 ; 0000 0099 // Func7=In Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 009A // State7=T State6=T State5=0 State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 009B PORTD=0x01;
0007f6 e0e1      	LDI  R30,LOW(1)
0007f7 bbe2      	OUT  0x12,R30
                 ; 0000 009C DDRD=0xFE; //3F
0007f8 efee      	LDI  R30,LOW(254)
0007f9 bbe1      	OUT  0x11,R30
                 ; 0000 009D 
                 ; 0000 009E // Timer/Counter 0 initialization
                 ; 0000 009F TCCR0=0x4A;
0007fa e4ea      	LDI  R30,LOW(74)
0007fb bfe3      	OUT  0x33,R30
                 ; 0000 00A0 TCNT0=0x96;
0007fc e9e6      	LDI  R30,LOW(150)
0007fd bfe2      	OUT  0x32,R30
                 ; 0000 00A1 OCR0=0x00;
0007fe e0e0      	LDI  R30,LOW(0)
0007ff bfec      	OUT  0x3C,R30
                 ; 0000 00A2 
                 ; 0000 00A3 // Timer/Counter 1 initialization
                 ; 0000 00A4 TCCR1A=0xA1;
000800 eae1      	LDI  R30,LOW(161)
000801 bdef      	OUT  0x2F,R30
                 ; 0000 00A5 TCCR1B=0x09;
000802 e0e9      	LDI  R30,LOW(9)
000803 bdee      	OUT  0x2E,R30
                 ; 0000 00A6 TCNT1H=0x00;
000804 e0e0      	LDI  R30,LOW(0)
000805 bded      	OUT  0x2D,R30
                 ; 0000 00A7 TCNT1L=0x00;
000806 bdec      	OUT  0x2C,R30
                 ; 0000 00A8 ICR1H=0x00;
000807 bde7      	OUT  0x27,R30
                 ; 0000 00A9 ICR1L=0x00;
000808 bde6      	OUT  0x26,R30
                 ; 0000 00AA OCR1AH=0x00;
000809 bdeb      	OUT  0x2B,R30
                 ; 0000 00AB OCR1AL=0x00;
00080a bdea      	OUT  0x2A,R30
                 ; 0000 00AC OCR1BH=0x00;
00080b bde9      	OUT  0x29,R30
                 ; 0000 00AD OCR1BL=0x00;
00080c bde8      	OUT  0x28,R30
                 ; 0000 00AE 
                 ; 0000 00AF // Timer/Counter 2 initialization
                 ; 0000 00B0 // Clock source: System Clock
                 ; 0000 00B1 // Clock value: Timer 2 Stopped
                 ; 0000 00B2 // Mode: Normal top=FFh
                 ; 0000 00B3 // OC2 output: Disconnected
                 ; 0000 00B4 ASSR=0x00;
00080d bde2      	OUT  0x22,R30
                 ; 0000 00B5 TCCR2=0x00;
00080e bde5      	OUT  0x25,R30
                 ; 0000 00B6 TCNT2=0x00;
00080f bde4      	OUT  0x24,R30
                 ; 0000 00B7 OCR2=0x00;
000810 bde3      	OUT  0x23,R30
                 ; 0000 00B8 
                 ; 0000 00B9 // External Interrupt(s) initialization
                 ; 0000 00BA // INT0: Off
                 ; 0000 00BB // INT1: Off
                 ; 0000 00BC // INT2: Off
                 ; 0000 00BD MCUCR=0x00;
000811 bfe5      	OUT  0x35,R30
                 ; 0000 00BE MCUCSR=0x00;
000812 bfe4      	OUT  0x34,R30
                 ; 0000 00BF 
                 ; 0000 00C0 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00C1 TIMSK=0x03;
000813 e0e3      	LDI  R30,LOW(3)
000814 bfe9      	OUT  0x39,R30
                 ; 0000 00C2 
                 ; 0000 00C3 // Analog Comparator initialization
                 ; 0000 00C4 // Analog Comparator: Off
                 ; 0000 00C5 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00C6 ACSR=0x80;
000815 e8e0      	LDI  R30,LOW(128)
000816 b9e8      	OUT  0x8,R30
                 ; 0000 00C7 SFIOR=0x00;
000817 e0e0      	LDI  R30,LOW(0)
000818 bfe0      	OUT  0x30,R30
                 ; 0000 00C8 
                 ; 0000 00C9 
                 ; 0000 00CA 
                 ; 0000 00CB MCUCR=0x00;
000819 bfe5      	OUT  0x35,R30
                 ; 0000 00CC MCUCSR=0x00;
00081a bfe4      	OUT  0x34,R30
                 ; 0000 00CD 
                 ; 0000 00CE ////USART, UNTUK KOMUNIKASI BLUETOOTH
                 ; 0000 00CF //UCSRA=0x00;
                 ; 0000 00D0 //UCSRB=0x18;
                 ; 0000 00D1 //UCSRC=0x86;
                 ; 0000 00D2 //UBRRH=0x00;
                 ; 0000 00D3 //UBRRL=0x47;
                 ; 0000 00D4 // USART initialization
                 ; 0000 00D5 // USART disabled
                 ; 0000 00D6 UCSRB=0x00;
00081b b9ea      	OUT  0xA,R30
                 ; 0000 00D7 
                 ; 0000 00D8 // ADC initialization
                 ; 0000 00D9 // ADC Clock frequency: 691.200 kHz
                 ; 0000 00DA // ADC Voltage Reference: AVCC pin
                 ; 0000 00DB // ADC Auto Trigger Source: None
                 ; 0000 00DC // Only the 8 most significant bits of
                 ; 0000 00DD // the AD conversion result are used
                 ; 0000 00DE ADMUX=ADC_VREF_TYPE & 0xff;
00081c e6e0      	LDI  R30,LOW(96)
00081d b9e7      	OUT  0x7,R30
                 ; 0000 00DF ADCSRA=0x84;
00081e e8e4      	LDI  R30,LOW(132)
00081f b9e6      	OUT  0x6,R30
                 ; 0000 00E0 //ADCSRA=0xA6;
                 ; 0000 00E1 SFIOR&=0x1F;
000820 b7e0      	IN   R30,0x30
000821 71ef      	ANDI R30,LOW(0x1F)
000822 bfe0      	OUT  0x30,R30
                 ; 0000 00E2 
                 ; 0000 00E3 // LCD module initialization
                 ; 0000 00E4 lcd_init(16); //
000823 e1a0      	LDI  R26,LOW(16)
000824 940e 0b8f 	CALL _lcd_init
                 ; 0000 00E5 lcd_clear();  //
000826 940e 0b20 	CALL _lcd_clear
                 ; 0000 00E6 lampu = 0;    //
000828 98c3      	CBI  0x18,3
                 ; 0000 00E7 // k,b
                 ; 0000 00E8 lcd_gotoxy(0, 0);
000829 e0e0      	LDI  R30,LOW(0)
00082a 940e 0bdd 	CALL SUBOPT_0x3
                 ; 0000 00E9 lcd_putsf("     LEGION     ");
                +
00082c e3a1     +LDI R26 , LOW ( 2 * _0x0 + ( 433 ) )
00082d e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 433 ) )
                 	__POINTW2FN _0x0,433
00082e 940e 0cb3 	CALL SUBOPT_0x28
                 ; 0000 00EA lcd_gotoxy(0, 1);
                 ; 0000 00EB lcd_putsf(" MAN 4 JOMBANG ");
                +
000830 e4a2     +LDI R26 , LOW ( 2 * _0x0 + ( 450 ) )
000831 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 450 ) )
                 	__POINTW2FN _0x0,450
000832 940e 0b6b 	CALL _lcd_putsf
                 ; 0000 00EC delay_ms(500);
000834 efa4      	LDI  R26,LOW(500)
000835 e0b1      	LDI  R27,HIGH(500)
000836 940e 0ea8 	CALL _delay_ms
                 ; 0000 00ED lcd_clear();
000838 940e 0b20 	CALL _lcd_clear
                 ; 0000 00EE 
                 ; 0000 00EF // PROGRAM UTAMA
                 ; 0000 00F0 // Global enable interrupts
                 ; 0000 00F1 #asm("sei")
00083a 9478      	SEI
                 ; 0000 00F2 lengan_atas;
00083b eeea      	LDI  R30,LOW(234)
00083c 2ece      	MOV  R12,R30
                 ; 0000 00F3 capit_lepas;
00083d eee6      	LDI  R30,LOW(230)
00083e 2ede      	MOV  R13,R30
                 ; 0000 00F4 
                 ; 0000 00F5 /// mapMirror = 0 - map/lintasan bagian biru
                 ; 0000 00F6 /// mapMirror = 1 - map/lintasan bagian merah
                 ; 0000 00F7 if(mapMirror != map_biru && mapMirror != map_merah) mapMirror = map_biru;
00083f e2aa      	LDI  R26,LOW(_mapMirror)
000840 e0b0      	LDI  R27,HIGH(_mapMirror)
000841 940e 0d94 	CALL __EEPROMRDW
000843 9730      	SBIW R30,0
000844 f021      	BREQ _0x167
000845 30e1      	CPI  R30,LOW(0x1)
000846 e0a0      	LDI  R26,HIGH(0x1)
000847 07fa      	CPC  R31,R26
000848 f409      	BRNE _0x168
                 _0x167:
000849 c006      	RJMP _0x166
                 _0x168:
00084a e2aa      	LDI  R26,LOW(_mapMirror)
00084b e0b0      	LDI  R27,HIGH(_mapMirror)
00084c e0e0      	LDI  R30,LOW(0)
00084d e0f0      	LDI  R31,HIGH(0)
00084e 940e 0da4 	CALL __EEPROMWRW
                 ; 0000 00F8 
                 ; 0000 00F9 lcd_clear();
                 _0x166:
000850 940e 0caf 	CALL SUBOPT_0x27
                 ; 0000 00FA lcd_gotoxy(0, 0);
                 ; 0000 00FB lcd_putsf("Menu");
                +
000852 eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
000853 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
000854 940e 0cb3 	CALL SUBOPT_0x28
                 ; 0000 00FC lcd_gotoxy(0, 1);
                 ; 0000 00FD lcd_putsf("Kalibrasi");
                +
000856 eea9     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
000857 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
000858 940e 0b6b 	CALL _lcd_putsf
                 ; 0000 00FE 
                 ; 0000 00FF while(1) {
                 _0x169:
                 ; 0000 0100 if(!isChildSelect) {
00085a 91e0 0184 	LDS  R30,_isChildSelect
00085c 30e0      	CPI  R30,0
00085d f421      	BRNE _0x16C
                 ; 0000 0101 display_sensor();
00085e d98b      	RCALL _display_sensor
                 ; 0000 0102 bacawarna();
00085f dc50      	RCALL _bacawarna
                 ; 0000 0103 display_map();
000860 df16      	RCALL _display_map
                 ; 0000 0104 display_checkpoint();
000861 df2a      	RCALL _display_checkpoint
                 ; 0000 0105 }
                 ; 0000 0106 
                 ; 0000 0107 if((t1 == 0)) {
                 _0x16C:
000862 9998      	SBIC 0x13,0
000863 c019      	RJMP _0x16D
                 ; 0000 0108 
                 ; 0000 0109 if(!isChildSelect) count_btn ++;
000864 91e0 0184 	LDS  R30,_isChildSelect
000866 30e0      	CPI  R30,0
000867 f421      	BRNE _0x16E
000868 e8a2      	LDI  R26,LOW(_count_btn)
000869 e0b1      	LDI  R27,HIGH(_count_btn)
00086a 940e 0cf9 	CALL SUBOPT_0x32
                 ; 0000 010A if(count_btn >= 8) count_btn = 0;
                 _0x16E:
00086c 91a0 0182 	LDS  R26,_count_btn
00086e 91b0 0183 	LDS  R27,_count_btn+1
000870 9718      	SBIW R26,8
000871 f02c      	BRLT _0x16F
000872 e0e0      	LDI  R30,LOW(0)
000873 93e0 0182 	STS  _count_btn,R30
000875 93e0 0183 	STS  _count_btn+1,R30
                 ; 0000 010B delay(200);
                 _0x16F:
000877 940e 0cf5 	CALL SUBOPT_0x31
                 ; 0000 010C changeMenu(count_btn, false);
000879 940e 0cff 	CALL SUBOPT_0x33
00087b e0a0      	LDI  R26,LOW(0)
00087c dd4d      	RCALL _changeMenu
                 ; 0000 010D }
                 ; 0000 010E if((t2 == 0)) {
                 _0x16D:
00087d 9999      	SBIC 0x13,1
00087e c006      	RJMP _0x170
                 ; 0000 010F changeMenu(count_btn, true);
00087f 940e 0cff 	CALL SUBOPT_0x33
000881 e0a1      	LDI  R26,LOW(1)
000882 dd47      	RCALL _changeMenu
                 ; 0000 0110 delay(200);
000883 940e 0cf5 	CALL SUBOPT_0x31
                 ; 0000 0111 }
                 ; 0000 0112 if((t3 == 0)) {
                 _0x170:
000885 999a      	SBIC 0x13,2
000886 c037      	RJMP _0x171
                 ; 0000 0113 if(!ringPos) {
000887 940e 0c9d 	CALL SUBOPT_0x23
000889 9730      	SBIW R30,0
00088a f419      	BRNE _0x172
                 ; 0000 0114 ringPos = 1;
00088b 940e 0d06 	CALL SUBOPT_0x34
00088d c005      	RJMP _0x18E
                 ; 0000 0115 } else {
                 _0x172:
                 ; 0000 0116 ringPos += 1;
00088e 940e 0c9d 	CALL SUBOPT_0x23
000890 9631      	ADIW R30,1
000891 e2ad      	LDI  R26,LOW(_ringPos)
000892 e0b0      	LDI  R27,HIGH(_ringPos)
                 _0x18E:
000893 940e 0da4 	CALL __EEPROMWRW
                 ; 0000 0117 }
                 ; 0000 0118 
                 ; 0000 0119 if((ringPos > 2) && (pointPos == 'O')) {
000895 940e 0c9d 	CALL SUBOPT_0x23
000897 9733      	SBIW R30,3
000898 f024      	BRLT _0x175
000899 940e 0c7f 	CALL SUBOPT_0x1D
00089b 34ef      	CPI  R30,LOW(0x4F)
00089c f009      	BREQ _0x176
                 _0x175:
00089d c003      	RJMP _0x174
                 _0x176:
                 ; 0000 011A ringPos = 1;
00089e 940e 0d06 	CALL SUBOPT_0x34
0008a0 c019      	RJMP _0x18F
                 ; 0000 011B } else if((ringPos > 3) && (pointPos != 'Z')) {
                 _0x174:
0008a1 940e 0c9d 	CALL SUBOPT_0x23
0008a3 9734      	SBIW R30,4
0008a4 f024      	BRLT _0x179
0008a5 940e 0c7f 	CALL SUBOPT_0x1D
0008a7 35ea      	CPI  R30,LOW(0x5A)
0008a8 f409      	BRNE _0x17A
                 _0x179:
0008a9 c003      	RJMP _0x178
                 _0x17A:
                 ; 0000 011C ringPos = 1;
0008aa 940e 0d06 	CALL SUBOPT_0x34
0008ac c00d      	RJMP _0x18F
                 ; 0000 011D } else if((ringPos > 3) && (pointPos == 'Z')) {
                 _0x178:
0008ad 940e 0c9d 	CALL SUBOPT_0x23
0008af 9734      	SBIW R30,4
0008b0 f024      	BRLT _0x17D
0008b1 940e 0c7f 	CALL SUBOPT_0x1D
0008b3 35ea      	CPI  R30,LOW(0x5A)
0008b4 f009      	BREQ _0x17E
                 _0x17D:
0008b5 c006      	RJMP _0x17C
                 _0x17E:
                 ; 0000 011E ringPos = 4;
0008b6 e2ad      	LDI  R26,LOW(_ringPos)
0008b7 e0b0      	LDI  R27,HIGH(_ringPos)
0008b8 e0e4      	LDI  R30,LOW(4)
0008b9 e0f0      	LDI  R31,HIGH(4)
                 _0x18F:
0008ba 940e 0da4 	CALL __EEPROMWRW
                 ; 0000 011F }
                 ; 0000 0120 delay(200);
                 _0x17C:
0008bc 940e 0cf5 	CALL SUBOPT_0x31
                 ; 0000 0121 }
                 ; 0000 0122 if((t4 == 0)) {
                 _0x171:
0008be 999b      	SBIC 0x13,3
0008bf c035      	RJMP _0x17F
                 ; 0000 0123 if(pointPos == 'O') {
0008c0 940e 0c7f 	CALL SUBOPT_0x1D
0008c2 34ef      	CPI  R30,LOW(0x4F)
0008c3 f431      	BRNE _0x180
                 ; 0000 0124 pointPos = 'A';
0008c4 e2ac      	LDI  R26,LOW(_pointPos)
0008c5 e0b0      	LDI  R27,HIGH(_pointPos)
0008c6 e4e1      	LDI  R30,LOW(65)
0008c7 940e 0dac 	CALL __EEPROMWRB
                 ; 0000 0125 } else if(pointPos == 'A') {
0008c9 c029      	RJMP _0x181
                 _0x180:
0008ca 940e 0c7f 	CALL SUBOPT_0x1D
0008cc 34e1      	CPI  R30,LOW(0x41)
0008cd f481      	BRNE _0x182
                 ; 0000 0126 pointPos = 'B';
0008ce e2ac      	LDI  R26,LOW(_pointPos)
0008cf e0b0      	LDI  R27,HIGH(_pointPos)
0008d0 e4e2      	LDI  R30,LOW(66)
0008d1 940e 0c93 	CALL SUBOPT_0x21
                 ; 0000 0127 if(ringPos == 4) ringPos = 1;
0008d3 940e 0d94 	CALL __EEPROMRDW
0008d5 30e4      	CPI  R30,LOW(0x4)
0008d6 e0a0      	LDI  R26,HIGH(0x4)
0008d7 07fa      	CPC  R31,R26
0008d8 f421      	BRNE _0x183
0008d9 e2ad      	LDI  R26,LOW(_ringPos)
0008da e0b0      	LDI  R27,HIGH(_ringPos)
0008db 940e 0c98 	CALL SUBOPT_0x22
                 ; 0000 0128 } else if(pointPos == 'B') {
                 _0x183:
0008dd c015      	RJMP _0x184
                 _0x182:
0008de 940e 0c7f 	CALL SUBOPT_0x1D
0008e0 34e2      	CPI  R30,LOW(0x42)
0008e1 f441      	BRNE _0x185
                 ; 0000 0129 pointPos = 'Z';
0008e2 e2ac      	LDI  R26,LOW(_pointPos)
0008e3 e0b0      	LDI  R27,HIGH(_pointPos)
0008e4 e5ea      	LDI  R30,LOW(90)
0008e5 940e 0c93 	CALL SUBOPT_0x21
                 ; 0000 012A ringPos = 4;
0008e7 e0e4      	LDI  R30,LOW(4)
0008e8 e0f0      	LDI  R31,HIGH(4)
0008e9 c007      	RJMP _0x190
                 ; 0000 012B } else {
                 _0x185:
                 ; 0000 012C pointPos = 'O';
0008ea e2ac      	LDI  R26,LOW(_pointPos)
0008eb e0b0      	LDI  R27,HIGH(_pointPos)
0008ec e4ef      	LDI  R30,LOW(79)
0008ed 940e 0c93 	CALL SUBOPT_0x21
                 ; 0000 012D ringPos = 1;
0008ef e0e1      	LDI  R30,LOW(1)
0008f0 e0f0      	LDI  R31,HIGH(1)
                 _0x190:
0008f1 940e 0da4 	CALL __EEPROMWRW
                 ; 0000 012E }
                 _0x184:
                 _0x181:
                 ; 0000 012F delay(200);
0008f3 940e 0cf5 	CALL SUBOPT_0x31
                 ; 0000 0130 }
                 ; 0000 0131 }
                 _0x17F:
0008f5 cf64      	RJMP _0x169
                 ; 0000 0132 }
                 _0x187:
0008f6 cfff      	RJMP _0x187
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0008f7 93ba      	ST   -Y,R27
0008f8 93aa      	ST   -Y,R26
0008f9 931a      	ST   -Y,R17
0008fa 930a      	ST   -Y,R16
0008fb 81aa      	LDD  R26,Y+2
0008fc 81bb      	LDD  R27,Y+2+1
0008fd 9612      	ADIW R26,2
0008fe 940e 0d87 	CALL __GETW1P
000900 9730      	SBIW R30,0
000901 f129      	BREQ _0x2000010
000902 81aa      	LDD  R26,Y+2
000903 81bb      	LDD  R27,Y+2+1
000904 9614      	ADIW R26,4
000905 940e 0d87 	CALL __GETW1P
000907 018f      	MOVW R16,R30
000908 9730      	SBIW R30,0
000909 f061      	BREQ _0x2000012
                +
00090a 3002     +CPI R16 , LOW ( 2 )
00090b e0e0     +LDI R30 , HIGH ( 2 )
00090c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00090d f080      	BRLO _0x2000013
00090e 01f8      	MOVW R30,R16
00090f 9731      	SBIW R30,1
000910 018f      	MOVW R16,R30
                +
000911 81aa     +LDD R26 , Y + 2
000912 81bb     +LDD R27 , Y + 2 + 1
000913 9614     +ADIW R26 , 4
000914 93ed     +ST X + , R30
000915 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000916 81aa      	LDD  R26,Y+2
000917 81bb      	LDD  R27,Y+2+1
000918 9612      	ADIW R26,2
000919 940e 0cf9 	CALL SUBOPT_0x32
00091b 9731      	SBIW R30,1
00091c 81ac      	LDD  R26,Y+4
00091d 83a0      	STD  Z+0,R26
                 _0x2000013:
00091e 81aa      	LDD  R26,Y+2
00091f 81bb      	LDD  R27,Y+2+1
000920 940e 0d87 	CALL __GETW1P
000922 23ff      	TST  R31
000923 f012      	BRMI _0x2000014
000924 940e 0cf9 	CALL SUBOPT_0x32
                 _0x2000014:
000926 c006      	RJMP _0x2000015
                 _0x2000010:
000927 81aa      	LDD  R26,Y+2
000928 81bb      	LDD  R27,Y+2+1
000929 efef      	LDI  R30,LOW(65535)
00092a efff      	LDI  R31,HIGH(65535)
00092b 93ed      	ST   X+,R30
00092c 93fc      	ST   X,R31
                 _0x2000015:
00092d 8119      	LDD  R17,Y+1
00092e 8108      	LDD  R16,Y+0
00092f 9625      	ADIW R28,5
000930 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000931 93ba      	ST   -Y,R27
000932 93aa      	ST   -Y,R26
000933 9726      	SBIW R28,6
000934 940e 0d31 	CALL __SAVELOCR6
000936 e010      	LDI  R17,0
000937 85ac      	LDD  R26,Y+12
000938 85bd      	LDD  R27,Y+12+1
000939 e0e0      	LDI  R30,LOW(0)
00093a e0f0      	LDI  R31,HIGH(0)
00093b 93ed      	ST   X+,R30
00093c 93fc      	ST   X,R31
                 _0x2000016:
00093d 89ea      	LDD  R30,Y+18
00093e 89fb      	LDD  R31,Y+18+1
00093f 9631      	ADIW R30,1
000940 8bea      	STD  Y+18,R30
000941 8bfb      	STD  Y+18+1,R31
000942 9731      	SBIW R30,1
000943 91e4      	LPM  R30,Z
000944 2f2e      	MOV  R18,R30
000945 30e0      	CPI  R30,0
000946 f409      	BRNE PC+2
000947 c11d      	RJMP _0x2000018
000948 2fe1      	MOV  R30,R17
000949 30e0      	CPI  R30,0
00094a f439      	BRNE _0x200001C
00094b 3225      	CPI  R18,37
00094c f411      	BRNE _0x200001D
00094d e011      	LDI  R17,LOW(1)
00094e c002      	RJMP _0x200001E
                 _0x200001D:
00094f 940e 0d0b 	CALL SUBOPT_0x35
                 _0x200001E:
000951 c112      	RJMP _0x200001B
                 _0x200001C:
000952 30e1      	CPI  R30,LOW(0x1)
000953 f4a9      	BRNE _0x200001F
000954 3225      	CPI  R18,37
000955 f419      	BRNE _0x2000020
000956 940e 0d0b 	CALL SUBOPT_0x35
000958 c10a      	RJMP _0x20000CC
                 _0x2000020:
000959 e012      	LDI  R17,LOW(2)
00095a e040      	LDI  R20,LOW(0)
00095b e000      	LDI  R16,LOW(0)
00095c 322d      	CPI  R18,45
00095d f411      	BRNE _0x2000021
00095e e001      	LDI  R16,LOW(1)
00095f c104      	RJMP _0x200001B
                 _0x2000021:
000960 322b      	CPI  R18,43
000961 f411      	BRNE _0x2000022
000962 e24b      	LDI  R20,LOW(43)
000963 c100      	RJMP _0x200001B
                 _0x2000022:
000964 3220      	CPI  R18,32
000965 f411      	BRNE _0x2000023
000966 e240      	LDI  R20,LOW(32)
000967 c0fc      	RJMP _0x200001B
                 _0x2000023:
000968 c002      	RJMP _0x2000024
                 _0x200001F:
000969 30e2      	CPI  R30,LOW(0x2)
00096a f439      	BRNE _0x2000025
                 _0x2000024:
00096b e050      	LDI  R21,LOW(0)
00096c e013      	LDI  R17,LOW(3)
00096d 3320      	CPI  R18,48
00096e f411      	BRNE _0x2000026
00096f 6800      	ORI  R16,LOW(128)
000970 c0f3      	RJMP _0x200001B
                 _0x2000026:
000971 c003      	RJMP _0x2000027
                 _0x2000025:
000972 30e3      	CPI  R30,LOW(0x3)
000973 f009      	BREQ PC+2
000974 c0ef      	RJMP _0x200001B
                 _0x2000027:
000975 3320      	CPI  R18,48
000976 f010      	BRLO _0x200002A
000977 332a      	CPI  R18,58
000978 f008      	BRLO _0x200002B
                 _0x200002A:
000979 c007      	RJMP _0x2000029
                 _0x200002B:
00097a e0aa      	LDI  R26,LOW(10)
00097b 9f5a      	MUL  R21,R26
00097c 2d50      	MOV  R21,R0
00097d 2fe2      	MOV  R30,R18
00097e 53e0      	SUBI R30,LOW(48)
00097f 0f5e      	ADD  R21,R30
000980 c0e3      	RJMP _0x200001B
                 _0x2000029:
000981 2fe2      	MOV  R30,R18
000982 36e3      	CPI  R30,LOW(0x63)
000983 f449      	BRNE _0x200002F
000984 940e 0d12 	CALL SUBOPT_0x36
000986 89e8      	LDD  R30,Y+16
000987 89f9      	LDD  R31,Y+16+1
000988 81a4      	LDD  R26,Z+4
000989 93aa      	ST   -Y,R26
00098a 940e 0d18 	CALL SUBOPT_0x37
00098c c0d6      	RJMP _0x2000030
                 _0x200002F:
00098d 37e3      	CPI  R30,LOW(0x73)
00098e f441      	BRNE _0x2000032
00098f 940e 0d12 	CALL SUBOPT_0x36
000991 940e 0d1e 	CALL SUBOPT_0x38
000993 940e 0aa9 	CALL _strlen
000995 2f1e      	MOV  R17,R30
000996 c00a      	RJMP _0x2000033
                 _0x2000032:
000997 37e0      	CPI  R30,LOW(0x70)
000998 f461      	BRNE _0x2000035
000999 940e 0d12 	CALL SUBOPT_0x36
00099b 940e 0d1e 	CALL SUBOPT_0x38
00099d 940e 0ab5 	CALL _strlenf
00099f 2f1e      	MOV  R17,R30
0009a0 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0009a1 6002      	ORI  R16,LOW(2)
0009a2 770f      	ANDI R16,LOW(127)
0009a3 e030      	LDI  R19,LOW(0)
0009a4 c03c      	RJMP _0x2000036
                 _0x2000035:
0009a5 36e4      	CPI  R30,LOW(0x64)
0009a6 f011      	BREQ _0x2000039
0009a7 36e9      	CPI  R30,LOW(0x69)
0009a8 f411      	BRNE _0x200003A
                 _0x2000039:
0009a9 6004      	ORI  R16,LOW(4)
0009aa c002      	RJMP _0x200003B
                 _0x200003A:
0009ab 37e5      	CPI  R30,LOW(0x75)
0009ac f431      	BRNE _0x200003C
                 _0x200003B:
0009ad e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0009ae e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0009af 83ee      	STD  Y+6,R30
0009b0 83ff      	STD  Y+6+1,R31
0009b1 e015      	LDI  R17,LOW(5)
0009b2 c00c      	RJMP _0x200003D
                 _0x200003C:
0009b3 35e8      	CPI  R30,LOW(0x58)
0009b4 f411      	BRNE _0x200003F
0009b5 6008      	ORI  R16,LOW(8)
0009b6 c003      	RJMP _0x2000040
                 _0x200003F:
0009b7 37e8      	CPI  R30,LOW(0x78)
0009b8 f009      	BREQ PC+2
0009b9 c0a9      	RJMP _0x2000071
                 _0x2000040:
0009ba e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0009bb e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0009bc 83ee      	STD  Y+6,R30
0009bd 83ff      	STD  Y+6+1,R31
0009be e014      	LDI  R17,LOW(4)
                 _0x200003D:
0009bf ff02      	SBRS R16,2
0009c0 c017      	RJMP _0x2000042
0009c1 940e 0d12 	CALL SUBOPT_0x36
0009c3 89a8      	LDD  R26,Y+16
0009c4 89b9      	LDD  R27,Y+16+1
0009c5 9614      	ADIW R26,4
0009c6 91ed      	LD   R30,X+
0009c7 91fd      	LD   R31,X+
0009c8 87ea      	STD  Y+10,R30
0009c9 87fb      	STD  Y+10+1,R31
0009ca 85ab      	LDD  R26,Y+11
0009cb 23aa      	TST  R26
0009cc f42a      	BRPL _0x2000043
0009cd 940e 0d43 	CALL __ANEGW1
0009cf 87ea      	STD  Y+10,R30
0009d0 87fb      	STD  Y+10+1,R31
0009d1 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0009d2 3040      	CPI  R20,0
0009d3 f011      	BREQ _0x2000044
0009d4 5f1f      	SUBI R17,-LOW(1)
0009d5 c001      	RJMP _0x2000045
                 _0x2000044:
0009d6 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0009d7 c009      	RJMP _0x2000046
                 _0x2000042:
0009d8 940e 0d12 	CALL SUBOPT_0x36
0009da 89a8      	LDD  R26,Y+16
0009db 89b9      	LDD  R27,Y+16+1
0009dc 9614      	ADIW R26,4
0009dd 940e 0d87 	CALL __GETW1P
0009df 87ea      	STD  Y+10,R30
0009e0 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
0009e1 fd00      	SBRC R16,0
0009e2 c011      	RJMP _0x2000047
                 _0x2000048:
0009e3 1715      	CP   R17,R21
0009e4 f478      	BRSH _0x200004A
0009e5 ff07      	SBRS R16,7
0009e6 c008      	RJMP _0x200004B
0009e7 ff02      	SBRS R16,2
0009e8 c004      	RJMP _0x200004C
0009e9 7f0b      	ANDI R16,LOW(251)
0009ea 2f24      	MOV  R18,R20
0009eb 5011      	SUBI R17,LOW(1)
0009ec c001      	RJMP _0x200004D
                 _0x200004C:
0009ed e320      	LDI  R18,LOW(48)
                 _0x200004D:
0009ee c001      	RJMP _0x200004E
                 _0x200004B:
0009ef e220      	LDI  R18,LOW(32)
                 _0x200004E:
0009f0 940e 0d0b 	CALL SUBOPT_0x35
0009f2 5051      	SUBI R21,LOW(1)
0009f3 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0009f4 2f31      	MOV  R19,R17
0009f5 ff01      	SBRS R16,1
0009f6 c017      	RJMP _0x200004F
                 _0x2000050:
0009f7 3030      	CPI  R19,0
0009f8 f0a1      	BREQ _0x2000052
0009f9 ff03      	SBRS R16,3
0009fa c006      	RJMP _0x2000053
0009fb 81ee      	LDD  R30,Y+6
0009fc 81ff      	LDD  R31,Y+6+1
0009fd 9125      	LPM  R18,Z+
0009fe 83ee      	STD  Y+6,R30
0009ff 83ff      	STD  Y+6+1,R31
000a00 c005      	RJMP _0x2000054
                 _0x2000053:
000a01 81ae      	LDD  R26,Y+6
000a02 81bf      	LDD  R27,Y+6+1
000a03 912d      	LD   R18,X+
000a04 83ae      	STD  Y+6,R26
000a05 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000a06 940e 0d0b 	CALL SUBOPT_0x35
000a08 3050      	CPI  R21,0
000a09 f009      	BREQ _0x2000055
000a0a 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000a0b 5031      	SUBI R19,LOW(1)
000a0c cfea      	RJMP _0x2000050
                 _0x2000052:
000a0d c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000a0e e320      	LDI  R18,LOW(48)
000a0f 81ee      	LDD  R30,Y+6
000a10 81ff      	LDD  R31,Y+6+1
000a11 940e 0d8b 	CALL __GETW1PF
000a13 87e8      	STD  Y+8,R30
000a14 87f9      	STD  Y+8+1,R31
000a15 81ee      	LDD  R30,Y+6
000a16 81ff      	LDD  R31,Y+6+1
000a17 9632      	ADIW R30,2
000a18 83ee      	STD  Y+6,R30
000a19 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000a1a 85e8      	LDD  R30,Y+8
000a1b 85f9      	LDD  R31,Y+8+1
000a1c 85aa      	LDD  R26,Y+10
000a1d 85bb      	LDD  R27,Y+10+1
000a1e 17ae      	CP   R26,R30
000a1f 07bf      	CPC  R27,R31
000a20 f050      	BRLO _0x200005C
000a21 5f2f      	SUBI R18,-LOW(1)
000a22 85a8      	LDD  R26,Y+8
000a23 85b9      	LDD  R27,Y+8+1
000a24 85ea      	LDD  R30,Y+10
000a25 85fb      	LDD  R31,Y+10+1
000a26 1bea      	SUB  R30,R26
000a27 0bfb      	SBC  R31,R27
000a28 87ea      	STD  Y+10,R30
000a29 87fb      	STD  Y+10+1,R31
000a2a cfef      	RJMP _0x200005A
                 _0x200005C:
000a2b 332a      	CPI  R18,58
000a2c f028      	BRLO _0x200005D
000a2d ff03      	SBRS R16,3
000a2e c002      	RJMP _0x200005E
000a2f 5f29      	SUBI R18,-LOW(7)
000a30 c001      	RJMP _0x200005F
                 _0x200005E:
000a31 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000a32 fd04      	SBRC R16,4
000a33 c01a      	RJMP _0x2000061
000a34 3321      	CPI  R18,49
000a35 f420      	BRSH _0x2000063
000a36 85a8      	LDD  R26,Y+8
000a37 85b9      	LDD  R27,Y+8+1
000a38 9711      	SBIW R26,1
000a39 f409      	BRNE _0x2000062
                 _0x2000063:
000a3a c009      	RJMP _0x20000CD
                 _0x2000062:
000a3b 1753      	CP   R21,R19
000a3c f010      	BRLO _0x2000067
000a3d ff00      	SBRS R16,0
000a3e c001      	RJMP _0x2000068
                 _0x2000067:
000a3f c013      	RJMP _0x2000066
                 _0x2000068:
000a40 e220      	LDI  R18,LOW(32)
000a41 ff07      	SBRS R16,7
000a42 c00b      	RJMP _0x2000069
000a43 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000a44 6100      	ORI  R16,LOW(16)
000a45 ff02      	SBRS R16,2
000a46 c007      	RJMP _0x200006A
000a47 7f0b      	ANDI R16,LOW(251)
000a48 934a      	ST   -Y,R20
000a49 940e 0d18 	CALL SUBOPT_0x37
000a4b 3050      	CPI  R21,0
000a4c f009      	BREQ _0x200006B
000a4d 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000a4e 940e 0d0b 	CALL SUBOPT_0x35
000a50 3050      	CPI  R21,0
000a51 f009      	BREQ _0x200006C
000a52 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000a53 5031      	SUBI R19,LOW(1)
000a54 85a8      	LDD  R26,Y+8
000a55 85b9      	LDD  R27,Y+8+1
000a56 9712      	SBIW R26,2
000a57 f008      	BRLO _0x2000059
000a58 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000a59 ff00      	SBRS R16,0
000a5a c008      	RJMP _0x200006D
                 _0x200006E:
000a5b 3050      	CPI  R21,0
000a5c f031      	BREQ _0x2000070
000a5d 5051      	SUBI R21,LOW(1)
000a5e e2e0      	LDI  R30,LOW(32)
000a5f 93ea      	ST   -Y,R30
000a60 940e 0d18 	CALL SUBOPT_0x37
000a62 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000a63 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000a64 ced8      	RJMP _0x2000016
                 _0x2000018:
000a65 85ac      	LDD  R26,Y+12
000a66 85bd      	LDD  R27,Y+12+1
000a67 91ed      	LD   R30,X+
000a68 91fd      	LD   R31,X+
000a69 940e 0d38 	CALL __LOADLOCR6
000a6b 9664      	ADIW R28,20
000a6c 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000a6d 92ff      	PUSH R15
000a6e 2ef8      	MOV  R15,R24
000a6f 9726      	SBIW R28,6
000a70 940e 0d33 	CALL __SAVELOCR4
000a72 01de      	MOVW R26,R28
000a73 961c      	ADIW R26,12
000a74 940e 0d3f 	CALL __ADDW2R15
000a76 940e 0d87 	CALL __GETW1P
000a78 9730      	SBIW R30,0
000a79 f419      	BRNE _0x2000072
000a7a efef      	LDI  R30,LOW(65535)
000a7b efff      	LDI  R31,HIGH(65535)
000a7c c027      	RJMP _0x20C0005
                 _0x2000072:
000a7d 01de      	MOVW R26,R28
000a7e 9616      	ADIW R26,6
000a7f 940e 0d3f 	CALL __ADDW2R15
000a81 018d      	MOVW R16,R26
000a82 01de      	MOVW R26,R28
000a83 961c      	ADIW R26,12
000a84 940e 0d3f 	CALL __ADDW2R15
000a86 91ed      	LD   R30,X+
000a87 91fd      	LD   R31,X+
000a88 83ee      	STD  Y+6,R30
000a89 83ff      	STD  Y+6+1,R31
000a8a e0e0      	LDI  R30,LOW(0)
000a8b 87e8      	STD  Y+8,R30
000a8c 87e9      	STD  Y+8+1,R30
000a8d 01de      	MOVW R26,R28
000a8e 961a      	ADIW R26,10
000a8f 940e 0d3f 	CALL __ADDW2R15
000a91 91ed      	LD   R30,X+
000a92 91fd      	LD   R31,X+
000a93 93fa      	ST   -Y,R31
000a94 93ea      	ST   -Y,R30
000a95 931a      	ST   -Y,R17
000a96 930a      	ST   -Y,R16
000a97 efe7      	LDI  R30,LOW(_put_buff_G100)
000a98 e0f8      	LDI  R31,HIGH(_put_buff_G100)
000a99 93fa      	ST   -Y,R31
000a9a 93ea      	ST   -Y,R30
000a9b 01de      	MOVW R26,R28
000a9c 961a      	ADIW R26,10
000a9d de93      	RCALL __print_G100
000a9e 019f      	MOVW R18,R30
000a9f 81ae      	LDD  R26,Y+6
000aa0 81bf      	LDD  R27,Y+6+1
000aa1 e0e0      	LDI  R30,LOW(0)
000aa2 93ec      	ST   X,R30
000aa3 01f9      	MOVW R30,R18
                 _0x20C0005:
000aa4 940e 0d3a 	CALL __LOADLOCR4
000aa6 962a      	ADIW R28,10
000aa7 90ff      	POP  R15
000aa8 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000aa9 93ba      	ST   -Y,R27
000aaa 93aa      	ST   -Y,R26
000aab 91a9          ld   r26,y+
000aac 91b9          ld   r27,y+
000aad 27ee          clr  r30
000aae 27ff          clr  r31
                 strlen0:
000aaf 916d          ld   r22,x+
000ab0 2366          tst  r22
000ab1 f011          breq strlen1
000ab2 9631          adiw r30,1
000ab3 cffb          rjmp strlen0
                 strlen1:
000ab4 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000ab5 93ba      	ST   -Y,R27
000ab6 93aa      	ST   -Y,R26
000ab7 27aa          clr  r26
000ab8 27bb          clr  r27
000ab9 91e9          ld   r30,y+
000aba 91f9          ld   r31,y+
                 strlenf0:
000abb 9005      	lpm  r0,z+
000abc 2000          tst  r0
000abd f011          breq strlenf1
000abe 9611          adiw r26,1
000abf cffb          rjmp strlenf0
                 strlenf1:
000ac0 01fd          movw r30,r26
000ac1 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _abs:
                 ; .FSTART _abs
000ac2 93ba      	ST   -Y,R27
000ac3 93aa      	ST   -Y,R26
000ac4 91e9          ld   r30,y+
000ac5 91f9          ld   r31,y+
000ac6 9730          sbiw r30,0
000ac7 f41a          brpl __abs0
000ac8 95e0          com  r30
000ac9 95f0          com  r31
000aca 9631          adiw r30,1
                 __abs0:
000acb 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G103:
                 ; .FSTART __lcd_delay_G103
000acc e0ff          ldi   r31,15
                 __lcd_delay0:
000acd 95fa          dec   r31
000ace f7f1          brne  __lcd_delay0
000acf 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000ad0 b3a7          in    r26,__lcd_direction
000ad1 70af          andi  r26,0xf                 ;set as input
000ad2 bba7          out   __lcd_direction,r26
000ad3 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000ad4 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000ad5 dff6      	RCALL __lcd_delay_G103
000ad6 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000ad7 dff4      	RCALL __lcd_delay_G103
000ad8 b3a6          in    r26,__lcd_pin
000ad9 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000ada dff1      	RCALL __lcd_delay_G103
000adb 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000adc dfef      	RCALL __lcd_delay_G103
000add 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000ade fda7          sbrc  r26,__lcd_busy_flag
000adf cff5          rjmp  __lcd_busy
000ae0 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
000ae1 7fa0          andi  r26,0xf0
000ae2 2bab          or    r26,r27
000ae3 bba8          out   __lcd_port,r26          ;write
000ae4 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000ae5 940e 0acc 	CALL __lcd_delay_G103
000ae7 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000ae8 940e 0acc 	CALL __lcd_delay_G103
000aea 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000aeb 93aa      	ST   -Y,R26
000aec 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000aed b3a7          in    r26,__lcd_direction
000aee 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000aef bba7          out   __lcd_direction,r26
000af0 b3b8          in    r27,__lcd_port
000af1 70bf          andi  r27,0xf
000af2 81a8          ld    r26,y
000af3 dfed      	RCALL __lcd_write_nibble_G103
000af4 81a8          ld    r26,y
000af5 95a2          swap  r26
000af6 dfea      	RCALL __lcd_write_nibble_G103
000af7 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000af8 940c 0bc1 	JMP  _0x20C0001
                 ; .FEND
                 __lcd_read_nibble_G103:
                 ; .FSTART __lcd_read_nibble_G103
000afa 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000afb 940e 0acc 	CALL __lcd_delay_G103
000afd b3e6          in    r30,__lcd_pin           ;read
000afe 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000aff 940e 0acc 	CALL __lcd_delay_G103
000b01 7fe0          andi  r30,0xf0
000b02 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G103:
                 ; .FSTART _lcd_read_byte0_G103
000b03 940e 0acc 	CALL __lcd_delay_G103
000b05 dff4      	RCALL __lcd_read_nibble_G103
000b06 2fae          mov   r26,r30
000b07 dff2      	RCALL __lcd_read_nibble_G103
000b08 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
000b09 95e2          swap  r30
000b0a 2bea          or    r30,r26
000b0b 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000b0c 93aa      	ST   -Y,R26
000b0d 940e 0ad0 	CALL __lcd_ready
000b0f 81e8      	LD   R30,Y
000b10 e0f0      	LDI  R31,0
000b11 54ed      	SUBI R30,LOW(-__base_y_G103)
000b12 4ffe      	SBCI R31,HIGH(-__base_y_G103)
000b13 81e0      	LD   R30,Z
000b14 81a9      	LDD  R26,Y+1
000b15 0fae      	ADD  R26,R30
000b16 940e 0aeb 	CALL __lcd_write_data
000b18 81e9      	LDD  R30,Y+1
000b19 93e0 01b7 	STS  __lcd_x,R30
000b1b 81e8      	LD   R30,Y
000b1c 93e0 01b8 	STS  __lcd_y,R30
                 _0x20C0004:
000b1e 9622      	ADIW R28,2
000b1f 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000b20 940e 0ad0 	CALL __lcd_ready
000b22 e0a2      	LDI  R26,LOW(2)
000b23 940e 0aeb 	CALL __lcd_write_data
000b25 940e 0ad0 	CALL __lcd_ready
000b27 e0ac      	LDI  R26,LOW(12)
000b28 940e 0aeb 	CALL __lcd_write_data
000b2a 940e 0ad0 	CALL __lcd_ready
000b2c e0a1      	LDI  R26,LOW(1)
000b2d 940e 0aeb 	CALL __lcd_write_data
000b2f e0e0      	LDI  R30,LOW(0)
000b30 93e0 01b8 	STS  __lcd_y,R30
000b32 93e0 01b7 	STS  __lcd_x,R30
000b34 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000b35 93aa      	ST   -Y,R26
000b36 93ef          push r30
000b37 93ff          push r31
000b38 81a8          ld   r26,y
000b39 9468          set
000b3a 30aa          cpi  r26,10
000b3b f039          breq __lcd_putchar1
000b3c 94e8          clt
000b3d 91e0 01b9 	LDS  R30,__lcd_maxx
000b3f 91a0 01b7 	LDS  R26,__lcd_x
000b41 17ae      	CP   R26,R30
000b42 f058      	BRLO _0x2060004
                 	__lcd_putchar1:
000b43 91e0 01b8 	LDS  R30,__lcd_y
000b45 5fef      	SUBI R30,-LOW(1)
000b46 93e0 01b8 	STS  __lcd_y,R30
000b48 e0e0      	LDI  R30,LOW(0)
000b49 93ea      	ST   -Y,R30
000b4a 91a0 01b8 	LDS  R26,__lcd_y
000b4c dfbf      	RCALL _lcd_gotoxy
000b4d f056      	brts __lcd_putchar0
                 _0x2060004:
000b4e 91e0 01b7 	LDS  R30,__lcd_x
000b50 5fef      	SUBI R30,-LOW(1)
000b51 93e0 01b7 	STS  __lcd_x,R30
000b53 df7c          rcall __lcd_ready
000b54 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
000b55 81a8      	LD   R26,Y
000b56 940e 0aeb 	CALL __lcd_write_data
                 __lcd_putchar0:
000b58 91ff          pop  r31
000b59 91ef          pop  r30
000b5a 940c 0bc1 	JMP  _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000b5c 93ba      	ST   -Y,R27
000b5d 93aa      	ST   -Y,R26
000b5e 931a      	ST   -Y,R17
                 _0x2060005:
000b5f 81a9      	LDD  R26,Y+1
000b60 81ba      	LDD  R27,Y+1+1
000b61 91ed      	LD   R30,X+
000b62 83a9      	STD  Y+1,R26
000b63 83ba      	STD  Y+1+1,R27
000b64 2f1e      	MOV  R17,R30
000b65 30e0      	CPI  R30,0
000b66 f019      	BREQ _0x2060007
000b67 2fa1      	MOV  R26,R17
000b68 dfcc      	RCALL _lcd_putchar
000b69 cff5      	RJMP _0x2060005
                 _0x2060007:
000b6a c010      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000b6b 93ba      	ST   -Y,R27
000b6c 93aa      	ST   -Y,R26
000b6d 931a      	ST   -Y,R17
                 _0x2060008:
000b6e 81e9      	LDD  R30,Y+1
000b6f 81fa      	LDD  R31,Y+1+1
000b70 9631      	ADIW R30,1
000b71 83e9      	STD  Y+1,R30
000b72 83fa      	STD  Y+1+1,R31
000b73 9731      	SBIW R30,1
000b74 91e4      	LPM  R30,Z
000b75 2f1e      	MOV  R17,R30
000b76 30e0      	CPI  R30,0
000b77 f019      	BREQ _0x206000A
000b78 2fa1      	MOV  R26,R17
000b79 dfbb      	RCALL _lcd_putchar
000b7a cff3      	RJMP _0x2060008
                 _0x206000A:
                 _0x20C0002:
000b7b 8118      	LDD  R17,Y+0
                 _0x20C0003:
000b7c 9623      	ADIW R28,3
000b7d 9508      	RET
                 ; .FEND
                 __long_delay_G103:
                 ; .FSTART __long_delay_G103
000b7e 27aa          clr   r26
000b7f 27bb          clr   r27
                 __long_delay0:
000b80 9711          sbiw  r26,1         ;2 cycles
000b81 f7f1          brne  __long_delay0 ;2 cycles
000b82 9508      	RET
                 ; .FEND
                 __lcd_init_write_G103:
                 ; .FSTART __lcd_init_write_G103
000b83 93aa      	ST   -Y,R26
000b84 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000b85 b3a7          in    r26,__lcd_direction
000b86 6fa7          ori   r26,0xf7                ;set as output
000b87 bba7          out   __lcd_direction,r26
000b88 b3b8          in    r27,__lcd_port
000b89 70bf          andi  r27,0xf
000b8a 81a8          ld    r26,y
000b8b 940e 0ae1 	CALL __lcd_write_nibble_G103
000b8d 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000b8e c032      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000b8f 93aa      	ST   -Y,R26
000b90 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000b91 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
000b92 81e8      	LD   R30,Y
000b93 93e0 01b9 	STS  __lcd_maxx,R30
000b95 58e0      	SUBI R30,-LOW(128)
                +
000b96 93e0 01b5+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
000b98 81e8      	LD   R30,Y
000b99 54e0      	SUBI R30,-LOW(192)
                +
000b9a 93e0 01b6+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
000b9c 940e 0d28 	CALL SUBOPT_0x39
000b9e 940e 0d28 	CALL SUBOPT_0x39
000ba0 940e 0d28 	CALL SUBOPT_0x39
000ba2 dfdb      	RCALL __long_delay_G103
000ba3 e2a0      	LDI  R26,LOW(32)
000ba4 dfde      	RCALL __lcd_init_write_G103
000ba5 dfd8      	RCALL __long_delay_G103
000ba6 e2a8      	LDI  R26,LOW(40)
000ba7 940e 0d2d 	CALL SUBOPT_0x3A
000ba9 e0a4      	LDI  R26,LOW(4)
000baa 940e 0d2d 	CALL SUBOPT_0x3A
000bac e8a5      	LDI  R26,LOW(133)
000bad 940e 0d2d 	CALL SUBOPT_0x3A
000baf b3a7          in    r26,__lcd_direction
000bb0 70af          andi  r26,0xf                 ;set as input
000bb1 bba7          out   __lcd_direction,r26
000bb2 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000bb3 940e 0b03 	CALL _lcd_read_byte0_G103
000bb5 30e5      	CPI  R30,LOW(0x5)
000bb6 f011      	BREQ _0x206000B
000bb7 e0e0      	LDI  R30,LOW(0)
000bb8 c008      	RJMP _0x20C0001
                 _0x206000B:
000bb9 940e 0ad0 	CALL __lcd_ready
000bbb e0a6      	LDI  R26,LOW(6)
000bbc 940e 0aeb 	CALL __lcd_write_data
000bbe 940e 0b20 	CALL _lcd_clear
000bc0 e0e1      	LDI  R30,LOW(1)
                 _0x20C0001:
000bc1 9621      	ADIW R28,1
000bc2 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _buff:
000160           	.BYTE 0x21
                 _a:
000181           	.BYTE 0x1
                 _count_btn:
000182           	.BYTE 0x2
                 _isChildSelect:
000184           	.BYTE 0x1
                 _isTestTombol:
000185           	.BYTE 0x1
                 
                 	.ESEG
                 _garis:
000000           	.BYTE 0xE
                 _back:
00000e           	.BYTE 0xE
                 _tengah:
00001c           	.BYTE 0xE
                 
                 	.DSEG
                 _sen:
000186           	.BYTE 0x7
                 _sensor:
00018d           	.BYTE 0x2
                 _error:
00018f           	.BYTE 0x2
                 _lastError:
000191           	.BYTE 0x2
                 _kp:
000193           	.BYTE 0x2
                 _kd:
000195           	.BYTE 0x2
                 _SPEED:
000197           	.BYTE 0x2
                 _MIN_SPEED:
000199           	.BYTE 0x2
                 _MAX_SPEED:
00019b           	.BYTE 0x2
                 _count:
00019d           	.BYTE 0x2
                 _second:
00019f           	.BYTE 0x2
                 
                 	.ESEG
                 _mapMirror:
00002a           	.BYTE 0x2
                 _pointPos:
00002c           	.BYTE 0x1
                 _ringPos:
00002d           	.BYTE 0x2
                 
                 	.DSEG
                 _maxHijau:
0001a1           	.BYTE 0x2
                 _maxKuning:
0001a3           	.BYTE 0x2
                 _maxMerah:
0001a5           	.BYTE 0x2
                 _minHijau:
0001a7           	.BYTE 0x2
                 _minKuning:
0001a9           	.BYTE 0x2
                 _minMerah:
0001ab           	.BYTE 0x2
                 _isWarna:
0001ad           	.BYTE 0x2
                 __seed_G102:
0001af           	.BYTE 0x4
                 __base_y_G103:
0001b3           	.BYTE 0x4
                 __lcd_x:
0001b7           	.BYTE 0x1
                 __lcd_y:
0001b8           	.BYTE 0x1
                 __lcd_maxx:
0001b9           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000bc3 e0e7      	LDI  R30,LOW(7)
000bc4 e0f0      	LDI  R31,HIGH(7)
000bc5 168e      	CP   R8,R30
000bc6 069f      	CPC  R9,R31
000bc7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
000bc8 2da8      	MOV  R26,R8
000bc9 940e 018b 	CALL _read_adc
000bcb 2e0e      	MOV  R0,R30
000bcc 01f4      	MOVW R30,R8
000bcd e1ac      	LDI  R26,LOW(_tengah)
000bce e0b0      	LDI  R27,HIGH(_tengah)
000bcf 0fee      	LSL  R30
000bd0 1fff      	ROL  R31
000bd1 0fae      	ADD  R26,R30
000bd2 1fbf      	ADC  R27,R31
000bd3 940e 0d94 	CALL __EEPROMRDW
000bd5 2da0      	MOV  R26,R0
000bd6 e0b0      	LDI  R27,0
000bd7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000bd8 9fea      	MUL  R30,R26
000bd9 01f0      	MOVW R30,R0
                +
000bda 0f6e     +ADD R22 , R30
000bdb 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
000bdc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x3:
000bdd 93ea      	ST   -Y,R30
000bde e0a0      	LDI  R26,LOW(0)
000bdf 940c 0b0c 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
000be1 e6e0      	LDI  R30,LOW(_buff)
000be2 e0f1      	LDI  R31,HIGH(_buff)
000be3 93fa      	ST   -Y,R31
000be4 93ea      	ST   -Y,R30
000be5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x5:
000be6 27ff      	CLR  R31
000be7 2766      	CLR  R22
000be8 2777      	CLR  R23
000be9 940e 0d8f 	CALL __PUTPARD1
000beb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000bec e6a0      	LDI  R26,LOW(_buff)
000bed e0b1      	LDI  R27,HIGH(_buff)
000bee 940c 0b5c 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000bf0 01f4      	MOVW R30,R8
000bf1 e0a0      	LDI  R26,LOW(_garis)
000bf2 e0b0      	LDI  R27,HIGH(_garis)
000bf3 0fee      	LSL  R30
000bf4 1fff      	ROL  R31
000bf5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000bf6 e0f0      	LDI  R31,0
000bf7 940e 0da4 	CALL __EEPROMWRW
000bf9 e0e0      	LDI  R30,LOW(0)
000bfa cfe2      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x9:
000bfb 940e 0b6b 	CALL _lcd_putsf
000bfd e0e0      	LDI  R30,LOW(0)
000bfe 93ea      	ST   -Y,R30
000bff e0a1      	LDI  R26,LOW(1)
000c00 940e 0b0c 	CALL _lcd_gotoxy
000c02 cfde      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
                +
000c03 e9e9     +LDI R30 , LOW ( 2 * _0x0 + ( 25 ) )
000c04 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW1FN _0x0,25
000c05 93fa      	ST   -Y,R31
000c06 93ea      	ST   -Y,R30
000c07 01f4      	MOVW R30,R8
000c08 940e 0d4f 	CALL __CWD1
000c0a 940e 0d8f 	CALL __PUTPARD1
000c0c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xB:
000c0d 0fae      	ADD  R26,R30
000c0e 1fbf      	ADC  R27,R31
000c0f 940e 0d94 	CALL __EEPROMRDW
000c11 940e 0d4f 	CALL __CWD1
000c13 940e 0d8f 	CALL __PUTPARD1
000c15 e088      	LDI  R24,8
000c16 940e 0a6d 	CALL _sprintf
000c18 962c      	ADIW R28,12
000c19 cfd2      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000c1a 98c3      	CBI  0x18,3
000c1b e6a4      	LDI  R26,LOW(100)
000c1c e0b0      	LDI  R27,0
000c1d 940e 0ea8 	CALL _delay_ms
000c1f 9ac3      	SBI  0x18,3
000c20 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
000c21 01f4      	MOVW R30,R8
000c22 e0ae      	LDI  R26,LOW(_back)
000c23 e0b0      	LDI  R27,HIGH(_back)
000c24 0fee      	LSL  R30
000c25 1fff      	ROL  R31
000c26 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000c27 940e 0d4f 	CALL __CWD1
000c29 940e 0d8f 	CALL __PUTPARD1
000c2b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xF:
000c2c 93aa      	ST   -Y,R26
000c2d 81e8      	LD   R30,Y
000c2e e0f0      	LDI  R31,0
000c2f bdf9      	OUT  0x28+1,R31
000c30 bde8      	OUT  0x28,R30
000c31 81e9      	LDD  R30,Y+1
000c32 e0f0      	LDI  R31,0
000c33 bdfb      	OUT  0x2A+1,R31
000c34 bdea      	OUT  0x2A,R30
000c35 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000c36 81a8      	LD   R26,Y
000c37 81b9      	LDD  R27,Y+1
000c38 940e 0dbd 	CALL __CPW02
000c3a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
000c3b 81a8      	LD   R26,Y
000c3c 81b9      	LDD  R27,Y+1
000c3d 940c 0196 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
000c3f 81e8      	LD   R30,Y
000c40 81f9      	LDD  R31,Y+1
000c41 940e 0d4f 	CALL __CWD1
000c43 940e 0e2d 	CALL __CDF1
000c45 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000c46 940e 0df6 	CALL __CFD1
000c48 93ed      	ST   X+,R30
000c49 93fc      	ST   X,R31
000c4a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x14:
000c4b 91e0 018d 	LDS  R30,_sensor
000c4d 91f0 018e 	LDS  R31,_sensor+1
000c4f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
000c50 91e0 019b 	LDS  R30,_MAX_SPEED
000c52 91f0 019c 	LDS  R31,_MAX_SPEED+1
000c54 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
000c55 91e0 0199 	LDS  R30,_MIN_SPEED
000c57 91f0 019a 	LDS  R31,_MIN_SPEED+1
000c59 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000c5a dff0      	RCALL SUBOPT_0x14
000c5b 71ec      	ANDI R30,LOW(0x1C)
000c5c 31ec      	CPI  R30,LOW(0x1C)
000c5d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x18:
000c5e 81ea      	LDD  R30,Y+2
000c5f 93ea      	ST   -Y,R30
000c60 81ab      	LDD  R26,Y+3
000c61 940e 02b0 	CALL _kiri
000c63 940c 01e7 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x19:
000c65 81ea      	LDD  R30,Y+2
000c66 93ea      	ST   -Y,R30
000c67 81ab      	LDD  R26,Y+3
000c68 940e 02a9 	CALL _kanan
000c6a 940c 01e7 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1A:
000c6c 93ba      	ST   -Y,R27
000c6d 93aa      	ST   -Y,R26
000c6e e2aa      	LDI  R26,LOW(_mapMirror)
000c6f e0b0      	LDI  R27,HIGH(_mapMirror)
000c70 940e 0d94 	CALL __EEPROMRDW
000c72 9730      	SBIW R30,0
000c73 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1B:
000c74 81ea      	LDD  R30,Y+2
000c75 81fb      	LDD  R31,Y+2+1
000c76 93fa      	ST   -Y,R31
000c77 93ea      	ST   -Y,R30
000c78 81aa      	LDD  R26,Y+2
000c79 81bb      	LDD  R27,Y+2+1
000c7a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 24 TIMES, CODE SIZE REDUCTION:43 WORDS
                 SUBOPT_0x1C:
000c7b 93ea      	ST   -Y,R30
000c7c e0a1      	LDI  R26,LOW(1)
000c7d 940c 0b0c 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x1D:
000c7f e2ac      	LDI  R26,LOW(_pointPos)
000c80 e0b0      	LDI  R27,HIGH(_pointPos)
000c81 940e 0d98 	CALL __EEPROMRDB
000c83 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1E:
000c84 ede0      	LDI  R30,LOW(2000)
000c85 e0f7      	LDI  R31,HIGH(2000)
000c86 93fa      	ST   -Y,R31
000c87 93ea      	ST   -Y,R30
000c88 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1F:
000c89 93fa      	ST   -Y,R31
000c8a 93ea      	ST   -Y,R30
000c8b eda0      	LDI  R26,LOW(2000)
000c8c e0b7      	LDI  R27,HIGH(2000)
000c8d 940c 03fe 	JMP  _scanX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x20:
000c8f eca8      	LDI  R26,LOW(200)
000c90 e0b0      	LDI  R27,0
000c91 940c 0493 	JMP  _belokKiri
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x21:
000c93 940e 0dac 	CALL __EEPROMWRB
000c95 e2ad      	LDI  R26,LOW(_ringPos)
000c96 e0b0      	LDI  R27,HIGH(_ringPos)
000c97 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
000c98 e0e1      	LDI  R30,LOW(1)
000c99 e0f0      	LDI  R31,HIGH(1)
000c9a 940e 0da4 	CALL __EEPROMWRW
000c9c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x23:
000c9d e2ad      	LDI  R26,LOW(_ringPos)
000c9e e0b0      	LDI  R27,HIGH(_ringPos)
000c9f 940e 0d94 	CALL __EEPROMRDW
000ca1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x24:
000ca2 eda0      	LDI  R26,LOW(2000)
000ca3 e0b7      	LDI  R27,HIGH(2000)
000ca4 940c 03fe 	JMP  _scanX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x25:
000ca6 eca8      	LDI  R26,LOW(200)
000ca7 e0b0      	LDI  R27,0
000ca8 940c 0488 	JMP  _belokKanan
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
000caa ede0      	LDI  R30,LOW(208)
000cab 93ea      	ST   -Y,R30
000cac eda0      	LDI  R26,LOW(208)
000cad 940c 02a2 	JMP  _mundur
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x27:
000caf 940e 0b20 	CALL _lcd_clear
000cb1 e0e0      	LDI  R30,LOW(0)
000cb2 cf2a      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x28:
000cb3 940e 0b6b 	CALL _lcd_putsf
000cb5 e0e0      	LDI  R30,LOW(0)
000cb6 cfc4      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x29:
000cb7 e0e0      	LDI  R30,LOW(0)
000cb8 93e0 0184 	STS  _isChildSelect,R30
000cba e0e0      	LDI  R30,LOW(0)
000cbb e0f0      	LDI  R31,HIGH(0)
000cbc 93fa      	ST   -Y,R31
000cbd 93ea      	ST   -Y,R30
000cbe e0a0      	LDI  R26,LOW(0)
000cbf 940c 05ca 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2A:
000cc1 eea8      	LDI  R26,LOW(1000)
000cc2 e0b3      	LDI  R27,HIGH(1000)
000cc3 940c 0196 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2B:
000cc5 940e 0b6b 	CALL _lcd_putsf
000cc7 eee8      	LDI  R30,LOW(1000)
000cc8 e0f3      	LDI  R31,HIGH(1000)
000cc9 93fa      	ST   -Y,R31
000cca 93ea      	ST   -Y,R30
000ccb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2C:
000ccc eea8      	LDI  R26,LOW(1000)
000ccd e0b3      	LDI  R27,HIGH(1000)
000cce 940e 02b7 	CALL _setMotor
000cd0 eda0      	LDI  R26,LOW(2000)
000cd1 e0b7      	LDI  R27,HIGH(2000)
000cd2 940c 0ea8 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2D:
000cd4 940e 0b6b 	CALL _lcd_putsf
000cd6 e1e8      	LDI  R30,LOW(64536)
000cd7 effc      	LDI  R31,HIGH(64536)
000cd8 93fa      	ST   -Y,R31
000cd9 93ea      	ST   -Y,R30
000cda 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2E:
000cdb e1a8      	LDI  R26,LOW(64536)
000cdc efbc      	LDI  R27,HIGH(64536)
000cdd 940e 02b7 	CALL _setMotor
000cdf eda0      	LDI  R26,LOW(2000)
000ce0 e0b7      	LDI  R27,HIGH(2000)
000ce1 940e 0ea8 	CALL _delay_ms
000ce3 e0e0      	LDI  R30,LOW(0)
000ce4 cf96      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2F:
000ce5 e0e0      	LDI  R30,LOW(0)
000ce6 e0f0      	LDI  R31,HIGH(0)
000ce7 93fa      	ST   -Y,R31
000ce8 93ea      	ST   -Y,R30
000ce9 e0a0      	LDI  R26,LOW(0)
000cea 940c 05ca 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x30:
000cec 940e 0b6b 	CALL _lcd_putsf
000cee e0e0      	LDI  R30,LOW(0)
000cef 93e0 0185 	STS  _isTestTombol,R30
000cf1 efa4      	LDI  R26,LOW(500)
000cf2 e0b1      	LDI  R27,HIGH(500)
000cf3 940c 0196 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x31:
000cf5 eca8      	LDI  R26,LOW(200)
000cf6 e0b0      	LDI  R27,0
000cf7 940c 0196 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x32:
000cf9 91ed      	LD   R30,X+
000cfa 91fd      	LD   R31,X+
000cfb 9631      	ADIW R30,1
000cfc 93fe      	ST   -X,R31
000cfd 93ee      	ST   -X,R30
000cfe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x33:
000cff 91e0 0182 	LDS  R30,_count_btn
000d01 91f0 0183 	LDS  R31,_count_btn+1
000d03 93fa      	ST   -Y,R31
000d04 93ea      	ST   -Y,R30
000d05 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x34:
000d06 e2ad      	LDI  R26,LOW(_ringPos)
000d07 e0b0      	LDI  R27,HIGH(_ringPos)
000d08 e0e1      	LDI  R30,LOW(1)
000d09 e0f0      	LDI  R31,HIGH(1)
000d0a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x35:
000d0b 932a      	ST   -Y,R18
000d0c 85ad      	LDD  R26,Y+13
000d0d 85be      	LDD  R27,Y+13+1
000d0e 85ef      	LDD  R30,Y+15
000d0f 89f8      	LDD  R31,Y+15+1
000d10 9509      	ICALL
000d11 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x36:
000d12 89e8      	LDD  R30,Y+16
000d13 89f9      	LDD  R31,Y+16+1
000d14 9734      	SBIW R30,4
000d15 8be8      	STD  Y+16,R30
000d16 8bf9      	STD  Y+16+1,R31
000d17 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x37:
000d18 85ad      	LDD  R26,Y+13
000d19 85be      	LDD  R27,Y+13+1
000d1a 85ef      	LDD  R30,Y+15
000d1b 89f8      	LDD  R31,Y+15+1
000d1c 9509      	ICALL
000d1d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x38:
000d1e 89a8      	LDD  R26,Y+16
000d1f 89b9      	LDD  R27,Y+16+1
000d20 9614      	ADIW R26,4
000d21 91ed      	LD   R30,X+
000d22 91fd      	LD   R31,X+
000d23 83ee      	STD  Y+6,R30
000d24 83ff      	STD  Y+6+1,R31
000d25 81ae      	LDD  R26,Y+6
000d26 81bf      	LDD  R27,Y+6+1
000d27 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x39:
000d28 940e 0b7e 	CALL __long_delay_G103
000d2a e3a0      	LDI  R26,LOW(48)
000d2b 940c 0b83 	JMP  __lcd_init_write_G103
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
000d2d 940e 0aeb 	CALL __lcd_write_data
000d2f 940c 0b7e 	JMP  __long_delay_G103
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000d31 935a      	ST   -Y,R21
                 __SAVELOCR5:
000d32 934a      	ST   -Y,R20
                 __SAVELOCR4:
000d33 933a      	ST   -Y,R19
                 __SAVELOCR3:
000d34 932a      	ST   -Y,R18
                 __SAVELOCR2:
000d35 931a      	ST   -Y,R17
000d36 930a      	ST   -Y,R16
000d37 9508      	RET
                 
                 __LOADLOCR6:
000d38 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000d39 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000d3a 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000d3b 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000d3c 8119      	LDD  R17,Y+1
000d3d 8108      	LD   R16,Y
000d3e 9508      	RET
                 
                 __ADDW2R15:
000d3f 2400      	CLR  R0
000d40 0daf      	ADD  R26,R15
000d41 1db0      	ADC  R27,R0
000d42 9508      	RET
                 
                 __ANEGW1:
000d43 95f1      	NEG  R31
000d44 95e1      	NEG  R30
000d45 40f0      	SBCI R31,0
000d46 9508      	RET
                 
                 __ANEGD1:
000d47 95f0      	COM  R31
000d48 9560      	COM  R22
000d49 9570      	COM  R23
000d4a 95e1      	NEG  R30
000d4b 4fff      	SBCI R31,-1
000d4c 4f6f      	SBCI R22,-1
000d4d 4f7f      	SBCI R23,-1
000d4e 9508      	RET
                 
                 __CWD1:
000d4f 2f6f      	MOV  R22,R31
000d50 0f66      	ADD  R22,R22
000d51 0b66      	SBC  R22,R22
000d52 2f76      	MOV  R23,R22
000d53 9508      	RET
                 
                 __MULW12U:
000d54 9ffa      	MUL  R31,R26
000d55 2df0      	MOV  R31,R0
000d56 9feb      	MUL  R30,R27
000d57 0df0      	ADD  R31,R0
000d58 9fea      	MUL  R30,R26
000d59 2de0      	MOV  R30,R0
000d5a 0df1      	ADD  R31,R1
000d5b 9508      	RET
                 
                 __MULW12:
000d5c d01c      	RCALL __CHKSIGNW
000d5d dff6      	RCALL __MULW12U
000d5e f40e      	BRTC __MULW121
000d5f dfe3      	RCALL __ANEGW1
                 __MULW121:
000d60 9508      	RET
                 
                 __DIVW21U:
000d61 2400      	CLR  R0
000d62 2411      	CLR  R1
000d63 e190      	LDI  R25,16
                 __DIVW21U1:
000d64 0faa      	LSL  R26
000d65 1fbb      	ROL  R27
000d66 1c00      	ROL  R0
000d67 1c11      	ROL  R1
000d68 1a0e      	SUB  R0,R30
000d69 0a1f      	SBC  R1,R31
000d6a f418      	BRCC __DIVW21U2
000d6b 0e0e      	ADD  R0,R30
000d6c 1e1f      	ADC  R1,R31
000d6d c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000d6e 60a1      	SBR  R26,1
                 __DIVW21U3:
000d6f 959a      	DEC  R25
000d70 f799      	BRNE __DIVW21U1
000d71 01fd      	MOVW R30,R26
000d72 01d0      	MOVW R26,R0
000d73 9508      	RET
                 
                 __DIVW21:
000d74 d004      	RCALL __CHKSIGNW
000d75 dfeb      	RCALL __DIVW21U
000d76 f40e      	BRTC __DIVW211
000d77 dfcb      	RCALL __ANEGW1
                 __DIVW211:
000d78 9508      	RET
                 
                 __CHKSIGNW:
000d79 94e8      	CLT
000d7a fff7      	SBRS R31,7
000d7b c002      	RJMP __CHKSW1
000d7c dfc6      	RCALL __ANEGW1
000d7d 9468      	SET
                 __CHKSW1:
000d7e ffb7      	SBRS R27,7
000d7f c006      	RJMP __CHKSW2
000d80 95b1      	NEG  R27
000d81 95a1      	NEG  R26
000d82 40b0      	SBCI R27,0
000d83 f800      	BLD  R0,0
000d84 9403      	INC  R0
000d85 fa00      	BST  R0,0
                 __CHKSW2:
000d86 9508      	RET
                 
                 __GETW1P:
000d87 91ed      	LD   R30,X+
000d88 91fc      	LD   R31,X
000d89 9711      	SBIW R26,1
000d8a 9508      	RET
                 
                 __GETW1PF:
000d8b 9005      	LPM  R0,Z+
000d8c 91f4      	LPM  R31,Z
000d8d 2de0      	MOV  R30,R0
000d8e 9508      	RET
                 
                 __PUTPARD1:
000d8f 937a      	ST   -Y,R23
000d90 936a      	ST   -Y,R22
000d91 93fa      	ST   -Y,R31
000d92 93ea      	ST   -Y,R30
000d93 9508      	RET
                 
                 __EEPROMRDW:
000d94 9611      	ADIW R26,1
000d95 d002      	RCALL __EEPROMRDB
000d96 2ffe      	MOV  R31,R30
000d97 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000d98 99e1      	SBIC EECR,EEWE
000d99 cffe      	RJMP __EEPROMRDB
000d9a 93ff      	PUSH R31
000d9b b7ff      	IN   R31,SREG
000d9c 94f8      	CLI
000d9d bbae      	OUT  EEARL,R26
000d9e bbbf      	OUT  EEARH,R27
000d9f 9ae0      	SBI  EECR,EERE
000da0 b3ed      	IN   R30,EEDR
000da1 bfff      	OUT  SREG,R31
000da2 91ff      	POP  R31
000da3 9508      	RET
                 
                 __EEPROMWRW:
000da4 d007      	RCALL __EEPROMWRB
000da5 9611      	ADIW R26,1
000da6 93ef      	PUSH R30
000da7 2fef      	MOV  R30,R31
000da8 d003      	RCALL __EEPROMWRB
000da9 91ef      	POP  R30
000daa 9711      	SBIW R26,1
000dab 9508      	RET
                 
                 __EEPROMWRB:
000dac 9be1      	SBIS EECR,EEWE
000dad c002      	RJMP __EEPROMWRB1
000dae 95a8      	WDR
000daf cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000db0 b79f      	IN   R25,SREG
000db1 94f8      	CLI
000db2 bbae      	OUT  EEARL,R26
000db3 bbbf      	OUT  EEARH,R27
000db4 9ae0      	SBI  EECR,EERE
000db5 b38d      	IN   R24,EEDR
000db6 17e8      	CP   R30,R24
000db7 f019      	BREQ __EEPROMWRB0
000db8 bbed      	OUT  EEDR,R30
000db9 9ae2      	SBI  EECR,EEMWE
000dba 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000dbb bf9f      	OUT  SREG,R25
000dbc 9508      	RET
                 
                 __CPW02:
000dbd 2400      	CLR  R0
000dbe 160a      	CP   R0,R26
000dbf 060b      	CPC  R0,R27
000dc0 9508      	RET
                 
                 __ANEGF1:
000dc1 9730      	SBIW R30,0
000dc2 4060      	SBCI R22,0
000dc3 4070      	SBCI R23,0
000dc4 f009      	BREQ __ANEGF10
000dc5 5870      	SUBI R23,0x80
                 __ANEGF10:
000dc6 9508      	RET
                 
                 __ROUND_REPACK:
000dc7 2355      	TST  R21
000dc8 f442      	BRPL __REPACK
000dc9 3850      	CPI  R21,0x80
000dca f411      	BRNE __ROUND_REPACK0
000dcb ffe0      	SBRS R30,0
000dcc c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000dcd 9631      	ADIW R30,1
000dce 1f69      	ADC  R22,R25
000dcf 1f79      	ADC  R23,R25
000dd0 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000dd1 e850      	LDI  R21,0x80
000dd2 2757      	EOR  R21,R23
000dd3 f411      	BRNE __REPACK0
000dd4 935f      	PUSH R21
000dd5 c073      	RJMP __ZERORES
                 __REPACK0:
000dd6 3f5f      	CPI  R21,0xFF
000dd7 f031      	BREQ __REPACK1
000dd8 0f66      	LSL  R22
000dd9 0c00      	LSL  R0
000dda 9557      	ROR  R21
000ddb 9567      	ROR  R22
000ddc 2f75      	MOV  R23,R21
000ddd 9508      	RET
                 __REPACK1:
000dde 935f      	PUSH R21
000ddf 2000      	TST  R0
000de0 f00a      	BRMI __REPACK2
000de1 c072      	RJMP __MAXRES
                 __REPACK2:
000de2 c06b      	RJMP __MINRES
                 
                 __UNPACK:
000de3 e850      	LDI  R21,0x80
000de4 2e19      	MOV  R1,R25
000de5 2215      	AND  R1,R21
000de6 0f88      	LSL  R24
000de7 1f99      	ROL  R25
000de8 2795      	EOR  R25,R21
000de9 0f55      	LSL  R21
000dea 9587      	ROR  R24
                 
                 __UNPACK1:
000deb e850      	LDI  R21,0x80
000dec 2e07      	MOV  R0,R23
000ded 2205      	AND  R0,R21
000dee 0f66      	LSL  R22
000def 1f77      	ROL  R23
000df0 2775      	EOR  R23,R21
000df1 0f55      	LSL  R21
000df2 9567      	ROR  R22
000df3 9508      	RET
                 
                 __CFD1U:
000df4 9468      	SET
000df5 c001      	RJMP __CFD1U0
                 __CFD1:
000df6 94e8      	CLT
                 __CFD1U0:
000df7 935f      	PUSH R21
000df8 dff2      	RCALL __UNPACK1
000df9 3870      	CPI  R23,0x80
000dfa f018      	BRLO __CFD10
000dfb 3f7f      	CPI  R23,0xFF
000dfc f408      	BRCC __CFD10
000dfd c04b      	RJMP __ZERORES
                 __CFD10:
000dfe e156      	LDI  R21,22
000dff 1b57      	SUB  R21,R23
000e00 f4aa      	BRPL __CFD11
000e01 9551      	NEG  R21
000e02 3058      	CPI  R21,8
000e03 f40e      	BRTC __CFD19
000e04 3059      	CPI  R21,9
                 __CFD19:
000e05 f030      	BRLO __CFD17
000e06 efef      	SER  R30
000e07 efff      	SER  R31
000e08 ef6f      	SER  R22
000e09 e77f      	LDI  R23,0x7F
000e0a f977      	BLD  R23,7
000e0b c01a      	RJMP __CFD15
                 __CFD17:
000e0c 2777      	CLR  R23
000e0d 2355      	TST  R21
000e0e f0b9      	BREQ __CFD15
                 __CFD18:
000e0f 0fee      	LSL  R30
000e10 1fff      	ROL  R31
000e11 1f66      	ROL  R22
000e12 1f77      	ROL  R23
000e13 955a      	DEC  R21
000e14 f7d1      	BRNE __CFD18
000e15 c010      	RJMP __CFD15
                 __CFD11:
000e16 2777      	CLR  R23
                 __CFD12:
000e17 3058      	CPI  R21,8
000e18 f028      	BRLO __CFD13
000e19 2fef      	MOV  R30,R31
000e1a 2ff6      	MOV  R31,R22
000e1b 2f67      	MOV  R22,R23
000e1c 5058      	SUBI R21,8
000e1d cff9      	RJMP __CFD12
                 __CFD13:
000e1e 2355      	TST  R21
000e1f f031      	BREQ __CFD15
                 __CFD14:
000e20 9576      	LSR  R23
000e21 9567      	ROR  R22
000e22 95f7      	ROR  R31
000e23 95e7      	ROR  R30
000e24 955a      	DEC  R21
000e25 f7d1      	BRNE __CFD14
                 __CFD15:
000e26 2000      	TST  R0
000e27 f40a      	BRPL __CFD16
000e28 df1e      	RCALL __ANEGD1
                 __CFD16:
000e29 915f      	POP  R21
000e2a 9508      	RET
                 
                 __CDF1U:
000e2b 9468      	SET
000e2c c001      	RJMP __CDF1U0
                 __CDF1:
000e2d 94e8      	CLT
                 __CDF1U0:
000e2e 9730      	SBIW R30,0
000e2f 4060      	SBCI R22,0
000e30 4070      	SBCI R23,0
000e31 f0b1      	BREQ __CDF10
000e32 2400      	CLR  R0
000e33 f026      	BRTS __CDF11
000e34 2377      	TST  R23
000e35 f412      	BRPL __CDF11
000e36 9400      	COM  R0
000e37 df0f      	RCALL __ANEGD1
                 __CDF11:
000e38 2e17      	MOV  R1,R23
000e39 e17e      	LDI  R23,30
000e3a 2011      	TST  R1
                 __CDF12:
000e3b f032      	BRMI __CDF13
000e3c 957a      	DEC  R23
000e3d 0fee      	LSL  R30
000e3e 1fff      	ROL  R31
000e3f 1f66      	ROL  R22
000e40 1c11      	ROL  R1
000e41 cff9      	RJMP __CDF12
                 __CDF13:
000e42 2fef      	MOV  R30,R31
000e43 2ff6      	MOV  R31,R22
000e44 2d61      	MOV  R22,R1
000e45 935f      	PUSH R21
000e46 df8a      	RCALL __REPACK
000e47 915f      	POP  R21
                 __CDF10:
000e48 9508      	RET
                 
                 __ZERORES:
000e49 27ee      	CLR  R30
000e4a 27ff      	CLR  R31
000e4b 01bf      	MOVW R22,R30
000e4c 915f      	POP  R21
000e4d 9508      	RET
                 
                 __MINRES:
000e4e efef      	SER  R30
000e4f efff      	SER  R31
000e50 e76f      	LDI  R22,0x7F
000e51 ef7f      	SER  R23
000e52 915f      	POP  R21
000e53 9508      	RET
                 
                 __MAXRES:
000e54 efef      	SER  R30
000e55 efff      	SER  R31
000e56 e76f      	LDI  R22,0x7F
000e57 e77f      	LDI  R23,0x7F
000e58 915f      	POP  R21
000e59 9508      	RET
                 
                 __MULF12:
000e5a 935f      	PUSH R21
000e5b df87      	RCALL __UNPACK
000e5c 3870      	CPI  R23,0x80
000e5d f359      	BREQ __ZERORES
000e5e 3890      	CPI  R25,0x80
000e5f f349      	BREQ __ZERORES
000e60 2401      	EOR  R0,R1
000e61 9408      	SEC
000e62 1f79      	ADC  R23,R25
000e63 f423      	BRVC __MULF124
000e64 f324      	BRLT __ZERORES
                 __MULF125:
000e65 2000      	TST  R0
000e66 f33a      	BRMI __MINRES
000e67 cfec      	RJMP __MAXRES
                 __MULF124:
000e68 920f      	PUSH R0
000e69 931f      	PUSH R17
000e6a 932f      	PUSH R18
000e6b 933f      	PUSH R19
000e6c 934f      	PUSH R20
000e6d 2711      	CLR  R17
000e6e 2722      	CLR  R18
000e6f 2799      	CLR  R25
000e70 9f68      	MUL  R22,R24
000e71 01a0      	MOVW R20,R0
000e72 9f8f      	MUL  R24,R31
000e73 2d30      	MOV  R19,R0
000e74 0d41      	ADD  R20,R1
000e75 1f59      	ADC  R21,R25
000e76 9f6b      	MUL  R22,R27
000e77 0d30      	ADD  R19,R0
000e78 1d41      	ADC  R20,R1
000e79 1f59      	ADC  R21,R25
000e7a 9f8e      	MUL  R24,R30
000e7b d027      	RCALL __MULF126
000e7c 9fbf      	MUL  R27,R31
000e7d d025      	RCALL __MULF126
000e7e 9f6a      	MUL  R22,R26
000e7f d023      	RCALL __MULF126
000e80 9fbe      	MUL  R27,R30
000e81 d01d      	RCALL __MULF127
000e82 9faf      	MUL  R26,R31
000e83 d01b      	RCALL __MULF127
000e84 9fae      	MUL  R26,R30
000e85 0d11      	ADD  R17,R1
000e86 1f29      	ADC  R18,R25
000e87 1f39      	ADC  R19,R25
000e88 1f49      	ADC  R20,R25
000e89 1f59      	ADC  R21,R25
000e8a 2fe3      	MOV  R30,R19
000e8b 2ff4      	MOV  R31,R20
000e8c 2f65      	MOV  R22,R21
000e8d 2f52      	MOV  R21,R18
000e8e 914f      	POP  R20
000e8f 913f      	POP  R19
000e90 912f      	POP  R18
000e91 911f      	POP  R17
000e92 900f      	POP  R0
000e93 2366      	TST  R22
000e94 f02a      	BRMI __MULF122
000e95 0f55      	LSL  R21
000e96 1fee      	ROL  R30
000e97 1fff      	ROL  R31
000e98 1f66      	ROL  R22
000e99 c002      	RJMP __MULF123
                 __MULF122:
000e9a 9573      	INC  R23
000e9b f24b      	BRVS __MULF125
                 __MULF123:
000e9c df2a      	RCALL __ROUND_REPACK
000e9d 915f      	POP  R21
000e9e 9508      	RET
                 
                 __MULF127:
000e9f 0d10      	ADD  R17,R0
000ea0 1d21      	ADC  R18,R1
000ea1 1f39      	ADC  R19,R25
000ea2 c002      	RJMP __MULF128
                 __MULF126:
000ea3 0d20      	ADD  R18,R0
000ea4 1d31      	ADC  R19,R1
                 __MULF128:
000ea5 1f49      	ADC  R20,R25
000ea6 1f59      	ADC  R21,R25
000ea7 9508      	RET
                 
                 _delay_ms:
000ea8 9610      	adiw r26,0
000ea9 f039      	breq __delay_ms1
                 __delay_ms0:
000eaa 95a8      	wdr
                +
000eab ec8d     +LDI R24 , LOW ( 0xACD )
000eac e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000ead 9701     +SBIW R24 , 1
000eae f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
000eaf 9711      	sbiw r26,1
000eb0 f7c9      	brne __delay_ms0
                 __delay_ms1:
000eb1 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  50 r1 :  18 r2 :   0 r3 :   0 r4 :   8 r5 :   4 r6 :   2 r7 :   1 
r8 :  25 r9 :   7 r10:   0 r11:   0 r12:   6 r13:   7 r14:   0 r15:   4 
r16:  36 r17:  32 r18:  38 r19:  17 r20:  23 r21:  66 r22:  48 r23:  37 
r24:  25 r25:  27 r26: 396 r27: 209 r28:  25 r29:   1 r30: 686 r31: 270 
x  :  32 y  : 343 z  :  16 
Registers used: 30 out of 35 (85.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  31 add   :  26 
adiw  :  46 and   :   2 andi  :  15 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  56 
brge  :  16 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  13 
brlt  :   5 brmi  :   5 brne  :  94 brpl  :   6 brsh  :   2 brtc  :   3 
brts  :   2 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  : 373 
cbi   :  33 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  38 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   6 
cp    :  17 cpc   :  41 cpi   : 120 cpse  :   0 dec   :   6 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  15 inc   :   2 jmp   :  45 ld    :  62 ldd   : 126 ldi   : 514 
lds   :  78 lpm   :  16 lsl   :  15 lsr   :   1 mov   :  54 movw  :  57 
mul   :  16 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   2 
ori   :   9 out   :  67 pop   :  20 push  :  19 rcall :  99 ret   : 102 
reti  :   2 rjmp  : 193 rol   :  19 ror   :   7 sbc   :   5 sbci  :  10 
sbi   :  34 sbic  :  10 sbis  :   2 sbiw  :  44 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 147 std   :  43 sts   :  36 sub   :   5 subi  :  21 swap  :   2 
tst   :  13 wdr   :   2 
Instructions used: 78 out of 116 (67.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001d64   6914    610   7524   16384  45.9%
[.dseg] 0x000060 0x0001ba      0     90     90    1024   8.8%
[.eseg] 0x000000 0x00002f      0     47     47     512   9.2%

Assembly complete, 0 errors, 22 warnings
