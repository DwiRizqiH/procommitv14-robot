
AVRASM ver. 2.1.30  d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm Mon Oct 28 13:12:05 2024

d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1083): warning: Register r4 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1084): warning: Register r5 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1085): warning: Register r6 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1086): warning: Register r7 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1087): warning: Register r8 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1088): warning: Register r9 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1089): warning: Register r10 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1090): warning: Register r11 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1091): warning: Register r13 already defined by the .DEF directive
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1092): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 11.059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hitung=R4
                 	.DEF _hitung_msb=R5
                 	.DEF _nadc7=R6
                 	.DEF _nadc7_msb=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _k=R10
                 	.DEF _k_msb=R11
                 	.DEF _pos_servo1=R13
                 	.DEF _pos_servo2=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 015a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 066a 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0688 	JMP  _timer0_comp_isr
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x6:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1134): warning: .cseg .db misalignment - padding zero byte
000035 000a      	.DB  0xA
                 _0x7:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1136): warning: .cseg .db misalignment - padding zero byte
000036 0064      	.DB  0x64
                 _0x8:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1138): warning: .cseg .db misalignment - padding zero byte
000037 00c8      	.DB  0xC8
                 _0x9:
000038 ff60      	.DB  0x60,0xFF
                 _0xA:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1142): warning: .cseg .db misalignment - padding zero byte
000039 00c8      	.DB  0xC8
                 _0xB:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1144): warning: .cseg .db misalignment - padding zero byte
00003a 00dc      	.DB  0xDC
                 _0xC:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1146): warning: .cseg .db misalignment - padding zero byte
00003b 0050      	.DB  0x50
                 _0xD:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1148): warning: .cseg .db misalignment - padding zero byte
00003c 00a5      	.DB  0xA5
                 _0xE:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1150): warning: .cseg .db misalignment - padding zero byte
00003d 00aa      	.DB  0xAA
                 _0xF:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1152): warning: .cseg .db misalignment - padding zero byte
00003e 0005      	.DB  0x5
                 _0x10:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1154): warning: .cseg .db misalignment - padding zero byte
00003f 0055      	.DB  0x55
                 _0x0:
000040 6425
000041 6425
000042 6425
000043 6425      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x25,0x64
000044 6425
000045 6425
000046 6425
000047 4200      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x0,0x42
000048 6361
000049 2061
00004a 694c
00004b 656e      	.DB  0x61,0x63,0x61,0x20,0x4C,0x69,0x6E,0x65
00004c 7300
00004d 6e65
00004e 6f73
00004f 3a72      	.DB  0x0,0x73,0x65,0x6E,0x73,0x6F,0x72,0x3A
000050 6425
000051 3d20
000052 2520
000053 2064      	.DB  0x25,0x64,0x20,0x3D,0x20,0x25,0x64,0x20
000054 0020
000055 6142
000056 6163
000057 4220      	.DB  0x20,0x0,0x42,0x61,0x63,0x61,0x20,0x42
000058 6361
000059 676b
00005a 6f72
00005b 6e75      	.DB  0x61,0x63,0x6B,0x67,0x72,0x6F,0x75,0x6E
00005c 0064
00005d 6543
00005e 746e
00005f 7265      	.DB  0x64,0x0,0x43,0x65,0x6E,0x74,0x65,0x72
000060 5020
000061 696f
000062 746e
000063 2020      	.DB  0x20,0x50,0x6F,0x69,0x6E,0x74,0x20,0x20
000064 2020
000065 7300
000066 6e65
000067 6f73      	.DB  0x20,0x20,0x0,0x73,0x65,0x6E,0x73,0x6F
000068 3a72
000069 6425
00006a 2d20
00006b 3e2d      	.DB  0x72,0x3A,0x25,0x64,0x20,0x2D,0x2D,0x3E
00006c 2520
00006d 2064
00006e 0020
00006f 6425      	.DB  0x20,0x25,0x64,0x20,0x20,0x0,0x25,0x64
000070 2020
000071 0020
000072 654d
000073 756e      	.DB  0x20,0x20,0x20,0x0,0x4D,0x65,0x6E,0x75
000074 4300
000075 6c61
000076 6269
000077 6172      	.DB  0x0,0x43,0x61,0x6C,0x69,0x62,0x72,0x61
000078 6974
000079 6e6f
00007a 5200
00007b 6e75      	.DB  0x74,0x69,0x6F,0x6E,0x0,0x52,0x75,0x6E
00007c 4220
00007d 746f
00007e 5300
00007f 6e65      	.DB  0x20,0x42,0x6F,0x74,0x0,0x53,0x65,0x6E
000080 2073
000081 6157
000082 6e72
000083 0061      	.DB  0x73,0x20,0x57,0x61,0x72,0x6E,0x61,0x0
000084 614d
000085 2070
000086 6942
000087 7572      	.DB  0x4D,0x61,0x70,0x20,0x42,0x69,0x72,0x75
000088 4d00
000089 7061
00008a 4d20
00008b 7265      	.DB  0x0,0x4D,0x61,0x70,0x20,0x4D,0x65,0x72
00008c 6861
00008d 4d00
00008e 746f
00008f 726f      	.DB  0x61,0x68,0x0,0x4D,0x6F,0x74,0x6F,0x72
000090 4200
000091 7475
000092 6f74
000093 006e      	.DB  0x0,0x42,0x75,0x74,0x74,0x6F,0x6E,0x0
000094 6143
000095 6970
000096 0074
000097 6c43      	.DB  0x43,0x61,0x70,0x69,0x74,0x0,0x43,0x6C
000098 6369
000099 206b
00009a 2032
00009b 6f74      	.DB  0x69,0x63,0x6B,0x20,0x32,0x20,0x74,0x6F
00009c 7320
00009d 6174
00009e 7472
00009f 5200      	.DB  0x20,0x73,0x74,0x61,0x72,0x74,0x0,0x52
0000a0 6e75
0000a1 696e
0000a2 676e
0000a3 2e2e      	.DB  0x75,0x6E,0x6E,0x69,0x6E,0x67,0x2E,0x2E
0000a4 002e
0000a5 6554
0000a6 7473
0000a7 4d20      	.DB  0x2E,0x0,0x54,0x65,0x73,0x74,0x20,0x4D
0000a8 746f
0000a9 726f
0000aa 2b00
0000ab 3031      	.DB  0x6F,0x74,0x6F,0x72,0x0,0x2B,0x31,0x30
0000ac 3030
0000ad 2b20
0000ae 3031
0000af 3030      	.DB  0x30,0x30,0x20,0x2B,0x31,0x30,0x30,0x30
0000b0 2d00
0000b1 3031
0000b2 3030
0000b3 2d20      	.DB  0x0,0x2D,0x31,0x30,0x30,0x30,0x20,0x2D
0000b4 3031
0000b5 3030
0000b6 2b00
0000b7 3031      	.DB  0x31,0x30,0x30,0x30,0x0,0x2B,0x31,0x30
0000b8 3030
0000b9 2d20
0000ba 3031
0000bb 3030      	.DB  0x30,0x30,0x20,0x2D,0x31,0x30,0x30,0x30
0000bc 2d00
0000bd 3031
0000be 3030
0000bf 2b20      	.DB  0x0,0x2D,0x31,0x30,0x30,0x30,0x20,0x2B
0000c0 3031
0000c1 3030
0000c2 4300
0000c3 696c      	.DB  0x31,0x30,0x30,0x30,0x0,0x43,0x6C,0x69
0000c4 6b63
0000c5 3120
0000c6 7420
0000c7 206f      	.DB  0x63,0x6B,0x20,0x31,0x20,0x74,0x6F,0x20
0000c8 7865
0000c9 7469
0000ca 7400
0000cb 6d6f      	.DB  0x65,0x78,0x69,0x74,0x0,0x74,0x6F,0x6D
0000cc 6f62
0000cd 206c
0000ce 203d
0000cf 2031      	.DB  0x62,0x6F,0x6C,0x20,0x3D,0x20,0x31,0x20
0000d0 2020
0000d1 2020
0000d2 7400
0000d3 6d6f      	.DB  0x20,0x20,0x20,0x20,0x0,0x74,0x6F,0x6D
0000d4 6f62
0000d5 206c
0000d6 203d
0000d7 2032      	.DB  0x62,0x6F,0x6C,0x20,0x3D,0x20,0x32,0x20
0000d8 2020
0000d9 2020
0000da 7400
0000db 6d6f      	.DB  0x20,0x20,0x20,0x20,0x0,0x74,0x6F,0x6D
0000dc 6f62
0000dd 206c
0000de 203d
0000df 2033      	.DB  0x62,0x6F,0x6C,0x20,0x3D,0x20,0x33,0x20
0000e0 2020
0000e1 2020
0000e2 7400
0000e3 6d6f      	.DB  0x20,0x20,0x20,0x20,0x0,0x74,0x6F,0x6D
0000e4 6f62
0000e5 206c
0000e6 203d
0000e7 2034      	.DB  0x62,0x6F,0x6C,0x20,0x3D,0x20,0x34,0x20
0000e8 2020
0000e9 2020
0000ea 5700
0000eb 7261      	.DB  0x20,0x20,0x20,0x20,0x0,0x57,0x61,0x72
0000ec 616e
0000ed 003a
0000ee 7845
0000ef 7469      	.DB  0x6E,0x61,0x3A,0x0,0x45,0x78,0x69,0x74
0000f0 6e69
0000f1 2e67
0000f2 2e2e
0000f3 5400      	.DB  0x69,0x6E,0x67,0x2E,0x2E,0x2E,0x0,0x54
0000f4 7365
0000f5 2074
0000f6 6143
0000f7 6970      	.DB  0x65,0x73,0x74,0x20,0x43,0x61,0x70,0x69
0000f8 0074
0000f9 6143
0000fa 6970
0000fb 3a74      	.DB  0x74,0x0,0x43,0x61,0x70,0x69,0x74,0x3A
0000fc 3e20
0000fd 3c20
0000fe 4300
0000ff 7061      	.DB  0x20,0x3E,0x20,0x3C,0x0,0x43,0x61,0x70
000100 7469
000101 203a
000102 203c
000103 003e      	.DB  0x69,0x74,0x3A,0x20,0x3C,0x20,0x3E,0x0
000104 6143
000105 6970
000106 3a74
000107 5c20      	.DB  0x43,0x61,0x70,0x69,0x74,0x3A,0x20,0x5C
000108 002f
000109 6143
00010a 6970
00010b 3a74      	.DB  0x2F,0x0,0x43,0x61,0x70,0x69,0x74,0x3A
00010c 2f20
00010d 005c
00010e 6f48
00010f 646c      	.DB  0x20,0x2F,0x5C,0x0,0x48,0x6F,0x6C,0x64
000110 3120
000111 7420
000112 206f
000113 7865      	.DB  0x20,0x31,0x20,0x74,0x6F,0x20,0x65,0x78
000114 7469
000115 5800
000116 0044
000117 2020      	.DB  0x69,0x74,0x0,0x58,0x44,0x0,0x20,0x20
000118 2020
000119 4c20
00011a 4745
00011b 4f49      	.DB  0x20,0x20,0x20,0x4C,0x45,0x47,0x49,0x4F
00011c 204e
00011d 2020
00011e 2020
00011f 2000      	.DB  0x4E,0x20,0x20,0x20,0x20,0x20,0x0,0x20
000120 414d
000121 204e
000122 2034
000123 4f4a      	.DB  0x4D,0x41,0x4E,0x20,0x34,0x20,0x4A,0x4F
000124 424d
000125 4e41
000126 2047
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1213): warning: .cseg .db misalignment - padding zero byte
000127 0000      	.DB  0x4D,0x42,0x41,0x4E,0x47,0x20,0x0
                 _0x2040060:
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1215): warning: .cseg .db misalignment - padding zero byte
000128 0001      	.DB  0x1
                 _0x2040000:
000129 4e2d
00012a 4e41
00012b 4900
00012c 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
d:\Workspace\PROCOMMIT\PROCOMMITv14\List\Program.asm(1218): warning: .cseg .db misalignment - padding zero byte
00012d 0000      	.DB  0x0
                 _0x2060003:
00012e c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00012f 0004      	.DW  0x04
000130 0004      	.DW  0x04
000131 0066      	.DW  __REG_VARS*2
                 
000132 0001      	.DW  0x01
000133 0193      	.DW  _kp
000134 006a      	.DW  _0x6*2
                 
000135 0001      	.DW  0x01
000136 0195      	.DW  _kd
000137 006c      	.DW  _0x7*2
                 
000138 0001      	.DW  0x01
000139 0197      	.DW  _SPEED
00013a 006e      	.DW  _0x8*2
                 
00013b 0002      	.DW  0x02
00013c 0199      	.DW  _MIN_SPEED
00013d 0070      	.DW  _0x9*2
                 
00013e 0001      	.DW  0x01
00013f 019b      	.DW  _MAX_SPEED
000140 0072      	.DW  _0xA*2
                 
000141 0001      	.DW  0x01
000142 01a1      	.DW  _maxHijau
000143 0074      	.DW  _0xB*2
                 
000144 0001      	.DW  0x01
000145 01a3      	.DW  _maxKuning
000146 0076      	.DW  _0xC*2
                 
000147 0001      	.DW  0x01
000148 01a5      	.DW  _maxMerah
000149 0078      	.DW  _0xD*2
                 
00014a 0001      	.DW  0x01
00014b 01a7      	.DW  _minHijau
00014c 007a      	.DW  _0xE*2
                 
00014d 0001      	.DW  0x01
00014e 01a9      	.DW  _minKuning
00014f 007c      	.DW  _0xF*2
                 
000150 0001      	.DW  0x01
000151 01ab      	.DW  _minMerah
000152 007e      	.DW  _0x10*2
                 
000153 0001      	.DW  0x01
000154 01ad      	.DW  __seed_G102
000155 0250      	.DW  _0x2040060*2
                 
000156 0002      	.DW  0x02
000157 01b1      	.DW  __base_y_G103
000158 025c      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
000159 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00015a 94f8      	CLI
00015b 27ee      	CLR  R30
00015c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00015d e0f1      	LDI  R31,1
00015e bffb      	OUT  GICR,R31
00015f bfeb      	OUT  GICR,R30
000160 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000161 e1f8      	LDI  R31,0x18
000162 bdf1      	OUT  WDTCR,R31
000163 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000164 e08d      	LDI  R24,(14-2)+1
000165 e0a2      	LDI  R26,2
000166 27bb      	CLR  R27
                 __CLEAR_REG:
000167 93ed      	ST   X+,R30
000168 958a      	DEC  R24
000169 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00016a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00016b e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00016c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00016d 93ed      	ST   X+,R30
00016e 9701      	SBIW R24,1
00016f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000170 e5ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000171 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000172 9185      	LPM  R24,Z+
000173 9195      	LPM  R25,Z+
000174 9700      	SBIW R24,0
000175 f061      	BREQ __GLOBAL_INI_END
000176 91a5      	LPM  R26,Z+
000177 91b5      	LPM  R27,Z+
000178 9005      	LPM  R0,Z+
000179 9015      	LPM  R1,Z+
00017a 01bf      	MOVW R22,R30
00017b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00017c 9005      	LPM  R0,Z+
00017d 920d      	ST   X+,R0
00017e 9701      	SBIW R24,1
00017f f7e1      	BRNE __GLOBAL_INI_LOOP
000180 01fb      	MOVW R30,R22
000181 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000182 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000183 bfed      	OUT  SPL,R30
000184 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000185 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000186 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000187 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000188 940c 0689 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                    .equ __lcd_port=0x18 ;PORTB
                 ; 0000 0029 #endasm
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0030 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0031 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
00018a 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00018b 81e8      	LD   R30,Y
00018c 66e0      	ORI  R30,LOW(0x60)
00018d b9e7      	OUT  0x7,R30
                 ; 0000 0032 // Start the AD conversion
                 ; 0000 0033 ADCSRA|=0x40;
00018e 9a36      	SBI  0x6,6
                 ; 0000 0034 // Wait for the AD conversion to complete
                 ; 0000 0035 while ((ADCSRA & 0x10)==0);
                 _0x3:
00018f 9b34      	SBIS 0x6,4
000190 cffe      	RJMP _0x3
                 ; 0000 0036 ADCSRA|=0x10;
000191 9a34      	SBI  0x6,4
                 ; 0000 0037 return ADCH;
000192 b1e5      	IN   R30,0x5
000193 9621      	ADIW R28,1
000194 9508      	RET
                 ; 0000 0038 }
                 ; .FEND
                 ;int hitung = 0;
                 ;unsigned int nadc7 = 0;
                 ;char buff[33];
                 ;int i, k;
                 ;unsigned char pos_servo1, pos_servo2, a;
                 ;int count_btn = 0;
                 ;int count_child_btn = 0;
                 ;bool isChildSelect = false;
                 ;bool isTestTombol = false;
                 ;eeprom int garis[7], back[7], tengah[7];
                 ;char sen[7];
                 ;int sensor;
                 ;int error = 0;
                 ;int lastError = 0;
                 ;int kp = 10;
                 
                 	.DSEG
                 ;int kd = 100;
                 ;int SPEED = 200;
                 ;int MIN_SPEED = -160;
                 ;int MAX_SPEED = 200;
                 ;int count = 0;
                 ;int second = 0;
                 ;int positionD = 0;
                 ;eeprom int mapMirror; // 0 - map/lintasan bagian biru, 1 - map/lintasan bagian m ...
                 ;int maxHijau = 220;
                 ;int maxKuning = 80;
                 ;int maxMerah = 165;
                 ;int minHijau = 170;
                 ;int minKuning = 5;
                 ;int minMerah = 85;
                 ;void delay(int ms)
                 ; 0000 0059 {
                 
                 	.CSEG
                 _delay:
                 ; .FSTART _delay
                 ;delay_ms(ms);
000195 93ba      	ST   -Y,R27
000196 93aa      	ST   -Y,R26
                 ;	ms -> Y+0
000197 81a8      	LD   R26,Y
000198 81b9      	LDD  R27,Y+1
000199 940e 0ca7 	CALL _delay_ms
00019b c173      	RJMP _0x20C000A
                 ; .FEND
                 ;void lcd_kedip(int ulangi)
                 ;for(i = 0; i < ulangi; i++)
                 ;	ulangi -> Y+0
                 ;lampu=0;
                 ;delay_ms(100);
                 ;lampu=1;
                 ;delay_ms(100);
                 ;void konvert_logic()
                 ; 0000 005A {
                 _konvert_logic:
                 ; .FSTART _konvert_logic
                 ;for(i = 0; i < 7; i++)
00019c 2488      	CLR  R8
00019d 2499      	CLR  R9
                 _0x19:
00019e 940e 09ef 	CALL SUBOPT_0x0
0001a0 f4d4      	BRGE _0x1A
                 ;if(read_adc(i) > tengah[i]) {
0001a1 940e 09f4 	CALL SUBOPT_0x1
0001a3 17ea      	CP   R30,R26
0001a4 07fb      	CPC  R31,R27
0001a5 f434      	BRGE _0x1B
                 ;sen[i]=1;
0001a6 e8a6      	LDI  R26,LOW(_sen)
0001a7 e0b1      	LDI  R27,HIGH(_sen)
0001a8 0da8      	ADD  R26,R8
0001a9 1db9      	ADC  R27,R9
0001aa e0e1      	LDI  R30,LOW(1)
0001ab c00a      	RJMP _0x14E
                 ;else if(read_adc(i) < tengah[i]) {
                 _0x1B:
0001ac 940e 09f4 	CALL SUBOPT_0x1
0001ae 17ae      	CP   R26,R30
0001af 07bf      	CPC  R27,R31
0001b0 f434      	BRGE _0x1D
                 ;sen[i]=0;
0001b1 e8a6      	LDI  R26,LOW(_sen)
0001b2 e0b1      	LDI  R27,HIGH(_sen)
0001b3 0da8      	ADD  R26,R8
0001b4 1db9      	ADC  R27,R9
0001b5 e0e0      	LDI  R30,LOW(0)
                 _0x14E:
0001b6 93ec      	ST   X,R30
                 _0x1D:
0001b7 01f4      	MOVW R30,R8
0001b8 9631      	ADIW R30,1
0001b9 014f      	MOVW R8,R30
0001ba cfe3      	RJMP _0x19
                 _0x1A:
0001bb 9508      	RET
                 ; .FEND
                 ;void logika()
                 _logika:
                 ; .FSTART _logika
                 ;sensor = (sen[6] * 64) + (sen[5] * 32) + (sen[4] * 16) + (sen[3] * 8) + (sen[2]  ...
                +
0001bc 91a0 018c+LDS R26 , _sen + ( 6 )
                 	__GETB2MN _sen,6
0001be e4e0      	LDI  R30,LOW(64)
0001bf 9fea      	MUL  R30,R26
0001c0 01b0      	MOVW R22,R0
                +
0001c1 91a0 018b+LDS R26 , _sen + ( 5 )
                 	__GETB2MN _sen,5
0001c3 e2e0      	LDI  R30,LOW(32)
0001c4 940e 0a04 	CALL SUBOPT_0x2
                +
0001c6 91a0 018a+LDS R26 , _sen + ( 4 )
                 	__GETB2MN _sen,4
0001c8 e1e0      	LDI  R30,LOW(16)
0001c9 940e 0a04 	CALL SUBOPT_0x2
                +
0001cb 91a0 0189+LDS R26 , _sen + ( 3 )
                 	__GETB2MN _sen,3
0001cd e0e8      	LDI  R30,LOW(8)
0001ce 940e 0a04 	CALL SUBOPT_0x2
                +
0001d0 91a0 0188+LDS R26 , _sen + ( 2 )
                 	__GETB2MN _sen,2
0001d2 e0e4      	LDI  R30,LOW(4)
0001d3 940e 0a04 	CALL SUBOPT_0x2
                +
0001d5 91a0 0187+LDS R26 , _sen + ( 1 )
                 	__GETB2MN _sen,1
0001d7 e0e2      	LDI  R30,LOW(2)
0001d8 940e 0a04 	CALL SUBOPT_0x2
0001da 91a0 0186 	LDS  R26,_sen
0001dc e0e1      	LDI  R30,LOW(1)
0001dd 9fea      	MUL  R30,R26
0001de 01f0      	MOVW R30,R0
0001df 0fe6      	ADD  R30,R22
0001e0 1ff7      	ADC  R31,R23
0001e1 93e0 018d 	STS  _sensor,R30
0001e3 93f0 018e 	STS  _sensor+1,R31
0001e5 9508      	RET
                 ; .FEND
                 ;void cek_sensor()
                 _cek_sensor:
                 ; .FSTART _cek_sensor
                 ;konvert_logic();
0001e6 dfb5      	RCALL _konvert_logic
                 ;logika();
0001e7 dfd4      	RCALL _logika
0001e8 9508      	RET
                 ; .FEND
                 ;void display_sensor()
                 _display_sensor:
                 ; .FSTART _display_sensor
                 ;konvert_logic();
0001e9 dfb2      	RCALL _konvert_logic
                 ;lcd_gotoxy(9, 0);
0001ea e0e9      	LDI  R30,LOW(9)
0001eb 940e 0a09 	CALL SUBOPT_0x3
                 ;sprintf(buff, "%d%d%d%d%d%d%d", sen[0] , sen[1] , sen[2], sen[3], sen[4], sen[5] ...
0001ed 940e 0a0d 	CALL SUBOPT_0x4
                +
0001ef e8e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001f0 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001f1 93fa      	ST   -Y,R31
0001f2 93ea      	ST   -Y,R30
0001f3 91e0 0186 	LDS  R30,_sen
0001f5 940e 0a12 	CALL SUBOPT_0x5
                +
0001f7 91e0 0187+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
0001f9 940e 0a12 	CALL SUBOPT_0x5
                +
0001fb 91e0 0188+LDS R30 , _sen + ( 2 )
                 	__GETB1MN _sen,2
0001fd 940e 0a12 	CALL SUBOPT_0x5
                +
0001ff 91e0 0189+LDS R30 , _sen + ( 3 )
                 	__GETB1MN _sen,3
000201 940e 0a12 	CALL SUBOPT_0x5
                +
000203 91e0 018a+LDS R30 , _sen + ( 4 )
                 	__GETB1MN _sen,4
000205 940e 0a12 	CALL SUBOPT_0x5
                +
000207 91e0 018b+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
000209 940e 0a12 	CALL SUBOPT_0x5
                +
00020b 91e0 018c+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
00020d 940e 0a12 	CALL SUBOPT_0x5
00020f e18c      	LDI  R24,28
000210 940e 0899 	CALL _sprintf
000212 96a0      	ADIW R28,32
                 ;lcd_puts(buff);
000213 c451      	RJMP _0x20C0007
                 ; .FEND
                 ;void scan_garis()
                 _scan_garis:
                 ; .FSTART _scan_garis
                 ;for (i = 0; i < 7; i++)
000214 2488      	CLR  R8
000215 2499      	CLR  R9
                 _0x1F:
000216 940e 09ef 	CALL SUBOPT_0x0
000218 f4d4      	BRGE _0x20
                 ;garis[i] = read_adc(i);
000219 940e 0a18 	CALL SUBOPT_0x6
00021b 0fea      	ADD  R30,R26
00021c 1ffb      	ADC  R31,R27
00021d 93ff      	PUSH R31
00021e 93ef      	PUSH R30
00021f 2da8      	MOV  R26,R8
000220 df69      	RCALL _read_adc
000221 91af      	POP  R26
000222 91bf      	POP  R27
000223 940e 0a1e 	CALL SUBOPT_0x7
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Line");
                +
000225 e8af     +LDI R26 , LOW ( 2 * _0x0 + ( 15 ) )
000226 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW2FN _0x0,15
000227 940e 0a23 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, garis[i]);
000229 940e 0a2b 	CALL SUBOPT_0x9
00022b 940e 0a18 	CALL SUBOPT_0x6
00022d 940e 0a35 	CALL SUBOPT_0xA
                 ;lcd_puts(buff);
                 ;lampu = 0;
                 ;delay_ms(100);
                 ;lampu = 1;
00022f 01f4      	MOVW R30,R8
000230 9631      	ADIW R30,1
000231 014f      	MOVW R8,R30
000232 cfe3      	RJMP _0x1F
                 _0x20:
000233 9508      	RET
                 ; .FEND
                 ;void scan_back()
                 _scan_back:
                 ; .FSTART _scan_back
                 ;for (i = 0; i < 7; i++)
000234 2488      	CLR  R8
000235 2499      	CLR  R9
                 _0x26:
000236 940e 09ef 	CALL SUBOPT_0x0
000238 f4d4      	BRGE _0x27
                 ;back[i] = read_adc(i);
000239 940e 0a4c 	CALL SUBOPT_0xB
00023b 0fea      	ADD  R30,R26
00023c 1ffb      	ADC  R31,R27
00023d 93ff      	PUSH R31
00023e 93ef      	PUSH R30
00023f 2da8      	MOV  R26,R8
000240 df49      	RCALL _read_adc
000241 91af      	POP  R26
000242 91bf      	POP  R27
000243 940e 0a1e 	CALL SUBOPT_0x7
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Background");
                +
000245 eaaa     +LDI R26 , LOW ( 2 * _0x0 + ( 42 ) )
000246 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 42 ) )
                 	__POINTW2FN _0x0,42
000247 940e 0a23 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, back[i]);
000249 940e 0a2b 	CALL SUBOPT_0x9
00024b 940e 0a4c 	CALL SUBOPT_0xB
00024d 940e 0a35 	CALL SUBOPT_0xA
                 ;lcd_puts(buff);
                 ;lampu = 0;
                 ;delay_ms(100);
                 ;lampu = 1;
00024f 01f4      	MOVW R30,R8
000250 9631      	ADIW R30,1
000251 014f      	MOVW R8,R30
000252 cfe3      	RJMP _0x26
                 _0x27:
000253 9508      	RET
                 ; .FEND
                 ;void hit_tengah()
                 _hit_tengah:
                 ; .FSTART _hit_tengah
                 ;for (i = 0; i < 7; i++)
000254 2488      	CLR  R8
000255 2499      	CLR  R9
                 _0x2D:
000256 940e 09ef 	CALL SUBOPT_0x0
000258 f00c      	BRLT PC+2
000259 c044      	RJMP _0x2E
                 ;tengah[i] = (back[i] + garis[i]) / 2;
00025a 01f4      	MOVW R30,R8
00025b e1ac      	LDI  R26,LOW(_tengah)
00025c e0b0      	LDI  R27,HIGH(_tengah)
00025d 0fee      	LSL  R30
00025e 1fff      	ROL  R31
00025f 0fea      	ADD  R30,R26
000260 1ffb      	ADC  R31,R27
000261 01bf      	MOVW R22,R30
000262 940e 0a4c 	CALL SUBOPT_0xB
000264 940e 0a52 	CALL SUBOPT_0xC
000266 010f      	MOVW R0,R30
000267 940e 0a18 	CALL SUBOPT_0x6
000269 940e 0a52 	CALL SUBOPT_0xC
00026b 01d0      	MOVW R26,R0
00026c 0fae      	ADD  R26,R30
00026d 1fbf      	ADC  R27,R31
00026e e0e2      	LDI  R30,LOW(2)
00026f e0f0      	LDI  R31,HIGH(2)
000270 940e 0b73 	CALL __DIVW21
000272 01db      	MOVW R26,R22
000273 940e 0ba3 	CALL __EEPROMWRW
                 ;lcd_gotoxy(0, 0);
000275 e0e0      	LDI  R30,LOW(0)
000276 940e 0a09 	CALL SUBOPT_0x3
                 ;lcd_putsf("Center Point    ");
                +
000278 ebaa     +LDI R26 , LOW ( 2 * _0x0 + ( 58 ) )
000279 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 58 ) )
                 	__POINTW2FN _0x0,58
00027a 940e 0a23 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d --> %d  ", i, tengah[i]);
                +
00027c eceb     +LDI R30 , LOW ( 2 * _0x0 + ( 75 ) )
00027d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 75 ) )
                 	__POINTW1FN _0x0,75
00027e 93fa      	ST   -Y,R31
00027f 93ea      	ST   -Y,R30
000280 01f4      	MOVW R30,R8
000281 940e 0b4e 	CALL __CWD1
000283 940e 0b8e 	CALL __PUTPARD1
000285 01f4      	MOVW R30,R8
000286 e1ac      	LDI  R26,LOW(_tengah)
000287 e0b0      	LDI  R27,HIGH(_tengah)
000288 0fee      	LSL  R30
000289 1fff      	ROL  R31
00028a 940e 0a52 	CALL SUBOPT_0xC
00028c 940e 0b4e 	CALL __CWD1
00028e 940e 0b8e 	CALL __PUTPARD1
000290 e088      	LDI  R24,8
000291 940e 0899 	CALL _sprintf
000293 962c      	ADIW R28,12
                 ;lcd_puts(buff);
000294 e6a0      	LDI  R26,LOW(_buff)
000295 e0b1      	LDI  R27,HIGH(_buff)
000296 940e 0988 	CALL _lcd_puts
                 ;lampu = 0;
000298 98c3      	CBI  0x18,3
                 ;lampu = 1;
000299 9ac3      	SBI  0x18,3
00029a 01f4      	MOVW R30,R8
00029b 9631      	ADIW R30,1
00029c 014f      	MOVW R8,R30
00029d cfb8      	RJMP _0x2D
                 _0x2E:
00029e 9508      	RET
                 ; .FEND
                 ;void cekdatasensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", garis[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 0);
                 ;sprintf(buff, " %d  ", back[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, " %d  ", tengah[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 1);
                 ;sprintf(buff, " %d  ", read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(200);
                 ;void maju(unsigned char ki, unsigned char ka)
                 ; 0000 005B {
                 ;pwmka = ka;
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
                 ;PORTD.3 = 0;
                 ;PORTD.6 = 0;
                 ;PORTD.7 = 1;
                 ;void mundur(unsigned char ki, unsigned char ka)
                 ;pwmka = ka;
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
                 ;PORTD.3 = 1;
                 ;PORTD.6 = 1;
                 ;PORTD.7 = 0;
                 ;void kanan(unsigned char ki, unsigned char ka)
                 _kanan:
                 ; .FSTART _kanan
                 ;pwmka = ka;
00029f 940e 0a57 	CALL SUBOPT_0xD
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
0002a1 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002a2 9a93      	SBI  0x12,3
                 ;PORTD.6 = 0;
0002a3 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
0002a4 9a97      	SBI  0x12,7
0002a5 c069      	RJMP _0x20C000A
                 ; .FEND
                 ;void kiri(unsigned char ki, unsigned char ka)
                 _kiri:
                 ; .FSTART _kiri
                 ;pwmka = ka;
0002a6 940e 0a57 	CALL SUBOPT_0xD
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
0002a8 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
0002a9 9893      	CBI  0x12,3
                 ;PORTD.6 = 1;
0002aa 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
0002ab 9897      	CBI  0x12,7
0002ac c062      	RJMP _0x20C000A
                 ; .FEND
                 ;void setMotor(int ki, int ka)
                 _setMotor:
                 ; .FSTART _setMotor
                 ;pwmki = abs(ki);
0002ad 93ba      	ST   -Y,R27
0002ae 93aa      	ST   -Y,R26
                 ;	ki -> Y+2
                 ;	ka -> Y+0
0002af 81aa      	LDD  R26,Y+2
0002b0 81bb      	LDD  R27,Y+2+1
0002b1 940e 08ee 	CALL _abs
0002b3 bdfb      	OUT  0x2A+1,R31
0002b4 bdea      	OUT  0x2A,R30
                 ;if (ki > 0)
0002b5 81aa      	LDD  R26,Y+2
0002b6 81bb      	LDD  R27,Y+2+1
0002b7 940e 0bbc 	CALL __CPW02
0002b9 f41c      	BRGE _0x56
                 ;PORTD.2 = 1;
0002ba 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
0002bb 9893      	CBI  0x12,3
                 ;else
0002bc c002      	RJMP _0x5B
                 _0x56:
                 ;PORTD.2 = 0;
0002bd 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002be 9a93      	SBI  0x12,3
                 _0x5B:
                 ;pwmka = abs(ka);
0002bf 81a8      	LD   R26,Y
0002c0 81b9      	LDD  R27,Y+1
0002c1 940e 08ee 	CALL _abs
0002c3 bdf9      	OUT  0x28+1,R31
0002c4 bde8      	OUT  0x28,R30
                 ;if (ka > 0)
0002c5 940e 0a61 	CALL SUBOPT_0xE
0002c7 f41c      	BRGE _0x60
                 ;PORTD.7 = 1;
0002c8 9a97      	SBI  0x12,7
                 ;PORTD.6 = 0;
0002c9 9896      	CBI  0x12,6
                 ;else
0002ca c002      	RJMP _0x65
                 _0x60:
                 ;PORTD.7 = 0;
0002cb 9897      	CBI  0x12,7
                 ;PORTD.6 = 1;
0002cc 9a96      	SBI  0x12,6
                 _0x65:
0002cd c199      	RJMP _0x20C0009
                 ; .FEND
                 ;void rem(int nilai_rem)
                 _rem:
                 ; .FSTART _rem
                 ;PORTD .4 = 1;
0002ce 93ba      	ST   -Y,R27
0002cf 93aa      	ST   -Y,R26
                 ;	nilai_rem -> Y+0
0002d0 9a94      	SBI  0x12,4
                 ;PORTD .5 = 1;
0002d1 9a95      	SBI  0x12,5
                 ;PORTD .2 = 0;
0002d2 9892      	CBI  0x12,2
                 ;PORTD .3 = 0;
0002d3 9893      	CBI  0x12,3
                 ;PORTD .6 = 0;
0002d4 9896      	CBI  0x12,6
                 ;PORTD .7 = 0;
0002d5 9897      	CBI  0x12,7
                 ;delay_ms(nilai_rem);
0002d6 81a8      	LD   R26,Y
0002d7 81b9      	LDD  R27,Y+1
0002d8 940e 0ca7 	CALL _delay_ms
0002da c034      	RJMP _0x20C000A
                 ; .FEND
                 ;void maju_delay(int kec, int lama)
                 ;maju(kec, kec);
                 ;	kec -> Y+2
                 ;	lama -> Y+0
                 ;delay(lama);
                 ;void pilihSpeed(int kec)
                 _pilihSpeed:
                 ; .FSTART _pilihSpeed
                 ;kp = kec * 0.15;
0002db 93ba      	ST   -Y,R27
0002dc 93aa      	ST   -Y,R26
                 ;	kec -> Y+0
0002dd 940e 0a66 	CALL SUBOPT_0xF
                +
0002df e9aa     +LDI R26 , LOW ( 0x3E19999A )
0002e0 e9b9     +LDI R27 , HIGH ( 0x3E19999A )
0002e1 e189     +LDI R24 , BYTE3 ( 0x3E19999A )
0002e2 e39e     +LDI R25 , BYTE4 ( 0x3E19999A )
                 	__GETD2N 0x3E19999A
0002e3 940e 0c59 	CALL __MULF12
0002e5 e9a3      	LDI  R26,LOW(_kp)
0002e6 e0b1      	LDI  R27,HIGH(_kp)
0002e7 940e 0a6d 	CALL SUBOPT_0x10
                 ;kd = kec * 0.6;
0002e9 940e 0a66 	CALL SUBOPT_0xF
                +
0002eb e9aa     +LDI R26 , LOW ( 0x3F19999A )
0002ec e9b9     +LDI R27 , HIGH ( 0x3F19999A )
0002ed e189     +LDI R24 , BYTE3 ( 0x3F19999A )
0002ee e39f     +LDI R25 , BYTE4 ( 0x3F19999A )
                 	__GETD2N 0x3F19999A
0002ef 940e 0c59 	CALL __MULF12
0002f1 e9a5      	LDI  R26,LOW(_kd)
0002f2 e0b1      	LDI  R27,HIGH(_kd)
0002f3 940e 0a6d 	CALL SUBOPT_0x10
                 ;SPEED = kec;
0002f5 81e8      	LD   R30,Y
0002f6 81f9      	LDD  R31,Y+1
0002f7 93e0 0197 	STS  _SPEED,R30
0002f9 93f0 0198 	STS  _SPEED+1,R31
                 ;MIN_SPEED = -(kec * 0.75);
0002fb 940e 0a66 	CALL SUBOPT_0xF
                +
0002fd e0a0     +LDI R26 , LOW ( 0x3F400000 )
0002fe e0b0     +LDI R27 , HIGH ( 0x3F400000 )
0002ff e480     +LDI R24 , BYTE3 ( 0x3F400000 )
000300 e39f     +LDI R25 , BYTE4 ( 0x3F400000 )
                 	__GETD2N 0x3F400000
000301 940e 0c59 	CALL __MULF12
000303 940e 0bc0 	CALL __ANEGF1
000305 e9a9      	LDI  R26,LOW(_MIN_SPEED)
000306 e0b1      	LDI  R27,HIGH(_MIN_SPEED)
000307 940e 0a6d 	CALL SUBOPT_0x10
                 ;MAX_SPEED = kec;
000309 81e8      	LD   R30,Y
00030a 81f9      	LDD  R31,Y+1
00030b 93e0 019b 	STS  _MAX_SPEED,R30
00030d 93f0 019c 	STS  _MAX_SPEED+1,R31
                 _0x20C000A:
00030f 9622      	ADIW R28,2
000310 9508      	RET
                 ; .FEND
                 ;void maju_cari_garis()
                 ;maju(180, 182);
                 ;cek_sensor(); // 0b01000000)!=0b00000000)
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;rem(100);
                 ;void parkir()
                 ;lampu = 0;
                 ;while (1)
                 ;rem(100);
                 ;void scan(int kec)
                 _scan:
                 ; .FSTART _scan
                 ;int rateError;
                 ;int moveVal, moveLeft, moveRight;
                 ;pilihSpeed(kec);
000311 93ba      	ST   -Y,R27
000312 93aa      	ST   -Y,R26
000313 9722      	SBIW R28,2
000314 940e 0b30 	CALL __SAVELOCR6
                 ;	kec -> Y+8
                 ;	rateError -> R16,R17
                 ;	moveVal -> R18,R19
                 ;	moveLeft -> R20,R21
                 ;	moveRight -> Y+6
000316 85a8      	LDD  R26,Y+8
000317 85b9      	LDD  R27,Y+8+1
000318 dfc2      	RCALL _pilihSpeed
                 ;sensor = sensor & 0b01111111;
000319 940e 0a72 	CALL SUBOPT_0x11
00031b 77ef      	ANDI R30,LOW(0x7F)
00031c 70f0      	ANDI R31,HIGH(0x7F)
00031d 93e0 018d 	STS  _sensor,R30
00031f 93f0 018e 	STS  _sensor+1,R31
                 ;switch (sensor) //  1=kiri 8=kanan
000321 940e 0a72 	CALL SUBOPT_0x11
                 ;{               //  7......1
                 ;case 0b00000001:
000323 30e1      	CPI  R30,LOW(0x1)
000324 e0a0      	LDI  R26,HIGH(0x1)
000325 07fa      	CPC  R31,R26
000326 f419      	BRNE _0x81
                 ;error = -6;
000327 efea      	LDI  R30,LOW(65530)
000328 efff      	LDI  R31,HIGH(65530)
000329 c056      	RJMP _0x14F
                 ;break; // DOMINAN KANAN
                 ;case 0b00000011:
                 _0x81:
00032a 30e3      	CPI  R30,LOW(0x3)
00032b e0a0      	LDI  R26,HIGH(0x3)
00032c 07fa      	CPC  R31,R26
00032d f419      	BRNE _0x82
                 ;error = -5;
00032e efeb      	LDI  R30,LOW(65531)
00032f efff      	LDI  R31,HIGH(65531)
000330 c04f      	RJMP _0x14F
                 ;break;
                 ;case 0b00000010:
                 _0x82:
000331 30e2      	CPI  R30,LOW(0x2)
000332 e0a0      	LDI  R26,HIGH(0x2)
000333 07fa      	CPC  R31,R26
000334 f419      	BRNE _0x83
                 ;error = -4;
000335 efec      	LDI  R30,LOW(65532)
000336 efff      	LDI  R31,HIGH(65532)
000337 c048      	RJMP _0x14F
                 ;break;
                 ;case 0b00000110:
                 _0x83:
000338 30e6      	CPI  R30,LOW(0x6)
000339 e0a0      	LDI  R26,HIGH(0x6)
00033a 07fa      	CPC  R31,R26
00033b f419      	BRNE _0x84
                 ;error = -3;
00033c efed      	LDI  R30,LOW(65533)
00033d efff      	LDI  R31,HIGH(65533)
00033e c041      	RJMP _0x14F
                 ;break;
                 ;case 0b00000100:
                 _0x84:
00033f 30e4      	CPI  R30,LOW(0x4)
000340 e0a0      	LDI  R26,HIGH(0x4)
000341 07fa      	CPC  R31,R26
000342 f419      	BRNE _0x85
                 ;error = -2;
000343 efee      	LDI  R30,LOW(65534)
000344 efff      	LDI  R31,HIGH(65534)
000345 c03a      	RJMP _0x14F
                 ;break;
                 ;case 0b00001100:
                 _0x85:
000346 30ec      	CPI  R30,LOW(0xC)
000347 e0a0      	LDI  R26,HIGH(0xC)
000348 07fa      	CPC  R31,R26
000349 f419      	BRNE _0x86
                 ;error = -1;
00034a efef      	LDI  R30,LOW(65535)
00034b efff      	LDI  R31,HIGH(65535)
00034c c033      	RJMP _0x14F
                 ;break;
                 ;case 0b00001000:
                 _0x86:
00034d 30e8      	CPI  R30,LOW(0x8)
00034e e0a0      	LDI  R26,HIGH(0x8)
00034f 07fa      	CPC  R31,R26
000350 f431      	BRNE _0x87
                 ;error = 0;
000351 e0e0      	LDI  R30,LOW(0)
000352 93e0 018f 	STS  _error,R30
000354 93e0 0190 	STS  _error+1,R30
                 ;break;
000356 c02d      	RJMP _0x80
                 ;case 0b00011000:
                 _0x87:
000357 31e8      	CPI  R30,LOW(0x18)
000358 e0a0      	LDI  R26,HIGH(0x18)
000359 07fa      	CPC  R31,R26
00035a f419      	BRNE _0x88
                 ;error = 1;
00035b e0e1      	LDI  R30,LOW(1)
00035c e0f0      	LDI  R31,HIGH(1)
00035d c022      	RJMP _0x14F
                 ;break;
                 ;case 0b00010000:
                 _0x88:
00035e 31e0      	CPI  R30,LOW(0x10)
00035f e0a0      	LDI  R26,HIGH(0x10)
000360 07fa      	CPC  R31,R26
000361 f419      	BRNE _0x89
                 ;error = 2;
000362 e0e2      	LDI  R30,LOW(2)
000363 e0f0      	LDI  R31,HIGH(2)
000364 c01b      	RJMP _0x14F
                 ;break;
                 ;case 0b00110000:
                 _0x89:
000365 33e0      	CPI  R30,LOW(0x30)
000366 e0a0      	LDI  R26,HIGH(0x30)
000367 07fa      	CPC  R31,R26
000368 f419      	BRNE _0x8A
                 ;error = 3;
000369 e0e3      	LDI  R30,LOW(3)
00036a e0f0      	LDI  R31,HIGH(3)
00036b c014      	RJMP _0x14F
                 ;break;
                 ;case 0b00100000:
                 _0x8A:
00036c 32e0      	CPI  R30,LOW(0x20)
00036d e0a0      	LDI  R26,HIGH(0x20)
00036e 07fa      	CPC  R31,R26
00036f f419      	BRNE _0x8B
                 ;error = 4;
000370 e0e4      	LDI  R30,LOW(4)
000371 e0f0      	LDI  R31,HIGH(4)
000372 c00d      	RJMP _0x14F
                 ;break;
                 ;case 0b01100000:
                 _0x8B:
000373 36e0      	CPI  R30,LOW(0x60)
000374 e0a0      	LDI  R26,HIGH(0x60)
000375 07fa      	CPC  R31,R26
000376 f419      	BRNE _0x8C
                 ;error = 5;
000377 e0e5      	LDI  R30,LOW(5)
000378 e0f0      	LDI  R31,HIGH(5)
000379 c006      	RJMP _0x14F
                 ;break;
                 ;case 0b01000000:
                 _0x8C:
00037a 34e0      	CPI  R30,LOW(0x40)
00037b e0a0      	LDI  R26,HIGH(0x40)
00037c 07fa      	CPC  R31,R26
00037d f431      	BRNE _0x80
                 ;error = 6;
00037e e0e6      	LDI  R30,LOW(6)
00037f e0f0      	LDI  R31,HIGH(6)
                 _0x14F:
000380 93e0 018f 	STS  _error,R30
000382 93f0 0190 	STS  _error+1,R31
                 ;break; // DOMINAN KIRI
                 _0x80:
                 ;rateError = error - lastError;
000384 91a0 0191 	LDS  R26,_lastError
000386 91b0 0192 	LDS  R27,_lastError+1
000388 91e0 018f 	LDS  R30,_error
00038a 91f0 0190 	LDS  R31,_error+1
00038c 1bea      	SUB  R30,R26
00038d 0bfb      	SBC  R31,R27
00038e 018f      	MOVW R16,R30
                 ;lastError = error;
00038f 91e0 018f 	LDS  R30,_error
000391 91f0 0190 	LDS  R31,_error+1
000393 93e0 0191 	STS  _lastError,R30
000395 93f0 0192 	STS  _lastError+1,R31
                 ;moveVal = (int)(error * kp) + (rateError * kd);
000397 91e0 0193 	LDS  R30,_kp
000399 91f0 0194 	LDS  R31,_kp+1
00039b 91a0 018f 	LDS  R26,_error
00039d 91b0 0190 	LDS  R27,_error+1
00039f 940e 0b5b 	CALL __MULW12
0003a1 01bf      	MOVW R22,R30
0003a2 91e0 0195 	LDS  R30,_kd
0003a4 91f0 0196 	LDS  R31,_kd+1
0003a6 01d8      	MOVW R26,R16
0003a7 940e 0b5b 	CALL __MULW12
0003a9 0fe6      	ADD  R30,R22
0003aa 1ff7      	ADC  R31,R23
0003ab 019f      	MOVW R18,R30
                 ;moveLeft = SPEED + moveVal;
0003ac 91a0 0197 	LDS  R26,_SPEED
0003ae 91b0 0198 	LDS  R27,_SPEED+1
0003b0 0fea      	ADD  R30,R26
0003b1 1ffb      	ADC  R31,R27
0003b2 01af      	MOVW R20,R30
                 ;moveRight = SPEED - moveVal;
0003b3 91e0 0197 	LDS  R30,_SPEED
0003b5 91f0 0198 	LDS  R31,_SPEED+1
0003b7 1be2      	SUB  R30,R18
0003b8 0bf3      	SBC  R31,R19
0003b9 83ee      	STD  Y+6,R30
0003ba 83ff      	STD  Y+6+1,R31
                 ;if (moveLeft > MAX_SPEED)
0003bb 940e 0a77 	CALL SUBOPT_0x12
0003bd 17e4      	CP   R30,R20
0003be 07f5      	CPC  R31,R21
0003bf f424      	BRGE _0x8E
                 ;moveLeft = MAX_SPEED;
                +
0003c0 9140 019b+LDS R20 , 0 + ( _MAX_SPEED )
0003c2 9150 019c+LDS R21 , 0 + ( _MAX_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MAX_SPEED
                 ;if (moveLeft < MIN_SPEED)
                 _0x8E:
0003c4 940e 0a7c 	CALL SUBOPT_0x13
0003c6 174e      	CP   R20,R30
0003c7 075f      	CPC  R21,R31
0003c8 f424      	BRGE _0x8F
                 ;moveLeft = MIN_SPEED;
                +
0003c9 9140 0199+LDS R20 , 0 + ( _MIN_SPEED )
0003cb 9150 019a+LDS R21 , 0 + ( _MIN_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MIN_SPEED
                 ;if (moveRight > MAX_SPEED)
                 _0x8F:
0003cd 940e 0a77 	CALL SUBOPT_0x12
0003cf 81ae      	LDD  R26,Y+6
0003d0 81bf      	LDD  R27,Y+6+1
0003d1 17ea      	CP   R30,R26
0003d2 07fb      	CPC  R31,R27
0003d3 f424      	BRGE _0x90
                 ;moveRight = MAX_SPEED;
0003d4 940e 0a77 	CALL SUBOPT_0x12
0003d6 83ee      	STD  Y+6,R30
0003d7 83ff      	STD  Y+6+1,R31
                 ;if (moveRight < MIN_SPEED)
                 _0x90:
0003d8 940e 0a7c 	CALL SUBOPT_0x13
0003da 81ae      	LDD  R26,Y+6
0003db 81bf      	LDD  R27,Y+6+1
0003dc 17ae      	CP   R26,R30
0003dd 07bf      	CPC  R27,R31
0003de f424      	BRGE _0x91
                 ;moveRight = MIN_SPEED;
0003df 940e 0a7c 	CALL SUBOPT_0x13
0003e1 83ee      	STD  Y+6,R30
0003e2 83ff      	STD  Y+6+1,R31
                 ;setMotor(moveLeft, moveRight);
                 _0x91:
0003e3 935a      	ST   -Y,R21
0003e4 934a      	ST   -Y,R20
0003e5 85a8      	LDD  R26,Y+8
0003e6 85b9      	LDD  R27,Y+8+1
0003e7 dec5      	RCALL _setMotor
0003e8 940e 0b37 	CALL __LOADLOCR6
0003ea 962a      	ADIW R28,10
0003eb 9508      	RET
                 ; .FEND
                 ;void scanX(int brpkali, int kec)
                 _scanX:
                 ; .FSTART _scanX
                 ;while (hitung < brpkali)
0003ec 93ba      	ST   -Y,R27
0003ed 93aa      	ST   -Y,R26
                 ;	brpkali -> Y+2
                 ;	kec -> Y+0
                 _0x92:
0003ee 81ea      	LDD  R30,Y+2
0003ef 81fb      	LDD  R31,Y+2+1
0003f0 164e      	CP   R4,R30
0003f1 065f      	CPC  R5,R31
0003f2 f4d4      	BRGE _0x94
                 ;while ((sensor & 0b00011100) != 0b00011100)
                 _0x95:
0003f3 940e 0a81 	CALL SUBOPT_0x14
0003f5 f029      	BREQ _0x97
                 ;cek_sensor();
0003f6 ddef      	RCALL _cek_sensor
                 ;scan(kec);
0003f7 81a8      	LD   R26,Y
0003f8 81b9      	LDD  R27,Y+1
0003f9 df17      	RCALL _scan
0003fa cff8      	RJMP _0x95
                 _0x97:
                 ;while ((sensor & 0b00011100) == 0b00011100)
                 _0x98:
0003fb 940e 0a81 	CALL SUBOPT_0x14
0003fd f471      	BRNE _0x9A
                 ;cek_sensor();
0003fe dde7      	RCALL _cek_sensor
                 ;lampu = 0;
0003ff 98c3      	CBI  0x18,3
                 ;scan(kec);
000400 81a8      	LD   R26,Y
000401 81b9      	LDD  R27,Y+1
000402 df0e      	RCALL _scan
                 ;if ((sensor & 0b00011100) != 0b00011100)
000403 940e 0a81 	CALL SUBOPT_0x14
000405 f029      	BREQ _0x9D
                 ;hitung++;
000406 01f2      	MOVW R30,R4
000407 9631      	ADIW R30,1
000408 012f      	MOVW R4,R30
000409 9731      	SBIW R30,1
                 ;lampu = 1;
00040a 9ac3      	SBI  0x18,3
                 ;};
                 _0x9D:
00040b cfef      	RJMP _0x98
                 _0x9A:
                 ;};
00040c cfe1      	RJMP _0x92
                 _0x94:
                 ;hitung = 0;
00040d 2444      	CLR  R4
00040e 2455      	CLR  R5
00040f c057      	RJMP _0x20C0009
                 ; .FEND
                 ;void scanTimer(int countGoal, int kec, int lama)
                 ;count = 0;
                 ;	countGoal -> Y+4
                 ;	kec -> Y+2
                 ;	lama -> Y+0
                 ;while (count < countGoal)
                 ;cek_sensor();
                 ;scan(kec);
                 ;count++;
                 ;rem(lama);
                 ;void scanKotak(int brpkali, int kec, int lama_rem) {
                 ;while (hitung < brpkali) {
                 ;	brpkali -> Y+4
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
                 ;while(1)
                 ;cek_sensor();
                 ;scan(kec);
                 ;if((sensor & 0b01111111) == 0b01111111) {
                 ;hitung++; mundur(kec, kec); delay(lama_rem); rem(10); break;
                 ;hitung = 0;
                 ;void scanTka(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b01110000) != 0b01110000) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b01110000) == 0b01110000)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b01110000) != 0b01110000)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scanTki(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b00000111) != 0b00000111) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b00000111) == 0b00000111)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b00000111) != 0b00000111)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scan7ki()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b01000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ka()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b00000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ki2()
                 ;cek_sensor();
                 ;while (sensor == 0b00000000) // sensor !=0b00111111||0b00000011|| 0b00000001
                 ;cek_sensor();
                 ;scan(170);
                 ;void belki(int kec, int lama)
                 _belki:
                 ; .FSTART _belki
                 ;cek_sensor();
000410 93ba      	ST   -Y,R27
000411 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
000412 ddd3      	RCALL _cek_sensor
                 ;while (sen[0] || sen[1])
                 _0xC7:
000413 91e0 0186 	LDS  R30,_sen
000415 30e0      	CPI  R30,0
000416 f421      	BRNE _0xCA
                +
000417 91e0 0187+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
000419 30e0      	CPI  R30,0
00041a f019      	BREQ _0xC9
                 _0xCA:
                 ;kiri(kec, kec);
00041b 940e 0a85 	CALL SUBOPT_0x15
                 ;cek_sensor();
00041d cff5      	RJMP _0xC7
                 _0xC9:
                 ;while (!sen[0] && !sen[1])
                 _0xCC:
00041e 91e0 0186 	LDS  R30,_sen
000420 30e0      	CPI  R30,0
000421 f421      	BRNE _0xCF
                +
000422 91e0 0187+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
000424 30e0      	CPI  R30,0
000425 f009      	BREQ _0xD0
                 _0xCF:
000426 c003      	RJMP _0xCE
                 _0xD0:
                 ;kiri(kec, kec);
000427 940e 0a85 	CALL SUBOPT_0x15
                 ;cek_sensor();
000429 cff4      	RJMP _0xCC
                 _0xCE:
                 ;if (lama > 0)
00042a 940e 0a61 	CALL SUBOPT_0xE
00042c f41c      	BRGE _0xD1
                 ;rem(lama);
00042d 81a8      	LD   R26,Y
00042e 81b9      	LDD  R27,Y+1
00042f de9e      	RCALL _rem
                 _0xD1:
000430 c036      	RJMP _0x20C0009
                 ; .FEND
                 ;void belki2()
                 ;cek_sensor();
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;kiri(150, 150);
                 ;void belka(int kec, int lama)
                 _belka:
                 ; .FSTART _belka
                 ;cek_sensor();
000431 93ba      	ST   -Y,R27
000432 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
000433 ddb2      	RCALL _cek_sensor
                 ;while (sen[5] || sen[6])
                 _0xD5:
                +
000434 91e0 018b+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
000436 30e0      	CPI  R30,0
000437 f421      	BRNE _0xD8
                +
000438 91e0 018c+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
00043a 30e0      	CPI  R30,0
00043b f019      	BREQ _0xD7
                 _0xD8:
                 ;kanan(kec, kec);
00043c 940e 0a8c 	CALL SUBOPT_0x16
                 ;cek_sensor();
00043e cff5      	RJMP _0xD5
                 _0xD7:
                 ;while (!sen[5] && !sen[6])
                 _0xDA:
                +
00043f 91e0 018b+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
000441 30e0      	CPI  R30,0
000442 f421      	BRNE _0xDD
                +
000443 91e0 018c+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
000445 30e0      	CPI  R30,0
000446 f009      	BREQ _0xDE
                 _0xDD:
000447 c003      	RJMP _0xDC
                 _0xDE:
                 ;kanan(kec, kec);
000448 940e 0a8c 	CALL SUBOPT_0x16
                 ;cek_sensor();
00044a cff4      	RJMP _0xDA
                 _0xDC:
                 ;if (lama > 0)
00044b 940e 0a61 	CALL SUBOPT_0xE
00044d f41c      	BRGE _0xDF
                 ;rem(lama);
00044e 81a8      	LD   R26,Y
00044f 81b9      	LDD  R27,Y+1
000450 de7d      	RCALL _rem
                 _0xDF:
000451 c015      	RJMP _0x20C0009
                 ; .FEND
                 ;void belkacenter()
                 ;cek_sensor();
                 ;while ((sensor & 0b00001000) != 0b00001000)
                 ;cek_sensor();
                 ;kanan(180, 180);
                 ;if ((sensor & 0b10000000) == 0b10000000)
                 ;lcd_kedip(1);
                 ;void scan_delay(int ms)
                 ;k = 0;
                 ;	ms -> Y+0
                 ;maju(172, 170);
                 ;while (k < ms / 10)
                 ;delay_ms(10);
                 ;k++;
                 ;cek_sensor();
                 ;scan(180);
                 ;void belokKanan(int kec, int lama_rem) {
                 _belokKanan:
                 ; .FSTART _belokKanan
                 ;if(mapMirror == map_biru) {
000452 940e 0a93 	CALL SUBOPT_0x17
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
000454 f421      	BRNE _0xE7
                 ;belka(kec, lama_rem);
000455 940e 0a9b 	CALL SUBOPT_0x18
000457 dfd9      	RCALL _belka
                 ;} else {
000458 c003      	RJMP _0xE8
                 _0xE7:
                 ;belki(kec, lama_rem);
000459 940e 0a9b 	CALL SUBOPT_0x18
00045b dfb4      	RCALL _belki
                 _0xE8:
00045c c00a      	RJMP _0x20C0009
                 ; .FEND
                 ;void belokKiri(int kec, int lama_rem) {
                 _belokKiri:
                 ; .FSTART _belokKiri
                 ;if(mapMirror == map_biru) {
00045d 940e 0a93 	CALL SUBOPT_0x17
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
00045f f421      	BRNE _0xE9
                 ;belki(kec, lama_rem);
000460 940e 0a9b 	CALL SUBOPT_0x18
000462 dfad      	RCALL _belki
                 ;} else {
000463 c003      	RJMP _0xEA
                 _0xE9:
                 ;belka(kec, lama_rem);
000464 940e 0a9b 	CALL SUBOPT_0x18
000466 dfca      	RCALL _belka
                 _0xEA:
                 _0x20C0009:
000467 9624      	ADIW R28,4
000468 9508      	RET
                 ; .FEND
                 ;void griper()
                 ; 0000 005D {
                 ;capit_lepas;
                 ;lengan_tengah;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_ambil;
                 ;delay_ms(7000);
                 ;lengan_atas;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_lepas;
                 ;void ambil(int lama)
                 _ambil:
                 ; .FSTART _ambil
                 ;capit_ambil;
000469 93ba      	ST   -Y,R27
00046a 93aa      	ST   -Y,R26
                 ;	lama -> Y+0
00046b eeed      	LDI  R30,LOW(237)
00046c 2ede      	MOV  R13,R30
                 ;delay(lama);
00046d 81a8      	LD   R26,Y
00046e 81b9      	LDD  R27,Y+1
00046f dd25      	RCALL _delay
                 ;lengan_atas;
000470 eeea      	LDI  R30,LOW(234)
000471 2ece      	MOV  R12,R30
                 ;delay(lama);
000472 81a8      	LD   R26,Y
000473 81b9      	LDD  R27,Y+1
000474 dd20      	RCALL _delay
000475 940c 094a 	JMP  _0x20C0004
                 ; .FEND
                 ;void taruh(int lama)
                 ;lengan_bawah;
                 ;	lama -> Y+0
                 ;delay(lama);
                 ;capit_lepas;
                 ;delay(lama);
                 ;lengan_atas;
                 ;void bawah_lepas()
                 _bawah_lepas:
                 ; .FSTART _bawah_lepas
                 ;lengan_bawah;
000477 efe0      	LDI  R30,LOW(240)
000478 2ece      	MOV  R12,R30
                 ;capit_lepas;
000479 eee6      	LDI  R30,LOW(230)
00047a 2ede      	MOV  R13,R30
00047b 9508      	RET
                 ; .FEND
                 ;void atas_lepas()
                 ;lengan_atas;
                 ;capit_lepas;
                 ;void bacawarna()
                 ; 0000 005E {
                 _bacawarna:
                 ; .FSTART _bacawarna
                 ;nadc7 = read_adc(7);
00047c e0a7      	LDI  R26,LOW(7)
00047d dd0c      	RCALL _read_adc
00047e 2e6e      	MOV  R6,R30
00047f 2477      	CLR  R7
                 ;lcd_gotoxy(13, 1);
000480 e0ed      	LDI  R30,LOW(13)
000481 940e 0aa2 	CALL SUBOPT_0x19
                 ;sprintf(buff, "%d   ", nadc7);
000483 940e 0a0d 	CALL SUBOPT_0x4
                +
000485 edee     +LDI R30 , LOW ( 2 * _0x0 + ( 94 ) )
000486 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 94 ) )
                 	__POINTW1FN _0x0,94
000487 93fa      	ST   -Y,R31
000488 93ea      	ST   -Y,R30
000489 01f3      	MOVW R30,R6
00048a 2766      	CLR  R22
00048b 2777      	CLR  R23
00048c c1d2      	RJMP _0x20C0006
                 ;lcd_puts(buff);
                 ; .FEND
                 ;int checkWarna() {
                 ;int warna;
                 ;nadc7 = read_adc(7);
                 ;	warna -> R16,R17
                 ;if(nadc7 > minMerah && nadc7 < maxMerah){
                 ;warna = 0;
                 ;} else if(nadc7 > minKuning && nadc7 < maxKuning){
                 ;warna = 1;
                 ;} else if(nadc7 > minHijau && nadc7 < maxHijau){
                 ;warna = 2;
                 ;} else {
                 ;warna = 3;
                 ;return warna;
                 ;void Program_Jalan() {
                 ; 0000 005F void Program_Jalan() {
                 _Program_Jalan:
                 ; .FSTART _Program_Jalan
                 ;scanX(1, 2000); belokKiri(2000, 200);
00048d e0e1      	LDI  R30,LOW(1)
00048e e0f0      	LDI  R31,HIGH(1)
00048f 940e 0aa6 	CALL SUBOPT_0x1A
000491 dfcb      	RCALL _belokKiri
                 ;scanX(5, 2000); belokKanan(2000, 200);
000492 e0e5      	LDI  R30,LOW(5)
000493 e0f0      	LDI  R31,HIGH(5)
000494 940e 0aa6 	CALL SUBOPT_0x1A
000496 dfbb      	RCALL _belokKanan
                 ;scanX(5, 2000); rem(200);
000497 e0e5      	LDI  R30,LOW(5)
000498 e0f0      	LDI  R31,HIGH(5)
000499 93fa      	ST   -Y,R31
00049a 93ea      	ST   -Y,R30
00049b eda0      	LDI  R26,LOW(2000)
00049c e0b7      	LDI  R27,HIGH(2000)
00049d df4e      	RCALL _scanX
00049e eca8      	LDI  R26,LOW(200)
00049f e0b0      	LDI  R27,0
0004a0 de2d      	RCALL _rem
0004a1 9508      	RET
                 ; .FEND
                 ;void balikKanan() {
                 ;mundur(1000, 1000); delay(380);
                 ;belokKanan(1200, 0); belokKanan(1200, 100);
                 ;void balikKiri() {
                 ;belki(1000, 50); belki(1000, 200);
                 ;void runBot(void);
                 ;void calibration(void);
                 ;void Program_Jalan(void);
                 ;void test_motor(void);
                 ;void test_tombol(void);
                 ;void map_select(int map_num);
                 ;void sens_warna(void);
                 ;void test_capit(void);
                 ;void changeMenu(int menuSelect, bool isSelect) {
                 ; 0000 0060 void changeMenu(int menuSelect, _Bool isSelect) {
                 _changeMenu:
                 ; .FSTART _changeMenu
                 ;lampu = 0;
0004a2 93aa      	ST   -Y,R26
                 ;	menuSelect -> Y+1
                 ;	isSelect -> Y+0
0004a3 98c3      	CBI  0x18,3
                 ;count_btn = menuSelect;
0004a4 81e9      	LDD  R30,Y+1
0004a5 81fa      	LDD  R31,Y+1+1
0004a6 93e0 0182 	STS  _count_btn,R30
0004a8 93f0 0183 	STS  _count_btn+1,R31
                 ;if(!isSelect && !isChildSelect) {
0004aa 81e8      	LD   R30,Y
0004ab 30e0      	CPI  R30,0
0004ac f421      	BRNE _0xFA
0004ad 91e0 0184 	LDS  R30,_isChildSelect
0004af 30e0      	CPI  R30,0
0004b0 f009      	BREQ _0xFB
                 _0xFA:
0004b1 c006      	RJMP _0xF9
                 _0xFB:
                 ;lcd_clear();
0004b2 940e 0ab3 	CALL SUBOPT_0x1B
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Menu");
                +
0004b4 eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
0004b5 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
0004b6 940e 0997 	CALL _lcd_putsf
                 ;switch (menuSelect) {
                 _0xF9:
0004b8 81e9      	LDD  R30,Y+1
0004b9 81fa      	LDD  R31,Y+1+1
                 ;case 0: // Calibration
0004ba 9730      	SBIW R30,0
0004bb f469      	BRNE _0xFF
                 ;if(isSelect) { calibration(); break; }
0004bc 81e8      	LD   R30,Y
0004bd 30e0      	CPI  R30,0
0004be f011      	BREQ _0x100
0004bf d0b4      	RCALL _calibration
0004c0 c08e      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x100:
0004c1 e0e0      	LDI  R30,LOW(0)
0004c2 940e 0aa2 	CALL SUBOPT_0x19
                 ;lcd_putsf("Calibration");
                +
0004c4 eea9     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
0004c5 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
0004c6 940e 0997 	CALL _lcd_putsf
                 ;break;
0004c8 c086      	RJMP _0xFE
                 ;case 1: // Run bot
                 _0xFF:
0004c9 30e1      	CPI  R30,LOW(0x1)
0004ca e0a0      	LDI  R26,HIGH(0x1)
0004cb 07fa      	CPC  R31,R26
0004cc f489      	BRNE _0x101
                 ;if(isSelect || isChildSelect) { runBot(); break; }
0004cd 81e8      	LD   R30,Y
0004ce 30e0      	CPI  R30,0
0004cf f421      	BRNE _0x103
0004d0 91e0 0184 	LDS  R30,_isChildSelect
0004d2 30e0      	CPI  R30,0
0004d3 f011      	BREQ _0x102
                 _0x103:
0004d4 d07c      	RCALL _runBot
0004d5 c079      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x102:
0004d6 e0e0      	LDI  R30,LOW(0)
0004d7 940e 0aa2 	CALL SUBOPT_0x19
                 ;lcd_putsf("Run Bot");
                +
0004d9 efa5     +LDI R26 , LOW ( 2 * _0x0 + ( 117 ) )
0004da e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 117 ) )
                 	__POINTW2FN _0x0,117
0004db 940e 0997 	CALL _lcd_putsf
                 ;break;
0004dd c071      	RJMP _0xFE
                 ;case 2: // Sensor Warna
                 _0x101:
0004de 30e2      	CPI  R30,LOW(0x2)
0004df e0a0      	LDI  R26,HIGH(0x2)
0004e0 07fa      	CPC  R31,R26
0004e1 f469      	BRNE _0x105
                 ;if(isSelect) { sens_warna(); break; }
0004e2 81e8      	LD   R30,Y
0004e3 30e0      	CPI  R30,0
0004e4 f011      	BREQ _0x106
0004e5 d10e      	RCALL _sens_warna
0004e6 c068      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x106:
0004e7 e0e0      	LDI  R30,LOW(0)
0004e8 940e 0aa2 	CALL SUBOPT_0x19
                 ;lcd_putsf("Sens Warna");
                +
0004ea efad     +LDI R26 , LOW ( 2 * _0x0 + ( 125 ) )
0004eb e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 125 ) )
                 	__POINTW2FN _0x0,125
0004ec 940e 0997 	CALL _lcd_putsf
                 ;break;
0004ee c060      	RJMP _0xFE
                 ;case 3: // Map Select
                 _0x105:
0004ef 30e3      	CPI  R30,LOW(0x3)
0004f0 e0a0      	LDI  R26,HIGH(0x3)
0004f1 07fa      	CPC  R31,R26
0004f2 f499      	BRNE _0x107
                 ;if(isSelect || isChildSelect) { map_select(map_biru); break; }
0004f3 81e8      	LD   R30,Y
0004f4 30e0      	CPI  R30,0
0004f5 f421      	BRNE _0x109
0004f6 91e0 0184 	LDS  R30,_isChildSelect
0004f8 30e0      	CPI  R30,0
0004f9 f021      	BREQ _0x108
                 _0x109:
0004fa e0a0      	LDI  R26,LOW(0)
0004fb e0b0      	LDI  R27,0
0004fc d07f      	RCALL _map_select
0004fd c051      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x108:
0004fe e0e0      	LDI  R30,LOW(0)
0004ff 940e 0aa2 	CALL SUBOPT_0x19
                 ;lcd_putsf("Map Biru");
                +
000501 e0a8     +LDI R26 , LOW ( 2 * _0x0 + ( 136 ) )
000502 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 136 ) )
                 	__POINTW2FN _0x0,136
000503 940e 0997 	CALL _lcd_putsf
                 ;break;
000505 c049      	RJMP _0xFE
                 ;case 4: // Map Select
                 _0x107:
000506 30e4      	CPI  R30,LOW(0x4)
000507 e0a0      	LDI  R26,HIGH(0x4)
000508 07fa      	CPC  R31,R26
000509 f499      	BRNE _0x10B
                 ;if(isSelect || isChildSelect) { map_select(map_merah); break; }
00050a 81e8      	LD   R30,Y
00050b 30e0      	CPI  R30,0
00050c f421      	BRNE _0x10D
00050d 91e0 0184 	LDS  R30,_isChildSelect
00050f 30e0      	CPI  R30,0
000510 f021      	BREQ _0x10C
                 _0x10D:
000511 e0a1      	LDI  R26,LOW(1)
000512 e0b0      	LDI  R27,0
000513 d068      	RCALL _map_select
000514 c03a      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x10C:
000515 e0e0      	LDI  R30,LOW(0)
000516 940e 0aa2 	CALL SUBOPT_0x19
                 ;lcd_putsf("Map Merah");
                +
000518 e1a1     +LDI R26 , LOW ( 2 * _0x0 + ( 145 ) )
000519 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 145 ) )
                 	__POINTW2FN _0x0,145
00051a 940e 0997 	CALL _lcd_putsf
                 ;break;
00051c c032      	RJMP _0xFE
                 ;case 5: // Test Motor
                 _0x10B:
00051d 30e5      	CPI  R30,LOW(0x5)
00051e e0a0      	LDI  R26,HIGH(0x5)
00051f 07fa      	CPC  R31,R26
000520 f469      	BRNE _0x10F
                 ;if(isSelect) { test_motor(); break; }
000521 81e8      	LD   R30,Y
000522 30e0      	CPI  R30,0
000523 f011      	BREQ _0x110
000524 d06d      	RCALL _test_motor
000525 c029      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x110:
000526 e0e0      	LDI  R30,LOW(0)
000527 940e 0aa2 	CALL SUBOPT_0x19
                 ;lcd_putsf("Motor");
                +
000529 e1ab     +LDI R26 , LOW ( 2 * _0x0 + ( 155 ) )
00052a e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 155 ) )
                 	__POINTW2FN _0x0,155
00052b 940e 0997 	CALL _lcd_putsf
                 ;break;
00052d c021      	RJMP _0xFE
                 ;case 6: // Test tombol
                 _0x10F:
00052e 30e6      	CPI  R30,LOW(0x6)
00052f e0a0      	LDI  R26,HIGH(0x6)
000530 07fa      	CPC  R31,R26
000531 f469      	BRNE _0x111
                 ;if(isSelect) { test_tombol(); break; }
000532 81e8      	LD   R30,Y
000533 30e0      	CPI  R30,0
000534 f011      	BREQ _0x112
000535 d088      	RCALL _test_tombol
000536 c018      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x112:
000537 e0e0      	LDI  R30,LOW(0)
000538 940e 0aa2 	CALL SUBOPT_0x19
                 ;lcd_putsf("Button");
                +
00053a e2a1     +LDI R26 , LOW ( 2 * _0x0 + ( 161 ) )
00053b e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 161 ) )
                 	__POINTW2FN _0x0,161
00053c 940e 0997 	CALL _lcd_putsf
                 ;break;
00053e c010      	RJMP _0xFE
                 ;case 7: // Test Capit
                 _0x111:
00053f 30e7      	CPI  R30,LOW(0x7)
000540 e0a0      	LDI  R26,HIGH(0x7)
000541 07fa      	CPC  R31,R26
000542 f461      	BRNE _0x115
                 ;if(isSelect) { test_capit(); break; }
000543 81e8      	LD   R30,Y
000544 30e0      	CPI  R30,0
000545 f011      	BREQ _0x114
000546 d0d7      	RCALL _test_capit
000547 c007      	RJMP _0xFE
                 ;lcd_gotoxy(0, 1);
                 _0x114:
000548 e0e0      	LDI  R30,LOW(0)
000549 940e 0aa2 	CALL SUBOPT_0x19
                 ;lcd_putsf("Capit");
                +
00054b e2a8     +LDI R26 , LOW ( 2 * _0x0 + ( 168 ) )
00054c e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 168 ) )
                 	__POINTW2FN _0x0,168
00054d 940e 0997 	CALL _lcd_putsf
                 ;break;
                 ;default:
                 _0x115:
                 ;break;
                 _0xFE:
00054f 940c 09a8 	JMP  _0x20C0003
                 ; .FEND
                 ;void runBot() {
                 _runBot:
                 ; .FSTART _runBot
                 ;if(!isChildSelect) {
000551 91e0 0184 	LDS  R30,_isChildSelect
000553 30e0      	CPI  R30,0
000554 f471      	BRNE _0x116
                 ;lcd_clear();
000555 940e 0ab3 	CALL SUBOPT_0x1B
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Run Bot");
                +
000557 efa5     +LDI R26 , LOW ( 2 * _0x0 + ( 117 ) )
000558 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 117 ) )
                 	__POINTW2FN _0x0,117
000559 940e 0ab7 	CALL SUBOPT_0x1C
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Click 2 to start");
                +
00055b e2ae     +LDI R26 , LOW ( 2 * _0x0 + ( 174 ) )
00055c e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 174 ) )
                 	__POINTW2FN _0x0,174
00055d 940e 0997 	CALL _lcd_putsf
                 ;isChildSelect = true;
00055f e0e1      	LDI  R30,LOW(1)
000560 93e0 0184 	STS  _isChildSelect,R30
                 ;} else if(isChildSelect) {
000562 c010      	RJMP _0x117
                 _0x116:
000563 91e0 0184 	LDS  R30,_isChildSelect
000565 30e0      	CPI  R30,0
000566 f061      	BREQ _0x118
                 ;lcd_clear();
000567 940e 094c 	CALL _lcd_clear
                 ;lcd_gotoxy(0, 1);
000569 e0e0      	LDI  R30,LOW(0)
00056a 940e 0aa2 	CALL SUBOPT_0x19
                 ;lcd_putsf("Running...");
                +
00056c e3af     +LDI R26 , LOW ( 2 * _0x0 + ( 191 ) )
00056d e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 191 ) )
                 	__POINTW2FN _0x0,191
00056e 940e 0997 	CALL _lcd_putsf
                 ;Program_Jalan();
000570 df1c      	RCALL _Program_Jalan
                 ;isChildSelect = false;
000571 940e 0abb 	CALL SUBOPT_0x1D
                 ;changeMenu(0, false);
                 _0x118:
                 _0x117:
000573 9508      	RET
                 ; .FEND
                 ;void calibration() {
                 _calibration:
                 ; .FSTART _calibration
                 ;scan_garis();
000574 dc9f      	RCALL _scan_garis
                 ;delay(1000);
000575 940e 0ac5 	CALL SUBOPT_0x1E
                 ;scan_back();
000577 dcbc      	RCALL _scan_back
                 ;delay(1000);
000578 940e 0ac5 	CALL SUBOPT_0x1E
                 ;hit_tengah();
00057a dcd9      	RCALL _hit_tengah
                 ;isChildSelect = false;
00057b c03c      	RJMP _0x20C0008
                 ;changeMenu(0, false);
                 ; .FEND
                 ;void map_select(int map_num) {
                 _map_select:
                 ; .FSTART _map_select
                 ;if(map_num != 0 && map_num != 1) map_num = 0;
00057c 93ba      	ST   -Y,R27
00057d 93aa      	ST   -Y,R26
                 ;	map_num -> Y+0
00057e 81a8      	LD   R26,Y
00057f 81b9      	LDD  R27,Y+1
000580 9710      	SBIW R26,0
000581 f011      	BREQ _0x11A
000582 9711      	SBIW R26,1
000583 f409      	BRNE _0x11B
                 _0x11A:
000584 c003      	RJMP _0x119
                 _0x11B:
000585 e0e0      	LDI  R30,LOW(0)
000586 83e8      	STD  Y+0,R30
000587 83e9      	STD  Y+0+1,R30
                 ;mapMirror = map_num;
                 _0x119:
000588 81e8      	LD   R30,Y
000589 81f9      	LDD  R31,Y+1
00058a e2aa      	LDI  R26,LOW(_mapMirror)
00058b e0b0      	LDI  R27,HIGH(_mapMirror)
00058c 940e 0ba3 	CALL __EEPROMWRW
                 ;isChildSelect = false;
00058e 940e 0abb 	CALL SUBOPT_0x1D
                 ;changeMenu(0, false);
000590 940c 094a 	JMP  _0x20C0004
                 ; .FEND
                 ;void test_motor()
                 _test_motor:
                 ; .FSTART _test_motor
                 ;lcd_clear();
000592 940e 0ab3 	CALL SUBOPT_0x1B
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Motor");
                +
000594 e4aa     +LDI R26 , LOW ( 2 * _0x0 + ( 202 ) )
000595 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 202 ) )
                 	__POINTW2FN _0x0,202
000596 940e 0ab7 	CALL SUBOPT_0x1C
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+1000 +1000");
                +
000598 e5a5     +LDI R26 , LOW ( 2 * _0x0 + ( 213 ) )
000599 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 213 ) )
                 	__POINTW2FN _0x0,213
00059a 940e 0ac9 	CALL SUBOPT_0x1F
                 ;setMotor(1000, 1000);
00059c 940e 0ad0 	CALL SUBOPT_0x20
                 ;delay_ms(2000);
                 ;lcd_gotoxy(0, 1);
00059e e0e0      	LDI  R30,LOW(0)
00059f 940e 0aa2 	CALL SUBOPT_0x19
                 ;lcd_putsf("-1000 -1000");
                +
0005a1 e6a1     +LDI R26 , LOW ( 2 * _0x0 + ( 225 ) )
0005a2 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 225 ) )
                 	__POINTW2FN _0x0,225
0005a3 940e 0ad8 	CALL SUBOPT_0x21
                 ;setMotor(-1000, -1000);
0005a5 940e 0adf 	CALL SUBOPT_0x22
                 ;delay_ms(2000);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+1000 -1000");
                +
0005a7 e6ad     +LDI R26 , LOW ( 2 * _0x0 + ( 237 ) )
0005a8 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 237 ) )
                 	__POINTW2FN _0x0,237
0005a9 940e 0ac9 	CALL SUBOPT_0x1F
                 ;setMotor(1000, -1000);
0005ab 940e 0adf 	CALL SUBOPT_0x22
                 ;delay_ms(2000);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("-1000 +1000");
                +
0005ad e7a9     +LDI R26 , LOW ( 2 * _0x0 + ( 249 ) )
0005ae e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 249 ) )
                 	__POINTW2FN _0x0,249
0005af 940e 0ad8 	CALL SUBOPT_0x21
                 ;setMotor(-1000, 1000);
0005b1 940e 0ad0 	CALL SUBOPT_0x20
                 ;delay_ms(2000);
                 ;rem(1000);
0005b3 eea8      	LDI  R26,LOW(1000)
0005b4 e0b3      	LDI  R27,HIGH(1000)
0005b5 dd18      	RCALL _rem
                 ;lcd_clear();
0005b6 940e 0ab3 	CALL SUBOPT_0x1B
                 ;lcd_gotoxy(0, 0);
                 ;isChildSelect = false;
                 _0x20C0008:
0005b8 e0e0      	LDI  R30,LOW(0)
0005b9 93e0 0184 	STS  _isChildSelect,R30
                 ;changeMenu(0, false);
0005bb 940e 0ae9 	CALL SUBOPT_0x23
0005bd 9508      	RET
                 ; .FEND
                 ;void test_tombol()
                 _test_tombol:
                 ; .FSTART _test_tombol
                 ;lcd_gotoxy(0, 1);
0005be e0e0      	LDI  R30,LOW(0)
0005bf 940e 0aa2 	CALL SUBOPT_0x19
                 ;lcd_putsf("Click 1 to exit");
                +
0005c1 e8a5     +LDI R26 , LOW ( 2 * _0x0 + ( 261 ) )
0005c2 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 261 ) )
                 	__POINTW2FN _0x0,261
0005c3 940e 0997 	CALL _lcd_putsf
                 ;isTestTombol = true;
0005c5 e0e1      	LDI  R30,LOW(1)
0005c6 93e0 0185 	STS  _isTestTombol,R30
                 ;while (1)
                 _0x11C:
                 ;if (!isTestTombol) break;
0005c8 91e0 0185 	LDS  R30,_isTestTombol
0005ca 30e0      	CPI  R30,0
0005cb f139      	BREQ _0x11E
                 ;if ((t1 == 0))
0005cc 9998      	SBIC 0x13,0
0005cd c009      	RJMP _0x120
                 ;lcd_gotoxy(0, 0);
0005ce e0e0      	LDI  R30,LOW(0)
0005cf 940e 0a09 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 1     ");
                +
0005d1 e9a5     +LDI R26 , LOW ( 2 * _0x0 + ( 277 ) )
0005d2 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 277 ) )
                 	__POINTW2FN _0x0,277
0005d3 940e 0af0 	CALL SUBOPT_0x24
                 ;isTestTombol = false;
                 ;delay(500);
                 ;changeMenu(0, false);
0005d5 940e 0ae9 	CALL SUBOPT_0x23
                 ;if (t2 == 0)
                 _0x120:
0005d7 9999      	SBIC 0x13,1
0005d8 c007      	RJMP _0x121
                 ;lcd_gotoxy(0, 0);
0005d9 e0e0      	LDI  R30,LOW(0)
0005da 940e 0a09 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 2     ");
                +
0005dc eaa5     +LDI R26 , LOW ( 2 * _0x0 + ( 293 ) )
0005dd e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 293 ) )
                 	__POINTW2FN _0x0,293
0005de 940e 0997 	CALL _lcd_putsf
                 ;if (t3 == 0)
                 _0x121:
0005e0 999a      	SBIC 0x13,2
0005e1 c007      	RJMP _0x122
                 ;lcd_gotoxy(0, 0);
0005e2 e0e0      	LDI  R30,LOW(0)
0005e3 940e 0a09 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 3     ");
                +
0005e5 eba5     +LDI R26 , LOW ( 2 * _0x0 + ( 309 ) )
0005e6 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 309 ) )
                 	__POINTW2FN _0x0,309
0005e7 940e 0997 	CALL _lcd_putsf
                 ;if (t4 == 0)
                 _0x122:
0005e9 999b      	SBIC 0x13,3
0005ea c007      	RJMP _0x123
                 ;lcd_gotoxy(0, 0);
0005eb e0e0      	LDI  R30,LOW(0)
0005ec 940e 0a09 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 4     ");
                +
0005ee eca5     +LDI R26 , LOW ( 2 * _0x0 + ( 325 ) )
0005ef e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 325 ) )
                 	__POINTW2FN _0x0,325
0005f0 940e 0997 	CALL _lcd_putsf
                 _0x123:
0005f2 cfd5      	RJMP _0x11C
                 _0x11E:
0005f3 9508      	RET
                 ; .FEND
                 ;void sens_warna()
                 _sens_warna:
                 ; .FSTART _sens_warna
                 ;lcd_clear();
0005f4 940e 0ab3 	CALL SUBOPT_0x1B
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Sens Warna");
                +
0005f6 efad     +LDI R26 , LOW ( 2 * _0x0 + ( 125 ) )
0005f7 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 125 ) )
                 	__POINTW2FN _0x0,125
0005f8 940e 0ab7 	CALL SUBOPT_0x1C
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Warna:");
                +
0005fa eda5     +LDI R26 , LOW ( 2 * _0x0 + ( 341 ) )
0005fb e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 341 ) )
                 	__POINTW2FN _0x0,341
0005fc 940e 0997 	CALL _lcd_putsf
                 ;isTestTombol = true;
0005fe e0e1      	LDI  R30,LOW(1)
0005ff 93e0 0185 	STS  _isTestTombol,R30
                 ;bawah_lepas();
000601 de75      	RCALL _bawah_lepas
                 ;delay(200);
000602 940e 0af9 	CALL SUBOPT_0x25
                 ;ambil(20);
000604 e1a4      	LDI  R26,LOW(20)
000605 e0b0      	LDI  R27,0
000606 de62      	RCALL _ambil
                 ;while (1)
                 _0x124:
                 ;bacawarna();
000607 de74      	RCALL _bacawarna
                 ;if (!isTestTombol) { lcd_clear(); capit_lepas; changeMenu(0, false); break; }
000608 91e0 0185 	LDS  R30,_isTestTombol
00060a 30e0      	CPI  R30,0
00060b f439      	BRNE _0x127
00060c 940e 094c 	CALL _lcd_clear
00060e eee6      	LDI  R30,LOW(230)
00060f 2ede      	MOV  R13,R30
000610 940e 0ae9 	CALL SUBOPT_0x23
000612 c00a      	RJMP _0x126
                 ;if ((t1 == 0))
                 _0x127:
000613 9998      	SBIC 0x13,0
000614 c007      	RJMP _0x128
                 ;lcd_gotoxy(0, 0);
000615 e0e0      	LDI  R30,LOW(0)
000616 940e 0a09 	CALL SUBOPT_0x3
                 ;lcd_putsf("Exiting...");
                +
000618 edac     +LDI R26 , LOW ( 2 * _0x0 + ( 348 ) )
000619 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 348 ) )
                 	__POINTW2FN _0x0,348
00061a 940e 0af0 	CALL SUBOPT_0x24
                 ;isTestTombol = false;
                 ;delay(500);
                 _0x128:
00061c cfea      	RJMP _0x124
                 _0x126:
00061d 9508      	RET
                 ; .FEND
                 ;void test_capit()
                 _test_capit:
                 ; .FSTART _test_capit
                 ;lcd_clear();
00061e 940e 0ab3 	CALL SUBOPT_0x1B
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Capit");
                +
000620 eea7     +LDI R26 , LOW ( 2 * _0x0 + ( 359 ) )
000621 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 359 ) )
                 	__POINTW2FN _0x0,359
000622 940e 0ab7 	CALL SUBOPT_0x1C
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Capit: > <");
                +
000624 efa2     +LDI R26 , LOW ( 2 * _0x0 + ( 370 ) )
000625 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 370 ) )
                 	__POINTW2FN _0x0,370
000626 940e 0997 	CALL _lcd_putsf
                 ;capit_ambil;
000628 eeed      	LDI  R30,LOW(237)
000629 2ede      	MOV  R13,R30
                 ;delay(500);
00062a efa4      	LDI  R26,LOW(500)
00062b e0b1      	LDI  R27,HIGH(500)
00062c db68      	RCALL _delay
                 ;lcd_gotoxy(0, 1);
00062d e0e0      	LDI  R30,LOW(0)
00062e 940e 0aa2 	CALL SUBOPT_0x19
                 ;lcd_putsf("Capit: < >");
                +
000630 efad     +LDI R26 , LOW ( 2 * _0x0 + ( 381 ) )
000631 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 381 ) )
                 	__POINTW2FN _0x0,381
000632 940e 0997 	CALL _lcd_putsf
                 ;capit_lepas;
000634 eee6      	LDI  R30,LOW(230)
000635 2ede      	MOV  R13,R30
                 ;delay(1000);
000636 940e 0ac5 	CALL SUBOPT_0x1E
                 ;lcd_gotoxy(0, 1);
000638 e0e0      	LDI  R30,LOW(0)
000639 940e 0aa2 	CALL SUBOPT_0x19
                 ;lcd_putsf("Capit: \\/");
                +
00063b e0a8     +LDI R26 , LOW ( 2 * _0x0 + ( 392 ) )
00063c e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 392 ) )
                 	__POINTW2FN _0x0,392
00063d 940e 0997 	CALL _lcd_putsf
                 ;lengan_bawah;
00063f efe0      	LDI  R30,LOW(240)
000640 2ece      	MOV  R12,R30
                 ;delay(1000);
000641 940e 0ac5 	CALL SUBOPT_0x1E
                 ;lcd_gotoxy(0, 1);
000643 e0e0      	LDI  R30,LOW(0)
000644 940e 0aa2 	CALL SUBOPT_0x19
                 ;lcd_putsf("Capit: /\\");
                +
000646 e1a2     +LDI R26 , LOW ( 2 * _0x0 + ( 402 ) )
000647 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 402 ) )
                 	__POINTW2FN _0x0,402
000648 940e 0997 	CALL _lcd_putsf
                 ;lengan_atas;
00064a eeea      	LDI  R30,LOW(234)
00064b 2ece      	MOV  R12,R30
                 ;delay(1000);
00064c 940e 0ac5 	CALL SUBOPT_0x1E
00064e 9508      	RET
                 ; .FEND
                 ;void tepuk_tangan() {
                 ;lcd_clear();
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Hold 1 to exit");
                 ;lcd_gotoxy(0, 0);
                 ;while (1)
                 ;lcd_putsf("XD");
                 ;if(t1 == 0) break;
                 ;capit_lepas;
                 ;if(t1 == 0) break;
                 ;delay(500);
                 ;if(t1 == 0) break;
                 ;capit_ambil;
                 ;if(t1 == 0) break;
                 ;delay(500);
                 ;if(t1 == 0) break;
                 ;void display_map() {
                 _display_map:
                 ; .FSTART _display_map
                 ;cek_sensor();
00064f db96      	RCALL _cek_sensor
                 ;lcd_gotoxy(7, 0);
000650 e0e7      	LDI  R30,LOW(7)
000651 940e 0a09 	CALL SUBOPT_0x3
                 ;sprintf(buff, "%d", mapMirror);
000653 940e 0a0d 	CALL SUBOPT_0x4
                +
000655 e8ec     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
000656 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
000657 93fa      	ST   -Y,R31
000658 93ea      	ST   -Y,R30
000659 e2aa      	LDI  R26,LOW(_mapMirror)
00065a e0b0      	LDI  R27,HIGH(_mapMirror)
00065b 940e 0b93 	CALL __EEPROMRDW
00065d 940e 0b4e 	CALL __CWD1
                 _0x20C0006:
00065f 940e 0b8e 	CALL __PUTPARD1
000661 e084      	LDI  R24,4
000662 940e 0899 	CALL _sprintf
000664 9628      	ADIW R28,8
                 ;lcd_puts(buff);
                 _0x20C0007:
000665 e6a0      	LDI  R26,LOW(_buff)
000666 e0b1      	LDI  R27,HIGH(_buff)
000667 940e 0988 	CALL _lcd_puts
000669 9508      	RET
                 ; .FEND
                 ;void tes_sensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, "sensor:%d = %d  ", i, read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(100);
                 ;void tampil_count()
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", second);
                 ;lcd_puts(buff);
                 ;interrupt[TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0065 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
00066a 93aa      	ST   -Y,R26
00066b 93ea      	ST   -Y,R30
00066c b7ef      	IN   R30,SREG
00066d 93ea      	ST   -Y,R30
                 ; 0000 0066 TCNT0 = 0x96; // BE
00066e e9e6      	LDI  R30,LOW(150)
00066f bfe2      	OUT  0x32,R30
                 ; 0000 0067 a++;
000670 91e0 0181 	LDS  R30,_a
000672 5fef      	SUBI R30,-LOW(1)
000673 93e0 0181 	STS  _a,R30
                 ; 0000 0068 
                 ; 0000 0069 if (a <= pos_servo1)
000675 91a0 0181 	LDS  R26,_a
000677 16da      	CP   R13,R26
000678 f010      	BRLO _0x134
                 ; 0000 006A {
                 ; 0000 006B servo1 = 0;
000679 98ae      	CBI  0x15,6
                 ; 0000 006C }
                 ; 0000 006D else
00067a c001      	RJMP _0x137
                 _0x134:
                 ; 0000 006E {
                 ; 0000 006F servo1 = 1;
00067b 9aae      	SBI  0x15,6
                 ; 0000 0070 }
                 _0x137:
                 ; 0000 0071 if (a <= pos_servo2)
00067c 91a0 0181 	LDS  R26,_a
00067e 16ca      	CP   R12,R26
00067f f010      	BRLO _0x13A
                 ; 0000 0072 {
                 ; 0000 0073 servo2 = 0;
000680 98af      	CBI  0x15,7
                 ; 0000 0074 }
                 ; 0000 0075 else
000681 c001      	RJMP _0x13D
                 _0x13A:
                 ; 0000 0076 {
                 ; 0000 0077 servo2 = 1;
000682 9aaf      	SBI  0x15,7
                 ; 0000 0078 }
                 _0x13D:
                 ; 0000 0079 }
000683 91e9      	LD   R30,Y+
000684 bfef      	OUT  SREG,R30
000685 91e9      	LD   R30,Y+
000686 91a9      	LD   R26,Y+
000687 9518      	RETI
                 ; .FEND
                 ;interrupt[TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 007D {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 007E // Place your code here
                 ; 0000 007F }
000688 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0082 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0083 // Declare your local variables here
                 ; 0000 0084 
                 ; 0000 0085 // Input/Output Ports initialization
                 ; 0000 0086 // Port A initialization
                 ; 0000 0087 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0088 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0089 PORTA=0x00;
000689 e0e0      	LDI  R30,LOW(0)
00068a bbeb      	OUT  0x1B,R30
                 ; 0000 008A DDRA=0x00;
00068b bbea      	OUT  0x1A,R30
                 ; 0000 008B 
                 ; 0000 008C // Port B initialization
                 ; 0000 008D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 008E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 008F PORTB=0x08;
00068c e0e8      	LDI  R30,LOW(8)
00068d bbe8      	OUT  0x18,R30
                 ; 0000 0090 DDRB=0Xff;//0x08;
00068e efef      	LDI  R30,LOW(255)
00068f bbe7      	OUT  0x17,R30
                 ; 0000 0091 
                 ; 0000 0092 // Port C initialization
                 ; 0000 0093 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0094 // State7=T State6=T State5=T State4=T State3=P State2=P State1=P State0=P
                 ; 0000 0095 PORTC=0xFF;
000690 bbe5      	OUT  0x15,R30
                 ; 0000 0096 DDRC=0xF0; //C0
000691 efe0      	LDI  R30,LOW(240)
000692 bbe4      	OUT  0x14,R30
                 ; 0000 0097 
                 ; 0000 0098 // Port D initialization
                 ; 0000 0099 // Func7=In Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 009A // State7=T State6=T State5=0 State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 009B PORTD=0x01;
000693 e0e1      	LDI  R30,LOW(1)
000694 bbe2      	OUT  0x12,R30
                 ; 0000 009C DDRD=0xFE; //3F
000695 efee      	LDI  R30,LOW(254)
000696 bbe1      	OUT  0x11,R30
                 ; 0000 009D 
                 ; 0000 009E // Timer/Counter 0 initialization
                 ; 0000 009F TCCR0=0x4A;
000697 e4ea      	LDI  R30,LOW(74)
000698 bfe3      	OUT  0x33,R30
                 ; 0000 00A0 TCNT0=0x96;
000699 e9e6      	LDI  R30,LOW(150)
00069a bfe2      	OUT  0x32,R30
                 ; 0000 00A1 OCR0=0x00;
00069b e0e0      	LDI  R30,LOW(0)
00069c bfec      	OUT  0x3C,R30
                 ; 0000 00A2 
                 ; 0000 00A3 // Timer/Counter 1 initialization
                 ; 0000 00A4 TCCR1A=0xA1;
00069d eae1      	LDI  R30,LOW(161)
00069e bdef      	OUT  0x2F,R30
                 ; 0000 00A5 TCCR1B=0x09;
00069f e0e9      	LDI  R30,LOW(9)
0006a0 bdee      	OUT  0x2E,R30
                 ; 0000 00A6 TCNT1H=0x00;
0006a1 e0e0      	LDI  R30,LOW(0)
0006a2 bded      	OUT  0x2D,R30
                 ; 0000 00A7 TCNT1L=0x00;
0006a3 bdec      	OUT  0x2C,R30
                 ; 0000 00A8 ICR1H=0x00;
0006a4 bde7      	OUT  0x27,R30
                 ; 0000 00A9 ICR1L=0x00;
0006a5 bde6      	OUT  0x26,R30
                 ; 0000 00AA OCR1AH=0x00;
0006a6 bdeb      	OUT  0x2B,R30
                 ; 0000 00AB OCR1AL=0x00;
0006a7 bdea      	OUT  0x2A,R30
                 ; 0000 00AC OCR1BH=0x00;
0006a8 bde9      	OUT  0x29,R30
                 ; 0000 00AD OCR1BL=0x00;
0006a9 bde8      	OUT  0x28,R30
                 ; 0000 00AE 
                 ; 0000 00AF // Timer/Counter 2 initialization
                 ; 0000 00B0 // Clock source: System Clock
                 ; 0000 00B1 // Clock value: Timer 2 Stopped
                 ; 0000 00B2 // Mode: Normal top=FFh
                 ; 0000 00B3 // OC2 output: Disconnected
                 ; 0000 00B4 ASSR=0x00;
0006aa bde2      	OUT  0x22,R30
                 ; 0000 00B5 TCCR2=0x00;
0006ab bde5      	OUT  0x25,R30
                 ; 0000 00B6 TCNT2=0x00;
0006ac bde4      	OUT  0x24,R30
                 ; 0000 00B7 OCR2=0x00;
0006ad bde3      	OUT  0x23,R30
                 ; 0000 00B8 
                 ; 0000 00B9 // External Interrupt(s) initialization
                 ; 0000 00BA // INT0: Off
                 ; 0000 00BB // INT1: Off
                 ; 0000 00BC // INT2: Off
                 ; 0000 00BD MCUCR=0x00;
0006ae bfe5      	OUT  0x35,R30
                 ; 0000 00BE MCUCSR=0x00;
0006af bfe4      	OUT  0x34,R30
                 ; 0000 00BF 
                 ; 0000 00C0 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00C1 TIMSK=0x03;
0006b0 e0e3      	LDI  R30,LOW(3)
0006b1 bfe9      	OUT  0x39,R30
                 ; 0000 00C2 
                 ; 0000 00C3 // Analog Comparator initialization
                 ; 0000 00C4 // Analog Comparator: Off
                 ; 0000 00C5 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00C6 ACSR=0x80;
0006b2 e8e0      	LDI  R30,LOW(128)
0006b3 b9e8      	OUT  0x8,R30
                 ; 0000 00C7 SFIOR=0x00;
0006b4 e0e0      	LDI  R30,LOW(0)
0006b5 bfe0      	OUT  0x30,R30
                 ; 0000 00C8 
                 ; 0000 00C9 
                 ; 0000 00CA 
                 ; 0000 00CB MCUCR=0x00;
0006b6 bfe5      	OUT  0x35,R30
                 ; 0000 00CC MCUCSR=0x00;
0006b7 bfe4      	OUT  0x34,R30
                 ; 0000 00CD 
                 ; 0000 00CE ////USART, UNTUK KOMUNIKASI BLUETOOTH
                 ; 0000 00CF //UCSRA=0x00;
                 ; 0000 00D0 //UCSRB=0x18;
                 ; 0000 00D1 //UCSRC=0x86;
                 ; 0000 00D2 //UBRRH=0x00;
                 ; 0000 00D3 //UBRRL=0x47;
                 ; 0000 00D4 // USART initialization
                 ; 0000 00D5 // USART disabled
                 ; 0000 00D6 UCSRB=0x00;
0006b8 b9ea      	OUT  0xA,R30
                 ; 0000 00D7 
                 ; 0000 00D8 // ADC initialization
                 ; 0000 00D9 // ADC Clock frequency: 691.200 kHz
                 ; 0000 00DA // ADC Voltage Reference: AVCC pin
                 ; 0000 00DB // ADC Auto Trigger Source: None
                 ; 0000 00DC // Only the 8 most significant bits of
                 ; 0000 00DD // the AD conversion result are used
                 ; 0000 00DE ADMUX=ADC_VREF_TYPE & 0xff;
0006b9 e6e0      	LDI  R30,LOW(96)
0006ba b9e7      	OUT  0x7,R30
                 ; 0000 00DF ADCSRA=0x84;
0006bb e8e4      	LDI  R30,LOW(132)
0006bc b9e6      	OUT  0x6,R30
                 ; 0000 00E0 //ADCSRA=0xA6;
                 ; 0000 00E1 SFIOR&=0x1F;
0006bd b7e0      	IN   R30,0x30
0006be 71ef      	ANDI R30,LOW(0x1F)
0006bf bfe0      	OUT  0x30,R30
                 ; 0000 00E2 
                 ; 0000 00E3 // LCD module initialization
                 ; 0000 00E4 lcd_init(16); //
0006c0 e1a0      	LDI  R26,LOW(16)
0006c1 940e 09bb 	CALL _lcd_init
                 ; 0000 00E5 lcd_clear();  //
0006c3 940e 094c 	CALL _lcd_clear
                 ; 0000 00E6 lampu = 0;    //
0006c5 98c3      	CBI  0x18,3
                 ; 0000 00E7 // k,b
                 ; 0000 00E8 lcd_gotoxy(0, 0);
0006c6 e0e0      	LDI  R30,LOW(0)
0006c7 940e 0a09 	CALL SUBOPT_0x3
                 ; 0000 00E9 lcd_putsf("     LEGION     ");
                +
0006c9 e2ae     +LDI R26 , LOW ( 2 * _0x0 + ( 430 ) )
0006ca e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 430 ) )
                 	__POINTW2FN _0x0,430
0006cb 940e 0ab7 	CALL SUBOPT_0x1C
                 ; 0000 00EA lcd_gotoxy(0, 1);
                 ; 0000 00EB lcd_putsf(" MAN 4 JOMBANG ");
                +
0006cd e3af     +LDI R26 , LOW ( 2 * _0x0 + ( 447 ) )
0006ce e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 447 ) )
                 	__POINTW2FN _0x0,447
0006cf 940e 0997 	CALL _lcd_putsf
                 ; 0000 00EC delay_ms(500);
0006d1 efa4      	LDI  R26,LOW(500)
0006d2 e0b1      	LDI  R27,HIGH(500)
0006d3 940e 0ca7 	CALL _delay_ms
                 ; 0000 00ED lcd_clear();
0006d5 940e 094c 	CALL _lcd_clear
                 ; 0000 00EE 
                 ; 0000 00EF // PROGRAM UTAMA
                 ; 0000 00F0 // Global enable interrupts
                 ; 0000 00F1 #asm("sei")
0006d7 9478      	SEI
                 ; 0000 00F2 lengan_atas;
0006d8 eeea      	LDI  R30,LOW(234)
0006d9 2ece      	MOV  R12,R30
                 ; 0000 00F3 capit_lepas;
0006da eee6      	LDI  R30,LOW(230)
0006db 2ede      	MOV  R13,R30
                 ; 0000 00F4 
                 ; 0000 00F5 /// mapMirror = 0 - map/lintasan bagian biru
                 ; 0000 00F6 /// mapMirror = 1 - map/lintasan bagian merah
                 ; 0000 00F7 if(mapMirror != map_biru && mapMirror != map_merah) mapMirror = map_biru;
0006dc e2aa      	LDI  R26,LOW(_mapMirror)
0006dd e0b0      	LDI  R27,HIGH(_mapMirror)
0006de 940e 0b93 	CALL __EEPROMRDW
0006e0 9730      	SBIW R30,0
0006e1 f021      	BREQ _0x143
0006e2 30e1      	CPI  R30,LOW(0x1)
0006e3 e0a0      	LDI  R26,HIGH(0x1)
0006e4 07fa      	CPC  R31,R26
0006e5 f409      	BRNE _0x144
                 _0x143:
0006e6 c006      	RJMP _0x142
                 _0x144:
0006e7 e2aa      	LDI  R26,LOW(_mapMirror)
0006e8 e0b0      	LDI  R27,HIGH(_mapMirror)
0006e9 e0e0      	LDI  R30,LOW(0)
0006ea e0f0      	LDI  R31,HIGH(0)
0006eb 940e 0ba3 	CALL __EEPROMWRW
                 ; 0000 00F8 
                 ; 0000 00F9 lcd_clear();
                 _0x142:
0006ed 940e 0ab3 	CALL SUBOPT_0x1B
                 ; 0000 00FA lcd_gotoxy(0, 0);
                 ; 0000 00FB lcd_putsf("Menu");
                +
0006ef eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
0006f0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
0006f1 940e 0ab7 	CALL SUBOPT_0x1C
                 ; 0000 00FC lcd_gotoxy(0, 1);
                 ; 0000 00FD lcd_putsf("Calibration");
                +
0006f3 eea9     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
0006f4 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
0006f5 940e 0997 	CALL _lcd_putsf
                 ; 0000 00FE 
                 ; 0000 00FF while(1) {
                 _0x145:
                 ; 0000 0100 if(!isChildSelect) {
0006f7 91e0 0184 	LDS  R30,_isChildSelect
0006f9 30e0      	CPI  R30,0
0006fa f419      	BRNE _0x148
                 ; 0000 0101 display_sensor();
0006fb daed      	RCALL _display_sensor
                 ; 0000 0102 bacawarna();
0006fc dd7f      	RCALL _bacawarna
                 ; 0000 0103 display_map();
0006fd df51      	RCALL _display_map
                 ; 0000 0104 }
                 ; 0000 0105 
                 ; 0000 0106 if((t1 == 0)) {
                 _0x148:
0006fe 9998      	SBIC 0x13,0
0006ff c019      	RJMP _0x149
                 ; 0000 0107 
                 ; 0000 0108 if(!isChildSelect) count_btn ++;
000700 91e0 0184 	LDS  R30,_isChildSelect
000702 30e0      	CPI  R30,0
000703 f421      	BRNE _0x14A
000704 e8a2      	LDI  R26,LOW(_count_btn)
000705 e0b1      	LDI  R27,HIGH(_count_btn)
000706 940e 0afd 	CALL SUBOPT_0x26
                 ; 0000 0109 if(count_btn >= 8) count_btn = 0;
                 _0x14A:
000708 91a0 0182 	LDS  R26,_count_btn
00070a 91b0 0183 	LDS  R27,_count_btn+1
00070c 9718      	SBIW R26,8
00070d f02c      	BRLT _0x14B
00070e e0e0      	LDI  R30,LOW(0)
00070f 93e0 0182 	STS  _count_btn,R30
000711 93e0 0183 	STS  _count_btn+1,R30
                 ; 0000 010A delay(200);
                 _0x14B:
000713 940e 0af9 	CALL SUBOPT_0x25
                 ; 0000 010B changeMenu(count_btn, false);
000715 940e 0b03 	CALL SUBOPT_0x27
000717 e0a0      	LDI  R26,LOW(0)
000718 dd89      	RCALL _changeMenu
                 ; 0000 010C }
                 ; 0000 010D if((t2 == 0)) {
                 _0x149:
000719 9999      	SBIC 0x13,1
00071a c006      	RJMP _0x14C
                 ; 0000 010E changeMenu(count_btn, true);
00071b 940e 0b03 	CALL SUBOPT_0x27
00071d e0a1      	LDI  R26,LOW(1)
00071e dd83      	RCALL _changeMenu
                 ; 0000 010F delay(200);
00071f 940e 0af9 	CALL SUBOPT_0x25
                 ; 0000 0110 }
                 ; 0000 0111 }
                 _0x14C:
000721 cfd5      	RJMP _0x145
                 ; 0000 0112 }
                 _0x14D:
000722 cfff      	RJMP _0x14D
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000723 93ba      	ST   -Y,R27
000724 93aa      	ST   -Y,R26
000725 931a      	ST   -Y,R17
000726 930a      	ST   -Y,R16
000727 81aa      	LDD  R26,Y+2
000728 81bb      	LDD  R27,Y+2+1
000729 9612      	ADIW R26,2
00072a 940e 0b86 	CALL __GETW1P
00072c 9730      	SBIW R30,0
00072d f129      	BREQ _0x2000010
00072e 81aa      	LDD  R26,Y+2
00072f 81bb      	LDD  R27,Y+2+1
000730 9614      	ADIW R26,4
000731 940e 0b86 	CALL __GETW1P
000733 018f      	MOVW R16,R30
000734 9730      	SBIW R30,0
000735 f061      	BREQ _0x2000012
                +
000736 3002     +CPI R16 , LOW ( 2 )
000737 e0e0     +LDI R30 , HIGH ( 2 )
000738 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000739 f080      	BRLO _0x2000013
00073a 01f8      	MOVW R30,R16
00073b 9731      	SBIW R30,1
00073c 018f      	MOVW R16,R30
                +
00073d 81aa     +LDD R26 , Y + 2
00073e 81bb     +LDD R27 , Y + 2 + 1
00073f 9614     +ADIW R26 , 4
000740 93ed     +ST X + , R30
000741 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000742 81aa      	LDD  R26,Y+2
000743 81bb      	LDD  R27,Y+2+1
000744 9612      	ADIW R26,2
000745 940e 0afd 	CALL SUBOPT_0x26
000747 9731      	SBIW R30,1
000748 81ac      	LDD  R26,Y+4
000749 83a0      	STD  Z+0,R26
                 _0x2000013:
00074a 81aa      	LDD  R26,Y+2
00074b 81bb      	LDD  R27,Y+2+1
00074c 940e 0b86 	CALL __GETW1P
00074e 23ff      	TST  R31
00074f f012      	BRMI _0x2000014
000750 940e 0afd 	CALL SUBOPT_0x26
                 _0x2000014:
000752 c006      	RJMP _0x2000015
                 _0x2000010:
000753 81aa      	LDD  R26,Y+2
000754 81bb      	LDD  R27,Y+2+1
000755 efef      	LDI  R30,LOW(65535)
000756 efff      	LDI  R31,HIGH(65535)
000757 93ed      	ST   X+,R30
000758 93fc      	ST   X,R31
                 _0x2000015:
000759 8119      	LDD  R17,Y+1
00075a 8108      	LDD  R16,Y+0
00075b 9625      	ADIW R28,5
00075c 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00075d 93ba      	ST   -Y,R27
00075e 93aa      	ST   -Y,R26
00075f 9726      	SBIW R28,6
000760 940e 0b30 	CALL __SAVELOCR6
000762 e010      	LDI  R17,0
000763 85ac      	LDD  R26,Y+12
000764 85bd      	LDD  R27,Y+12+1
000765 e0e0      	LDI  R30,LOW(0)
000766 e0f0      	LDI  R31,HIGH(0)
000767 93ed      	ST   X+,R30
000768 93fc      	ST   X,R31
                 _0x2000016:
000769 89ea      	LDD  R30,Y+18
00076a 89fb      	LDD  R31,Y+18+1
00076b 9631      	ADIW R30,1
00076c 8bea      	STD  Y+18,R30
00076d 8bfb      	STD  Y+18+1,R31
00076e 9731      	SBIW R30,1
00076f 91e4      	LPM  R30,Z
000770 2f2e      	MOV  R18,R30
000771 30e0      	CPI  R30,0
000772 f409      	BRNE PC+2
000773 c11d      	RJMP _0x2000018
000774 2fe1      	MOV  R30,R17
000775 30e0      	CPI  R30,0
000776 f439      	BRNE _0x200001C
000777 3225      	CPI  R18,37
000778 f411      	BRNE _0x200001D
000779 e011      	LDI  R17,LOW(1)
00077a c002      	RJMP _0x200001E
                 _0x200001D:
00077b 940e 0b0a 	CALL SUBOPT_0x28
                 _0x200001E:
00077d c112      	RJMP _0x200001B
                 _0x200001C:
00077e 30e1      	CPI  R30,LOW(0x1)
00077f f4a9      	BRNE _0x200001F
000780 3225      	CPI  R18,37
000781 f419      	BRNE _0x2000020
000782 940e 0b0a 	CALL SUBOPT_0x28
000784 c10a      	RJMP _0x20000CC
                 _0x2000020:
000785 e012      	LDI  R17,LOW(2)
000786 e040      	LDI  R20,LOW(0)
000787 e000      	LDI  R16,LOW(0)
000788 322d      	CPI  R18,45
000789 f411      	BRNE _0x2000021
00078a e001      	LDI  R16,LOW(1)
00078b c104      	RJMP _0x200001B
                 _0x2000021:
00078c 322b      	CPI  R18,43
00078d f411      	BRNE _0x2000022
00078e e24b      	LDI  R20,LOW(43)
00078f c100      	RJMP _0x200001B
                 _0x2000022:
000790 3220      	CPI  R18,32
000791 f411      	BRNE _0x2000023
000792 e240      	LDI  R20,LOW(32)
000793 c0fc      	RJMP _0x200001B
                 _0x2000023:
000794 c002      	RJMP _0x2000024
                 _0x200001F:
000795 30e2      	CPI  R30,LOW(0x2)
000796 f439      	BRNE _0x2000025
                 _0x2000024:
000797 e050      	LDI  R21,LOW(0)
000798 e013      	LDI  R17,LOW(3)
000799 3320      	CPI  R18,48
00079a f411      	BRNE _0x2000026
00079b 6800      	ORI  R16,LOW(128)
00079c c0f3      	RJMP _0x200001B
                 _0x2000026:
00079d c003      	RJMP _0x2000027
                 _0x2000025:
00079e 30e3      	CPI  R30,LOW(0x3)
00079f f009      	BREQ PC+2
0007a0 c0ef      	RJMP _0x200001B
                 _0x2000027:
0007a1 3320      	CPI  R18,48
0007a2 f010      	BRLO _0x200002A
0007a3 332a      	CPI  R18,58
0007a4 f008      	BRLO _0x200002B
                 _0x200002A:
0007a5 c007      	RJMP _0x2000029
                 _0x200002B:
0007a6 e0aa      	LDI  R26,LOW(10)
0007a7 9f5a      	MUL  R21,R26
0007a8 2d50      	MOV  R21,R0
0007a9 2fe2      	MOV  R30,R18
0007aa 53e0      	SUBI R30,LOW(48)
0007ab 0f5e      	ADD  R21,R30
0007ac c0e3      	RJMP _0x200001B
                 _0x2000029:
0007ad 2fe2      	MOV  R30,R18
0007ae 36e3      	CPI  R30,LOW(0x63)
0007af f449      	BRNE _0x200002F
0007b0 940e 0b11 	CALL SUBOPT_0x29
0007b2 89e8      	LDD  R30,Y+16
0007b3 89f9      	LDD  R31,Y+16+1
0007b4 81a4      	LDD  R26,Z+4
0007b5 93aa      	ST   -Y,R26
0007b6 940e 0b17 	CALL SUBOPT_0x2A
0007b8 c0d6      	RJMP _0x2000030
                 _0x200002F:
0007b9 37e3      	CPI  R30,LOW(0x73)
0007ba f441      	BRNE _0x2000032
0007bb 940e 0b11 	CALL SUBOPT_0x29
0007bd 940e 0b1d 	CALL SUBOPT_0x2B
0007bf 940e 08d5 	CALL _strlen
0007c1 2f1e      	MOV  R17,R30
0007c2 c00a      	RJMP _0x2000033
                 _0x2000032:
0007c3 37e0      	CPI  R30,LOW(0x70)
0007c4 f461      	BRNE _0x2000035
0007c5 940e 0b11 	CALL SUBOPT_0x29
0007c7 940e 0b1d 	CALL SUBOPT_0x2B
0007c9 940e 08e1 	CALL _strlenf
0007cb 2f1e      	MOV  R17,R30
0007cc 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0007cd 6002      	ORI  R16,LOW(2)
0007ce 770f      	ANDI R16,LOW(127)
0007cf e030      	LDI  R19,LOW(0)
0007d0 c03c      	RJMP _0x2000036
                 _0x2000035:
0007d1 36e4      	CPI  R30,LOW(0x64)
0007d2 f011      	BREQ _0x2000039
0007d3 36e9      	CPI  R30,LOW(0x69)
0007d4 f411      	BRNE _0x200003A
                 _0x2000039:
0007d5 6004      	ORI  R16,LOW(4)
0007d6 c002      	RJMP _0x200003B
                 _0x200003A:
0007d7 37e5      	CPI  R30,LOW(0x75)
0007d8 f431      	BRNE _0x200003C
                 _0x200003B:
0007d9 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0007da e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0007db 83ee      	STD  Y+6,R30
0007dc 83ff      	STD  Y+6+1,R31
0007dd e015      	LDI  R17,LOW(5)
0007de c00c      	RJMP _0x200003D
                 _0x200003C:
0007df 35e8      	CPI  R30,LOW(0x58)
0007e0 f411      	BRNE _0x200003F
0007e1 6008      	ORI  R16,LOW(8)
0007e2 c003      	RJMP _0x2000040
                 _0x200003F:
0007e3 37e8      	CPI  R30,LOW(0x78)
0007e4 f009      	BREQ PC+2
0007e5 c0a9      	RJMP _0x2000071
                 _0x2000040:
0007e6 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0007e7 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0007e8 83ee      	STD  Y+6,R30
0007e9 83ff      	STD  Y+6+1,R31
0007ea e014      	LDI  R17,LOW(4)
                 _0x200003D:
0007eb ff02      	SBRS R16,2
0007ec c017      	RJMP _0x2000042
0007ed 940e 0b11 	CALL SUBOPT_0x29
0007ef 89a8      	LDD  R26,Y+16
0007f0 89b9      	LDD  R27,Y+16+1
0007f1 9614      	ADIW R26,4
0007f2 91ed      	LD   R30,X+
0007f3 91fd      	LD   R31,X+
0007f4 87ea      	STD  Y+10,R30
0007f5 87fb      	STD  Y+10+1,R31
0007f6 85ab      	LDD  R26,Y+11
0007f7 23aa      	TST  R26
0007f8 f42a      	BRPL _0x2000043
0007f9 940e 0b42 	CALL __ANEGW1
0007fb 87ea      	STD  Y+10,R30
0007fc 87fb      	STD  Y+10+1,R31
0007fd e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0007fe 3040      	CPI  R20,0
0007ff f011      	BREQ _0x2000044
000800 5f1f      	SUBI R17,-LOW(1)
000801 c001      	RJMP _0x2000045
                 _0x2000044:
000802 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000803 c009      	RJMP _0x2000046
                 _0x2000042:
000804 940e 0b11 	CALL SUBOPT_0x29
000806 89a8      	LDD  R26,Y+16
000807 89b9      	LDD  R27,Y+16+1
000808 9614      	ADIW R26,4
000809 940e 0b86 	CALL __GETW1P
00080b 87ea      	STD  Y+10,R30
00080c 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
00080d fd00      	SBRC R16,0
00080e c011      	RJMP _0x2000047
                 _0x2000048:
00080f 1715      	CP   R17,R21
000810 f478      	BRSH _0x200004A
000811 ff07      	SBRS R16,7
000812 c008      	RJMP _0x200004B
000813 ff02      	SBRS R16,2
000814 c004      	RJMP _0x200004C
000815 7f0b      	ANDI R16,LOW(251)
000816 2f24      	MOV  R18,R20
000817 5011      	SUBI R17,LOW(1)
000818 c001      	RJMP _0x200004D
                 _0x200004C:
000819 e320      	LDI  R18,LOW(48)
                 _0x200004D:
00081a c001      	RJMP _0x200004E
                 _0x200004B:
00081b e220      	LDI  R18,LOW(32)
                 _0x200004E:
00081c 940e 0b0a 	CALL SUBOPT_0x28
00081e 5051      	SUBI R21,LOW(1)
00081f cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000820 2f31      	MOV  R19,R17
000821 ff01      	SBRS R16,1
000822 c017      	RJMP _0x200004F
                 _0x2000050:
000823 3030      	CPI  R19,0
000824 f0a1      	BREQ _0x2000052
000825 ff03      	SBRS R16,3
000826 c006      	RJMP _0x2000053
000827 81ee      	LDD  R30,Y+6
000828 81ff      	LDD  R31,Y+6+1
000829 9125      	LPM  R18,Z+
00082a 83ee      	STD  Y+6,R30
00082b 83ff      	STD  Y+6+1,R31
00082c c005      	RJMP _0x2000054
                 _0x2000053:
00082d 81ae      	LDD  R26,Y+6
00082e 81bf      	LDD  R27,Y+6+1
00082f 912d      	LD   R18,X+
000830 83ae      	STD  Y+6,R26
000831 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000832 940e 0b0a 	CALL SUBOPT_0x28
000834 3050      	CPI  R21,0
000835 f009      	BREQ _0x2000055
000836 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000837 5031      	SUBI R19,LOW(1)
000838 cfea      	RJMP _0x2000050
                 _0x2000052:
000839 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00083a e320      	LDI  R18,LOW(48)
00083b 81ee      	LDD  R30,Y+6
00083c 81ff      	LDD  R31,Y+6+1
00083d 940e 0b8a 	CALL __GETW1PF
00083f 87e8      	STD  Y+8,R30
000840 87f9      	STD  Y+8+1,R31
000841 81ee      	LDD  R30,Y+6
000842 81ff      	LDD  R31,Y+6+1
000843 9632      	ADIW R30,2
000844 83ee      	STD  Y+6,R30
000845 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000846 85e8      	LDD  R30,Y+8
000847 85f9      	LDD  R31,Y+8+1
000848 85aa      	LDD  R26,Y+10
000849 85bb      	LDD  R27,Y+10+1
00084a 17ae      	CP   R26,R30
00084b 07bf      	CPC  R27,R31
00084c f050      	BRLO _0x200005C
00084d 5f2f      	SUBI R18,-LOW(1)
00084e 85a8      	LDD  R26,Y+8
00084f 85b9      	LDD  R27,Y+8+1
000850 85ea      	LDD  R30,Y+10
000851 85fb      	LDD  R31,Y+10+1
000852 1bea      	SUB  R30,R26
000853 0bfb      	SBC  R31,R27
000854 87ea      	STD  Y+10,R30
000855 87fb      	STD  Y+10+1,R31
000856 cfef      	RJMP _0x200005A
                 _0x200005C:
000857 332a      	CPI  R18,58
000858 f028      	BRLO _0x200005D
000859 ff03      	SBRS R16,3
00085a c002      	RJMP _0x200005E
00085b 5f29      	SUBI R18,-LOW(7)
00085c c001      	RJMP _0x200005F
                 _0x200005E:
00085d 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00085e fd04      	SBRC R16,4
00085f c01a      	RJMP _0x2000061
000860 3321      	CPI  R18,49
000861 f420      	BRSH _0x2000063
000862 85a8      	LDD  R26,Y+8
000863 85b9      	LDD  R27,Y+8+1
000864 9711      	SBIW R26,1
000865 f409      	BRNE _0x2000062
                 _0x2000063:
000866 c009      	RJMP _0x20000CD
                 _0x2000062:
000867 1753      	CP   R21,R19
000868 f010      	BRLO _0x2000067
000869 ff00      	SBRS R16,0
00086a c001      	RJMP _0x2000068
                 _0x2000067:
00086b c013      	RJMP _0x2000066
                 _0x2000068:
00086c e220      	LDI  R18,LOW(32)
00086d ff07      	SBRS R16,7
00086e c00b      	RJMP _0x2000069
00086f e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000870 6100      	ORI  R16,LOW(16)
000871 ff02      	SBRS R16,2
000872 c007      	RJMP _0x200006A
000873 7f0b      	ANDI R16,LOW(251)
000874 934a      	ST   -Y,R20
000875 940e 0b17 	CALL SUBOPT_0x2A
000877 3050      	CPI  R21,0
000878 f009      	BREQ _0x200006B
000879 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00087a 940e 0b0a 	CALL SUBOPT_0x28
00087c 3050      	CPI  R21,0
00087d f009      	BREQ _0x200006C
00087e 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00087f 5031      	SUBI R19,LOW(1)
000880 85a8      	LDD  R26,Y+8
000881 85b9      	LDD  R27,Y+8+1
000882 9712      	SBIW R26,2
000883 f008      	BRLO _0x2000059
000884 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000885 ff00      	SBRS R16,0
000886 c008      	RJMP _0x200006D
                 _0x200006E:
000887 3050      	CPI  R21,0
000888 f031      	BREQ _0x2000070
000889 5051      	SUBI R21,LOW(1)
00088a e2e0      	LDI  R30,LOW(32)
00088b 93ea      	ST   -Y,R30
00088c 940e 0b17 	CALL SUBOPT_0x2A
00088e cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
00088f e010      	LDI  R17,LOW(0)
                 _0x200001B:
000890 ced8      	RJMP _0x2000016
                 _0x2000018:
000891 85ac      	LDD  R26,Y+12
000892 85bd      	LDD  R27,Y+12+1
000893 91ed      	LD   R30,X+
000894 91fd      	LD   R31,X+
000895 940e 0b37 	CALL __LOADLOCR6
000897 9664      	ADIW R28,20
000898 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000899 92ff      	PUSH R15
00089a 2ef8      	MOV  R15,R24
00089b 9726      	SBIW R28,6
00089c 940e 0b32 	CALL __SAVELOCR4
00089e 01de      	MOVW R26,R28
00089f 961c      	ADIW R26,12
0008a0 940e 0b3e 	CALL __ADDW2R15
0008a2 940e 0b86 	CALL __GETW1P
0008a4 9730      	SBIW R30,0
0008a5 f419      	BRNE _0x2000072
0008a6 efef      	LDI  R30,LOW(65535)
0008a7 efff      	LDI  R31,HIGH(65535)
0008a8 c027      	RJMP _0x20C0005
                 _0x2000072:
0008a9 01de      	MOVW R26,R28
0008aa 9616      	ADIW R26,6
0008ab 940e 0b3e 	CALL __ADDW2R15
0008ad 018d      	MOVW R16,R26
0008ae 01de      	MOVW R26,R28
0008af 961c      	ADIW R26,12
0008b0 940e 0b3e 	CALL __ADDW2R15
0008b2 91ed      	LD   R30,X+
0008b3 91fd      	LD   R31,X+
0008b4 83ee      	STD  Y+6,R30
0008b5 83ff      	STD  Y+6+1,R31
0008b6 e0e0      	LDI  R30,LOW(0)
0008b7 87e8      	STD  Y+8,R30
0008b8 87e9      	STD  Y+8+1,R30
0008b9 01de      	MOVW R26,R28
0008ba 961a      	ADIW R26,10
0008bb 940e 0b3e 	CALL __ADDW2R15
0008bd 91ed      	LD   R30,X+
0008be 91fd      	LD   R31,X+
0008bf 93fa      	ST   -Y,R31
0008c0 93ea      	ST   -Y,R30
0008c1 931a      	ST   -Y,R17
0008c2 930a      	ST   -Y,R16
0008c3 e2e3      	LDI  R30,LOW(_put_buff_G100)
0008c4 e0f7      	LDI  R31,HIGH(_put_buff_G100)
0008c5 93fa      	ST   -Y,R31
0008c6 93ea      	ST   -Y,R30
0008c7 01de      	MOVW R26,R28
0008c8 961a      	ADIW R26,10
0008c9 de93      	RCALL __print_G100
0008ca 019f      	MOVW R18,R30
0008cb 81ae      	LDD  R26,Y+6
0008cc 81bf      	LDD  R27,Y+6+1
0008cd e0e0      	LDI  R30,LOW(0)
0008ce 93ec      	ST   X,R30
0008cf 01f9      	MOVW R30,R18
                 _0x20C0005:
0008d0 940e 0b39 	CALL __LOADLOCR4
0008d2 962a      	ADIW R28,10
0008d3 90ff      	POP  R15
0008d4 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0008d5 93ba      	ST   -Y,R27
0008d6 93aa      	ST   -Y,R26
0008d7 91a9          ld   r26,y+
0008d8 91b9          ld   r27,y+
0008d9 27ee          clr  r30
0008da 27ff          clr  r31
                 strlen0:
0008db 916d          ld   r22,x+
0008dc 2366          tst  r22
0008dd f011          breq strlen1
0008de 9631          adiw r30,1
0008df cffb          rjmp strlen0
                 strlen1:
0008e0 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0008e1 93ba      	ST   -Y,R27
0008e2 93aa      	ST   -Y,R26
0008e3 27aa          clr  r26
0008e4 27bb          clr  r27
0008e5 91e9          ld   r30,y+
0008e6 91f9          ld   r31,y+
                 strlenf0:
0008e7 9005      	lpm  r0,z+
0008e8 2000          tst  r0
0008e9 f011          breq strlenf1
0008ea 9611          adiw r26,1
0008eb cffb          rjmp strlenf0
                 strlenf1:
0008ec 01fd          movw r30,r26
0008ed 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _abs:
                 ; .FSTART _abs
0008ee 93ba      	ST   -Y,R27
0008ef 93aa      	ST   -Y,R26
0008f0 91e9          ld   r30,y+
0008f1 91f9          ld   r31,y+
0008f2 9730          sbiw r30,0
0008f3 f41a          brpl __abs0
0008f4 95e0          com  r30
0008f5 95f0          com  r31
0008f6 9631          adiw r30,1
                 __abs0:
0008f7 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G103:
                 ; .FSTART __lcd_delay_G103
0008f8 e0ff          ldi   r31,15
                 __lcd_delay0:
0008f9 95fa          dec   r31
0008fa f7f1          brne  __lcd_delay0
0008fb 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
0008fc b3a7          in    r26,__lcd_direction
0008fd 70af          andi  r26,0xf                 ;set as input
0008fe bba7          out   __lcd_direction,r26
0008ff 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000900 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000901 dff6      	RCALL __lcd_delay_G103
000902 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000903 dff4      	RCALL __lcd_delay_G103
000904 b3a6          in    r26,__lcd_pin
000905 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000906 dff1      	RCALL __lcd_delay_G103
000907 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000908 dfef      	RCALL __lcd_delay_G103
000909 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
00090a fda7          sbrc  r26,__lcd_busy_flag
00090b cff5          rjmp  __lcd_busy
00090c 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
00090d 7fa0          andi  r26,0xf0
00090e 2bab          or    r26,r27
00090f bba8          out   __lcd_port,r26          ;write
000910 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000911 940e 08f8 	CALL __lcd_delay_G103
000913 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000914 940e 08f8 	CALL __lcd_delay_G103
000916 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000917 93aa      	ST   -Y,R26
000918 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000919 b3a7          in    r26,__lcd_direction
00091a 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
00091b bba7          out   __lcd_direction,r26
00091c b3b8          in    r27,__lcd_port
00091d 70bf          andi  r27,0xf
00091e 81a8          ld    r26,y
00091f dfed      	RCALL __lcd_write_nibble_G103
000920 81a8          ld    r26,y
000921 95a2          swap  r26
000922 dfea      	RCALL __lcd_write_nibble_G103
000923 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000924 940c 09ed 	JMP  _0x20C0001
                 ; .FEND
                 __lcd_read_nibble_G103:
                 ; .FSTART __lcd_read_nibble_G103
000926 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000927 940e 08f8 	CALL __lcd_delay_G103
000929 b3e6          in    r30,__lcd_pin           ;read
00092a 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
00092b 940e 08f8 	CALL __lcd_delay_G103
00092d 7fe0          andi  r30,0xf0
00092e 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G103:
                 ; .FSTART _lcd_read_byte0_G103
00092f 940e 08f8 	CALL __lcd_delay_G103
000931 dff4      	RCALL __lcd_read_nibble_G103
000932 2fae          mov   r26,r30
000933 dff2      	RCALL __lcd_read_nibble_G103
000934 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
000935 95e2          swap  r30
000936 2bea          or    r30,r26
000937 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000938 93aa      	ST   -Y,R26
000939 940e 08fc 	CALL __lcd_ready
00093b 81e8      	LD   R30,Y
00093c e0f0      	LDI  R31,0
00093d 54ef      	SUBI R30,LOW(-__base_y_G103)
00093e 4ffe      	SBCI R31,HIGH(-__base_y_G103)
00093f 81e0      	LD   R30,Z
000940 81a9      	LDD  R26,Y+1
000941 0fae      	ADD  R26,R30
000942 940e 0917 	CALL __lcd_write_data
000944 81e9      	LDD  R30,Y+1
000945 93e0 01b5 	STS  __lcd_x,R30
000947 81e8      	LD   R30,Y
000948 93e0 01b6 	STS  __lcd_y,R30
                 _0x20C0004:
00094a 9622      	ADIW R28,2
00094b 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00094c 940e 08fc 	CALL __lcd_ready
00094e e0a2      	LDI  R26,LOW(2)
00094f 940e 0917 	CALL __lcd_write_data
000951 940e 08fc 	CALL __lcd_ready
000953 e0ac      	LDI  R26,LOW(12)
000954 940e 0917 	CALL __lcd_write_data
000956 940e 08fc 	CALL __lcd_ready
000958 e0a1      	LDI  R26,LOW(1)
000959 940e 0917 	CALL __lcd_write_data
00095b e0e0      	LDI  R30,LOW(0)
00095c 93e0 01b6 	STS  __lcd_y,R30
00095e 93e0 01b5 	STS  __lcd_x,R30
000960 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000961 93aa      	ST   -Y,R26
000962 93ef          push r30
000963 93ff          push r31
000964 81a8          ld   r26,y
000965 9468          set
000966 30aa          cpi  r26,10
000967 f039          breq __lcd_putchar1
000968 94e8          clt
000969 91e0 01b7 	LDS  R30,__lcd_maxx
00096b 91a0 01b5 	LDS  R26,__lcd_x
00096d 17ae      	CP   R26,R30
00096e f058      	BRLO _0x2060004
                 	__lcd_putchar1:
00096f 91e0 01b6 	LDS  R30,__lcd_y
000971 5fef      	SUBI R30,-LOW(1)
000972 93e0 01b6 	STS  __lcd_y,R30
000974 e0e0      	LDI  R30,LOW(0)
000975 93ea      	ST   -Y,R30
000976 91a0 01b6 	LDS  R26,__lcd_y
000978 dfbf      	RCALL _lcd_gotoxy
000979 f056      	brts __lcd_putchar0
                 _0x2060004:
00097a 91e0 01b5 	LDS  R30,__lcd_x
00097c 5fef      	SUBI R30,-LOW(1)
00097d 93e0 01b5 	STS  __lcd_x,R30
00097f df7c          rcall __lcd_ready
000980 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
000981 81a8      	LD   R26,Y
000982 940e 0917 	CALL __lcd_write_data
                 __lcd_putchar0:
000984 91ff          pop  r31
000985 91ef          pop  r30
000986 940c 09ed 	JMP  _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000988 93ba      	ST   -Y,R27
000989 93aa      	ST   -Y,R26
00098a 931a      	ST   -Y,R17
                 _0x2060005:
00098b 81a9      	LDD  R26,Y+1
00098c 81ba      	LDD  R27,Y+1+1
00098d 91ed      	LD   R30,X+
00098e 83a9      	STD  Y+1,R26
00098f 83ba      	STD  Y+1+1,R27
000990 2f1e      	MOV  R17,R30
000991 30e0      	CPI  R30,0
000992 f019      	BREQ _0x2060007
000993 2fa1      	MOV  R26,R17
000994 dfcc      	RCALL _lcd_putchar
000995 cff5      	RJMP _0x2060005
                 _0x2060007:
000996 c010      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000997 93ba      	ST   -Y,R27
000998 93aa      	ST   -Y,R26
000999 931a      	ST   -Y,R17
                 _0x2060008:
00099a 81e9      	LDD  R30,Y+1
00099b 81fa      	LDD  R31,Y+1+1
00099c 9631      	ADIW R30,1
00099d 83e9      	STD  Y+1,R30
00099e 83fa      	STD  Y+1+1,R31
00099f 9731      	SBIW R30,1
0009a0 91e4      	LPM  R30,Z
0009a1 2f1e      	MOV  R17,R30
0009a2 30e0      	CPI  R30,0
0009a3 f019      	BREQ _0x206000A
0009a4 2fa1      	MOV  R26,R17
0009a5 dfbb      	RCALL _lcd_putchar
0009a6 cff3      	RJMP _0x2060008
                 _0x206000A:
                 _0x20C0002:
0009a7 8118      	LDD  R17,Y+0
                 _0x20C0003:
0009a8 9623      	ADIW R28,3
0009a9 9508      	RET
                 ; .FEND
                 __long_delay_G103:
                 ; .FSTART __long_delay_G103
0009aa 27aa          clr   r26
0009ab 27bb          clr   r27
                 __long_delay0:
0009ac 9711          sbiw  r26,1         ;2 cycles
0009ad f7f1          brne  __long_delay0 ;2 cycles
0009ae 9508      	RET
                 ; .FEND
                 __lcd_init_write_G103:
                 ; .FSTART __lcd_init_write_G103
0009af 93aa      	ST   -Y,R26
0009b0 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0009b1 b3a7          in    r26,__lcd_direction
0009b2 6fa7          ori   r26,0xf7                ;set as output
0009b3 bba7          out   __lcd_direction,r26
0009b4 b3b8          in    r27,__lcd_port
0009b5 70bf          andi  r27,0xf
0009b6 81a8          ld    r26,y
0009b7 940e 090d 	CALL __lcd_write_nibble_G103
0009b9 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
0009ba c032      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0009bb 93aa      	ST   -Y,R26
0009bc 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0009bd 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
0009be 81e8      	LD   R30,Y
0009bf 93e0 01b7 	STS  __lcd_maxx,R30
0009c1 58e0      	SUBI R30,-LOW(128)
                +
0009c2 93e0 01b3+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
0009c4 81e8      	LD   R30,Y
0009c5 54e0      	SUBI R30,-LOW(192)
                +
0009c6 93e0 01b4+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
0009c8 940e 0b27 	CALL SUBOPT_0x2C
0009ca 940e 0b27 	CALL SUBOPT_0x2C
0009cc 940e 0b27 	CALL SUBOPT_0x2C
0009ce dfdb      	RCALL __long_delay_G103
0009cf e2a0      	LDI  R26,LOW(32)
0009d0 dfde      	RCALL __lcd_init_write_G103
0009d1 dfd8      	RCALL __long_delay_G103
0009d2 e2a8      	LDI  R26,LOW(40)
0009d3 940e 0b2c 	CALL SUBOPT_0x2D
0009d5 e0a4      	LDI  R26,LOW(4)
0009d6 940e 0b2c 	CALL SUBOPT_0x2D
0009d8 e8a5      	LDI  R26,LOW(133)
0009d9 940e 0b2c 	CALL SUBOPT_0x2D
0009db b3a7          in    r26,__lcd_direction
0009dc 70af          andi  r26,0xf                 ;set as input
0009dd bba7          out   __lcd_direction,r26
0009de 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
0009df 940e 092f 	CALL _lcd_read_byte0_G103
0009e1 30e5      	CPI  R30,LOW(0x5)
0009e2 f011      	BREQ _0x206000B
0009e3 e0e0      	LDI  R30,LOW(0)
0009e4 c008      	RJMP _0x20C0001
                 _0x206000B:
0009e5 940e 08fc 	CALL __lcd_ready
0009e7 e0a6      	LDI  R26,LOW(6)
0009e8 940e 0917 	CALL __lcd_write_data
0009ea 940e 094c 	CALL _lcd_clear
0009ec e0e1      	LDI  R30,LOW(1)
                 _0x20C0001:
0009ed 9621      	ADIW R28,1
0009ee 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _buff:
000160           	.BYTE 0x21
                 _a:
000181           	.BYTE 0x1
                 _count_btn:
000182           	.BYTE 0x2
                 _isChildSelect:
000184           	.BYTE 0x1
                 _isTestTombol:
000185           	.BYTE 0x1
                 
                 	.ESEG
                 _garis:
000000           	.BYTE 0xE
                 _back:
00000e           	.BYTE 0xE
                 _tengah:
00001c           	.BYTE 0xE
                 
                 	.DSEG
                 _sen:
000186           	.BYTE 0x7
                 _sensor:
00018d           	.BYTE 0x2
                 _error:
00018f           	.BYTE 0x2
                 _lastError:
000191           	.BYTE 0x2
                 _kp:
000193           	.BYTE 0x2
                 _kd:
000195           	.BYTE 0x2
                 _SPEED:
000197           	.BYTE 0x2
                 _MIN_SPEED:
000199           	.BYTE 0x2
                 _MAX_SPEED:
00019b           	.BYTE 0x2
                 _count:
00019d           	.BYTE 0x2
                 _second:
00019f           	.BYTE 0x2
                 
                 	.ESEG
                 _mapMirror:
00002a           	.BYTE 0x2
                 
                 	.DSEG
                 _maxHijau:
0001a1           	.BYTE 0x2
                 _maxKuning:
0001a3           	.BYTE 0x2
                 _maxMerah:
0001a5           	.BYTE 0x2
                 _minHijau:
0001a7           	.BYTE 0x2
                 _minKuning:
0001a9           	.BYTE 0x2
                 _minMerah:
0001ab           	.BYTE 0x2
                 __seed_G102:
0001ad           	.BYTE 0x4
                 __base_y_G103:
0001b1           	.BYTE 0x4
                 __lcd_x:
0001b5           	.BYTE 0x1
                 __lcd_y:
0001b6           	.BYTE 0x1
                 __lcd_maxx:
0001b7           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0009ef e0e7      	LDI  R30,LOW(7)
0009f0 e0f0      	LDI  R31,HIGH(7)
0009f1 168e      	CP   R8,R30
0009f2 069f      	CPC  R9,R31
0009f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
0009f4 2da8      	MOV  R26,R8
0009f5 940e 018a 	CALL _read_adc
0009f7 2e0e      	MOV  R0,R30
0009f8 01f4      	MOVW R30,R8
0009f9 e1ac      	LDI  R26,LOW(_tengah)
0009fa e0b0      	LDI  R27,HIGH(_tengah)
0009fb 0fee      	LSL  R30
0009fc 1fff      	ROL  R31
0009fd 0fae      	ADD  R26,R30
0009fe 1fbf      	ADC  R27,R31
0009ff 940e 0b93 	CALL __EEPROMRDW
000a01 2da0      	MOV  R26,R0
000a02 e0b0      	LDI  R27,0
000a03 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000a04 9fea      	MUL  R30,R26
000a05 01f0      	MOVW R30,R0
                +
000a06 0f6e     +ADD R22 , R30
000a07 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
000a08 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x3:
000a09 93ea      	ST   -Y,R30
000a0a e0a0      	LDI  R26,LOW(0)
000a0b 940c 0938 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
000a0d e6e0      	LDI  R30,LOW(_buff)
000a0e e0f1      	LDI  R31,HIGH(_buff)
000a0f 93fa      	ST   -Y,R31
000a10 93ea      	ST   -Y,R30
000a11 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x5:
000a12 27ff      	CLR  R31
000a13 2766      	CLR  R22
000a14 2777      	CLR  R23
000a15 940e 0b8e 	CALL __PUTPARD1
000a17 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000a18 01f4      	MOVW R30,R8
000a19 e0a0      	LDI  R26,LOW(_garis)
000a1a e0b0      	LDI  R27,HIGH(_garis)
000a1b 0fee      	LSL  R30
000a1c 1fff      	ROL  R31
000a1d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000a1e e0f0      	LDI  R31,0
000a1f 940e 0ba3 	CALL __EEPROMWRW
000a21 e0e0      	LDI  R30,LOW(0)
000a22 cfe6      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8:
000a23 940e 0997 	CALL _lcd_putsf
000a25 e0e0      	LDI  R30,LOW(0)
000a26 93ea      	ST   -Y,R30
000a27 e0a1      	LDI  R26,LOW(1)
000a28 940e 0938 	CALL _lcd_gotoxy
000a2a cfe2      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
                +
000a2b e9e9     +LDI R30 , LOW ( 2 * _0x0 + ( 25 ) )
000a2c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW1FN _0x0,25
000a2d 93fa      	ST   -Y,R31
000a2e 93ea      	ST   -Y,R30
000a2f 01f4      	MOVW R30,R8
000a30 940e 0b4e 	CALL __CWD1
000a32 940e 0b8e 	CALL __PUTPARD1
000a34 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xA:
000a35 0fae      	ADD  R26,R30
000a36 1fbf      	ADC  R27,R31
000a37 940e 0b93 	CALL __EEPROMRDW
000a39 940e 0b4e 	CALL __CWD1
000a3b 940e 0b8e 	CALL __PUTPARD1
000a3d e088      	LDI  R24,8
000a3e 940e 0899 	CALL _sprintf
000a40 962c      	ADIW R28,12
000a41 e6a0      	LDI  R26,LOW(_buff)
000a42 e0b1      	LDI  R27,HIGH(_buff)
000a43 940e 0988 	CALL _lcd_puts
000a45 98c3      	CBI  0x18,3
000a46 e6a4      	LDI  R26,LOW(100)
000a47 e0b0      	LDI  R27,0
000a48 940e 0ca7 	CALL _delay_ms
000a4a 9ac3      	SBI  0x18,3
000a4b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000a4c 01f4      	MOVW R30,R8
000a4d e0ae      	LDI  R26,LOW(_back)
000a4e e0b0      	LDI  R27,HIGH(_back)
000a4f 0fee      	LSL  R30
000a50 1fff      	ROL  R31
000a51 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000a52 0fae      	ADD  R26,R30
000a53 1fbf      	ADC  R27,R31
000a54 940e 0b93 	CALL __EEPROMRDW
000a56 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
000a57 93aa      	ST   -Y,R26
000a58 81e8      	LD   R30,Y
000a59 e0f0      	LDI  R31,0
000a5a bdf9      	OUT  0x28+1,R31
000a5b bde8      	OUT  0x28,R30
000a5c 81e9      	LDD  R30,Y+1
000a5d e0f0      	LDI  R31,0
000a5e bdfb      	OUT  0x2A+1,R31
000a5f bdea      	OUT  0x2A,R30
000a60 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000a61 81a8      	LD   R26,Y
000a62 81b9      	LDD  R27,Y+1
000a63 940e 0bbc 	CALL __CPW02
000a65 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xF:
000a66 81e8      	LD   R30,Y
000a67 81f9      	LDD  R31,Y+1
000a68 940e 0b4e 	CALL __CWD1
000a6a 940e 0c2c 	CALL __CDF1
000a6c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000a6d 940e 0bf5 	CALL __CFD1
000a6f 93ed      	ST   X+,R30
000a70 93fc      	ST   X,R31
000a71 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
000a72 91e0 018d 	LDS  R30,_sensor
000a74 91f0 018e 	LDS  R31,_sensor+1
000a76 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
000a77 91e0 019b 	LDS  R30,_MAX_SPEED
000a79 91f0 019c 	LDS  R31,_MAX_SPEED+1
000a7b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000a7c 91e0 0199 	LDS  R30,_MIN_SPEED
000a7e 91f0 019a 	LDS  R31,_MIN_SPEED+1
000a80 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000a81 dff0      	RCALL SUBOPT_0x11
000a82 71ec      	ANDI R30,LOW(0x1C)
000a83 31ec      	CPI  R30,LOW(0x1C)
000a84 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x15:
000a85 81ea      	LDD  R30,Y+2
000a86 93ea      	ST   -Y,R30
000a87 81ab      	LDD  R26,Y+3
000a88 940e 02a6 	CALL _kiri
000a8a 940c 01e6 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x16:
000a8c 81ea      	LDD  R30,Y+2
000a8d 93ea      	ST   -Y,R30
000a8e 81ab      	LDD  R26,Y+3
000a8f 940e 029f 	CALL _kanan
000a91 940c 01e6 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x17:
000a93 93ba      	ST   -Y,R27
000a94 93aa      	ST   -Y,R26
000a95 e2aa      	LDI  R26,LOW(_mapMirror)
000a96 e0b0      	LDI  R27,HIGH(_mapMirror)
000a97 940e 0b93 	CALL __EEPROMRDW
000a99 9730      	SBIW R30,0
000a9a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x18:
000a9b 81ea      	LDD  R30,Y+2
000a9c 81fb      	LDD  R31,Y+2+1
000a9d 93fa      	ST   -Y,R31
000a9e 93ea      	ST   -Y,R30
000a9f 81aa      	LDD  R26,Y+2
000aa0 81bb      	LDD  R27,Y+2+1
000aa1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x19:
000aa2 93ea      	ST   -Y,R30
000aa3 e0a1      	LDI  R26,LOW(1)
000aa4 940c 0938 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1A:
000aa6 93fa      	ST   -Y,R31
000aa7 93ea      	ST   -Y,R30
000aa8 eda0      	LDI  R26,LOW(2000)
000aa9 e0b7      	LDI  R27,HIGH(2000)
000aaa 940e 03ec 	CALL _scanX
000aac ede0      	LDI  R30,LOW(2000)
000aad e0f7      	LDI  R31,HIGH(2000)
000aae 93fa      	ST   -Y,R31
000aaf 93ea      	ST   -Y,R30
000ab0 eca8      	LDI  R26,LOW(200)
000ab1 e0b0      	LDI  R27,0
000ab2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1B:
000ab3 940e 094c 	CALL _lcd_clear
000ab5 e0e0      	LDI  R30,LOW(0)
000ab6 cf52      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1C:
000ab7 940e 0997 	CALL _lcd_putsf
000ab9 e0e0      	LDI  R30,LOW(0)
000aba cfe7      	RJMP SUBOPT_0x19
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1D:
000abb e0e0      	LDI  R30,LOW(0)
000abc 93e0 0184 	STS  _isChildSelect,R30
000abe e0e0      	LDI  R30,LOW(0)
000abf e0f0      	LDI  R31,HIGH(0)
000ac0 93fa      	ST   -Y,R31
000ac1 93ea      	ST   -Y,R30
000ac2 e0a0      	LDI  R26,LOW(0)
000ac3 940c 04a2 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1E:
000ac5 eea8      	LDI  R26,LOW(1000)
000ac6 e0b3      	LDI  R27,HIGH(1000)
000ac7 940c 0195 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
000ac9 940e 0997 	CALL _lcd_putsf
000acb eee8      	LDI  R30,LOW(1000)
000acc e0f3      	LDI  R31,HIGH(1000)
000acd 93fa      	ST   -Y,R31
000ace 93ea      	ST   -Y,R30
000acf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x20:
000ad0 eea8      	LDI  R26,LOW(1000)
000ad1 e0b3      	LDI  R27,HIGH(1000)
000ad2 940e 02ad 	CALL _setMotor
000ad4 eda0      	LDI  R26,LOW(2000)
000ad5 e0b7      	LDI  R27,HIGH(2000)
000ad6 940c 0ca7 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
000ad8 940e 0997 	CALL _lcd_putsf
000ada e1e8      	LDI  R30,LOW(64536)
000adb effc      	LDI  R31,HIGH(64536)
000adc 93fa      	ST   -Y,R31
000add 93ea      	ST   -Y,R30
000ade 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x22:
000adf e1a8      	LDI  R26,LOW(64536)
000ae0 efbc      	LDI  R27,HIGH(64536)
000ae1 940e 02ad 	CALL _setMotor
000ae3 eda0      	LDI  R26,LOW(2000)
000ae4 e0b7      	LDI  R27,HIGH(2000)
000ae5 940e 0ca7 	CALL _delay_ms
000ae7 e0e0      	LDI  R30,LOW(0)
000ae8 cfb9      	RJMP SUBOPT_0x19
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x23:
000ae9 e0e0      	LDI  R30,LOW(0)
000aea e0f0      	LDI  R31,HIGH(0)
000aeb 93fa      	ST   -Y,R31
000aec 93ea      	ST   -Y,R30
000aed e0a0      	LDI  R26,LOW(0)
000aee 940c 04a2 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x24:
000af0 940e 0997 	CALL _lcd_putsf
000af2 e0e0      	LDI  R30,LOW(0)
000af3 93e0 0185 	STS  _isTestTombol,R30
000af5 efa4      	LDI  R26,LOW(500)
000af6 e0b1      	LDI  R27,HIGH(500)
000af7 940c 0195 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
000af9 eca8      	LDI  R26,LOW(200)
000afa e0b0      	LDI  R27,0
000afb 940c 0195 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
000afd 91ed      	LD   R30,X+
000afe 91fd      	LD   R31,X+
000aff 9631      	ADIW R30,1
000b00 93fe      	ST   -X,R31
000b01 93ee      	ST   -X,R30
000b02 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
000b03 91e0 0182 	LDS  R30,_count_btn
000b05 91f0 0183 	LDS  R31,_count_btn+1
000b07 93fa      	ST   -Y,R31
000b08 93ea      	ST   -Y,R30
000b09 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x28:
000b0a 932a      	ST   -Y,R18
000b0b 85ad      	LDD  R26,Y+13
000b0c 85be      	LDD  R27,Y+13+1
000b0d 85ef      	LDD  R30,Y+15
000b0e 89f8      	LDD  R31,Y+15+1
000b0f 9509      	ICALL
000b10 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x29:
000b11 89e8      	LDD  R30,Y+16
000b12 89f9      	LDD  R31,Y+16+1
000b13 9734      	SBIW R30,4
000b14 8be8      	STD  Y+16,R30
000b15 8bf9      	STD  Y+16+1,R31
000b16 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2A:
000b17 85ad      	LDD  R26,Y+13
000b18 85be      	LDD  R27,Y+13+1
000b19 85ef      	LDD  R30,Y+15
000b1a 89f8      	LDD  R31,Y+15+1
000b1b 9509      	ICALL
000b1c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2B:
000b1d 89a8      	LDD  R26,Y+16
000b1e 89b9      	LDD  R27,Y+16+1
000b1f 9614      	ADIW R26,4
000b20 91ed      	LD   R30,X+
000b21 91fd      	LD   R31,X+
000b22 83ee      	STD  Y+6,R30
000b23 83ff      	STD  Y+6+1,R31
000b24 81ae      	LDD  R26,Y+6
000b25 81bf      	LDD  R27,Y+6+1
000b26 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2C:
000b27 940e 09aa 	CALL __long_delay_G103
000b29 e3a0      	LDI  R26,LOW(48)
000b2a 940c 09af 	JMP  __lcd_init_write_G103
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2D:
000b2c 940e 0917 	CALL __lcd_write_data
000b2e 940c 09aa 	JMP  __long_delay_G103
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000b30 935a      	ST   -Y,R21
                 __SAVELOCR5:
000b31 934a      	ST   -Y,R20
                 __SAVELOCR4:
000b32 933a      	ST   -Y,R19
                 __SAVELOCR3:
000b33 932a      	ST   -Y,R18
                 __SAVELOCR2:
000b34 931a      	ST   -Y,R17
000b35 930a      	ST   -Y,R16
000b36 9508      	RET
                 
                 __LOADLOCR6:
000b37 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000b38 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000b39 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000b3a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000b3b 8119      	LDD  R17,Y+1
000b3c 8108      	LD   R16,Y
000b3d 9508      	RET
                 
                 __ADDW2R15:
000b3e 2400      	CLR  R0
000b3f 0daf      	ADD  R26,R15
000b40 1db0      	ADC  R27,R0
000b41 9508      	RET
                 
                 __ANEGW1:
000b42 95f1      	NEG  R31
000b43 95e1      	NEG  R30
000b44 40f0      	SBCI R31,0
000b45 9508      	RET
                 
                 __ANEGD1:
000b46 95f0      	COM  R31
000b47 9560      	COM  R22
000b48 9570      	COM  R23
000b49 95e1      	NEG  R30
000b4a 4fff      	SBCI R31,-1
000b4b 4f6f      	SBCI R22,-1
000b4c 4f7f      	SBCI R23,-1
000b4d 9508      	RET
                 
                 __CWD1:
000b4e 2f6f      	MOV  R22,R31
000b4f 0f66      	ADD  R22,R22
000b50 0b66      	SBC  R22,R22
000b51 2f76      	MOV  R23,R22
000b52 9508      	RET
                 
                 __MULW12U:
000b53 9ffa      	MUL  R31,R26
000b54 2df0      	MOV  R31,R0
000b55 9feb      	MUL  R30,R27
000b56 0df0      	ADD  R31,R0
000b57 9fea      	MUL  R30,R26
000b58 2de0      	MOV  R30,R0
000b59 0df1      	ADD  R31,R1
000b5a 9508      	RET
                 
                 __MULW12:
000b5b d01c      	RCALL __CHKSIGNW
000b5c dff6      	RCALL __MULW12U
000b5d f40e      	BRTC __MULW121
000b5e dfe3      	RCALL __ANEGW1
                 __MULW121:
000b5f 9508      	RET
                 
                 __DIVW21U:
000b60 2400      	CLR  R0
000b61 2411      	CLR  R1
000b62 e190      	LDI  R25,16
                 __DIVW21U1:
000b63 0faa      	LSL  R26
000b64 1fbb      	ROL  R27
000b65 1c00      	ROL  R0
000b66 1c11      	ROL  R1
000b67 1a0e      	SUB  R0,R30
000b68 0a1f      	SBC  R1,R31
000b69 f418      	BRCC __DIVW21U2
000b6a 0e0e      	ADD  R0,R30
000b6b 1e1f      	ADC  R1,R31
000b6c c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000b6d 60a1      	SBR  R26,1
                 __DIVW21U3:
000b6e 959a      	DEC  R25
000b6f f799      	BRNE __DIVW21U1
000b70 01fd      	MOVW R30,R26
000b71 01d0      	MOVW R26,R0
000b72 9508      	RET
                 
                 __DIVW21:
000b73 d004      	RCALL __CHKSIGNW
000b74 dfeb      	RCALL __DIVW21U
000b75 f40e      	BRTC __DIVW211
000b76 dfcb      	RCALL __ANEGW1
                 __DIVW211:
000b77 9508      	RET
                 
                 __CHKSIGNW:
000b78 94e8      	CLT
000b79 fff7      	SBRS R31,7
000b7a c002      	RJMP __CHKSW1
000b7b dfc6      	RCALL __ANEGW1
000b7c 9468      	SET
                 __CHKSW1:
000b7d ffb7      	SBRS R27,7
000b7e c006      	RJMP __CHKSW2
000b7f 95b1      	NEG  R27
000b80 95a1      	NEG  R26
000b81 40b0      	SBCI R27,0
000b82 f800      	BLD  R0,0
000b83 9403      	INC  R0
000b84 fa00      	BST  R0,0
                 __CHKSW2:
000b85 9508      	RET
                 
                 __GETW1P:
000b86 91ed      	LD   R30,X+
000b87 91fc      	LD   R31,X
000b88 9711      	SBIW R26,1
000b89 9508      	RET
                 
                 __GETW1PF:
000b8a 9005      	LPM  R0,Z+
000b8b 91f4      	LPM  R31,Z
000b8c 2de0      	MOV  R30,R0
000b8d 9508      	RET
                 
                 __PUTPARD1:
000b8e 937a      	ST   -Y,R23
000b8f 936a      	ST   -Y,R22
000b90 93fa      	ST   -Y,R31
000b91 93ea      	ST   -Y,R30
000b92 9508      	RET
                 
                 __EEPROMRDW:
000b93 9611      	ADIW R26,1
000b94 d002      	RCALL __EEPROMRDB
000b95 2ffe      	MOV  R31,R30
000b96 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000b97 99e1      	SBIC EECR,EEWE
000b98 cffe      	RJMP __EEPROMRDB
000b99 93ff      	PUSH R31
000b9a b7ff      	IN   R31,SREG
000b9b 94f8      	CLI
000b9c bbae      	OUT  EEARL,R26
000b9d bbbf      	OUT  EEARH,R27
000b9e 9ae0      	SBI  EECR,EERE
000b9f b3ed      	IN   R30,EEDR
000ba0 bfff      	OUT  SREG,R31
000ba1 91ff      	POP  R31
000ba2 9508      	RET
                 
                 __EEPROMWRW:
000ba3 d007      	RCALL __EEPROMWRB
000ba4 9611      	ADIW R26,1
000ba5 93ef      	PUSH R30
000ba6 2fef      	MOV  R30,R31
000ba7 d003      	RCALL __EEPROMWRB
000ba8 91ef      	POP  R30
000ba9 9711      	SBIW R26,1
000baa 9508      	RET
                 
                 __EEPROMWRB:
000bab 9be1      	SBIS EECR,EEWE
000bac c002      	RJMP __EEPROMWRB1
000bad 95a8      	WDR
000bae cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000baf b79f      	IN   R25,SREG
000bb0 94f8      	CLI
000bb1 bbae      	OUT  EEARL,R26
000bb2 bbbf      	OUT  EEARH,R27
000bb3 9ae0      	SBI  EECR,EERE
000bb4 b38d      	IN   R24,EEDR
000bb5 17e8      	CP   R30,R24
000bb6 f019      	BREQ __EEPROMWRB0
000bb7 bbed      	OUT  EEDR,R30
000bb8 9ae2      	SBI  EECR,EEMWE
000bb9 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000bba bf9f      	OUT  SREG,R25
000bbb 9508      	RET
                 
                 __CPW02:
000bbc 2400      	CLR  R0
000bbd 160a      	CP   R0,R26
000bbe 060b      	CPC  R0,R27
000bbf 9508      	RET
                 
                 __ANEGF1:
000bc0 9730      	SBIW R30,0
000bc1 4060      	SBCI R22,0
000bc2 4070      	SBCI R23,0
000bc3 f009      	BREQ __ANEGF10
000bc4 5870      	SUBI R23,0x80
                 __ANEGF10:
000bc5 9508      	RET
                 
                 __ROUND_REPACK:
000bc6 2355      	TST  R21
000bc7 f442      	BRPL __REPACK
000bc8 3850      	CPI  R21,0x80
000bc9 f411      	BRNE __ROUND_REPACK0
000bca ffe0      	SBRS R30,0
000bcb c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000bcc 9631      	ADIW R30,1
000bcd 1f69      	ADC  R22,R25
000bce 1f79      	ADC  R23,R25
000bcf f06b      	BRVS __REPACK1
                 
                 __REPACK:
000bd0 e850      	LDI  R21,0x80
000bd1 2757      	EOR  R21,R23
000bd2 f411      	BRNE __REPACK0
000bd3 935f      	PUSH R21
000bd4 c073      	RJMP __ZERORES
                 __REPACK0:
000bd5 3f5f      	CPI  R21,0xFF
000bd6 f031      	BREQ __REPACK1
000bd7 0f66      	LSL  R22
000bd8 0c00      	LSL  R0
000bd9 9557      	ROR  R21
000bda 9567      	ROR  R22
000bdb 2f75      	MOV  R23,R21
000bdc 9508      	RET
                 __REPACK1:
000bdd 935f      	PUSH R21
000bde 2000      	TST  R0
000bdf f00a      	BRMI __REPACK2
000be0 c072      	RJMP __MAXRES
                 __REPACK2:
000be1 c06b      	RJMP __MINRES
                 
                 __UNPACK:
000be2 e850      	LDI  R21,0x80
000be3 2e19      	MOV  R1,R25
000be4 2215      	AND  R1,R21
000be5 0f88      	LSL  R24
000be6 1f99      	ROL  R25
000be7 2795      	EOR  R25,R21
000be8 0f55      	LSL  R21
000be9 9587      	ROR  R24
                 
                 __UNPACK1:
000bea e850      	LDI  R21,0x80
000beb 2e07      	MOV  R0,R23
000bec 2205      	AND  R0,R21
000bed 0f66      	LSL  R22
000bee 1f77      	ROL  R23
000bef 2775      	EOR  R23,R21
000bf0 0f55      	LSL  R21
000bf1 9567      	ROR  R22
000bf2 9508      	RET
                 
                 __CFD1U:
000bf3 9468      	SET
000bf4 c001      	RJMP __CFD1U0
                 __CFD1:
000bf5 94e8      	CLT
                 __CFD1U0:
000bf6 935f      	PUSH R21
000bf7 dff2      	RCALL __UNPACK1
000bf8 3870      	CPI  R23,0x80
000bf9 f018      	BRLO __CFD10
000bfa 3f7f      	CPI  R23,0xFF
000bfb f408      	BRCC __CFD10
000bfc c04b      	RJMP __ZERORES
                 __CFD10:
000bfd e156      	LDI  R21,22
000bfe 1b57      	SUB  R21,R23
000bff f4aa      	BRPL __CFD11
000c00 9551      	NEG  R21
000c01 3058      	CPI  R21,8
000c02 f40e      	BRTC __CFD19
000c03 3059      	CPI  R21,9
                 __CFD19:
000c04 f030      	BRLO __CFD17
000c05 efef      	SER  R30
000c06 efff      	SER  R31
000c07 ef6f      	SER  R22
000c08 e77f      	LDI  R23,0x7F
000c09 f977      	BLD  R23,7
000c0a c01a      	RJMP __CFD15
                 __CFD17:
000c0b 2777      	CLR  R23
000c0c 2355      	TST  R21
000c0d f0b9      	BREQ __CFD15
                 __CFD18:
000c0e 0fee      	LSL  R30
000c0f 1fff      	ROL  R31
000c10 1f66      	ROL  R22
000c11 1f77      	ROL  R23
000c12 955a      	DEC  R21
000c13 f7d1      	BRNE __CFD18
000c14 c010      	RJMP __CFD15
                 __CFD11:
000c15 2777      	CLR  R23
                 __CFD12:
000c16 3058      	CPI  R21,8
000c17 f028      	BRLO __CFD13
000c18 2fef      	MOV  R30,R31
000c19 2ff6      	MOV  R31,R22
000c1a 2f67      	MOV  R22,R23
000c1b 5058      	SUBI R21,8
000c1c cff9      	RJMP __CFD12
                 __CFD13:
000c1d 2355      	TST  R21
000c1e f031      	BREQ __CFD15
                 __CFD14:
000c1f 9576      	LSR  R23
000c20 9567      	ROR  R22
000c21 95f7      	ROR  R31
000c22 95e7      	ROR  R30
000c23 955a      	DEC  R21
000c24 f7d1      	BRNE __CFD14
                 __CFD15:
000c25 2000      	TST  R0
000c26 f40a      	BRPL __CFD16
000c27 df1e      	RCALL __ANEGD1
                 __CFD16:
000c28 915f      	POP  R21
000c29 9508      	RET
                 
                 __CDF1U:
000c2a 9468      	SET
000c2b c001      	RJMP __CDF1U0
                 __CDF1:
000c2c 94e8      	CLT
                 __CDF1U0:
000c2d 9730      	SBIW R30,0
000c2e 4060      	SBCI R22,0
000c2f 4070      	SBCI R23,0
000c30 f0b1      	BREQ __CDF10
000c31 2400      	CLR  R0
000c32 f026      	BRTS __CDF11
000c33 2377      	TST  R23
000c34 f412      	BRPL __CDF11
000c35 9400      	COM  R0
000c36 df0f      	RCALL __ANEGD1
                 __CDF11:
000c37 2e17      	MOV  R1,R23
000c38 e17e      	LDI  R23,30
000c39 2011      	TST  R1
                 __CDF12:
000c3a f032      	BRMI __CDF13
000c3b 957a      	DEC  R23
000c3c 0fee      	LSL  R30
000c3d 1fff      	ROL  R31
000c3e 1f66      	ROL  R22
000c3f 1c11      	ROL  R1
000c40 cff9      	RJMP __CDF12
                 __CDF13:
000c41 2fef      	MOV  R30,R31
000c42 2ff6      	MOV  R31,R22
000c43 2d61      	MOV  R22,R1
000c44 935f      	PUSH R21
000c45 df8a      	RCALL __REPACK
000c46 915f      	POP  R21
                 __CDF10:
000c47 9508      	RET
                 
                 __ZERORES:
000c48 27ee      	CLR  R30
000c49 27ff      	CLR  R31
000c4a 01bf      	MOVW R22,R30
000c4b 915f      	POP  R21
000c4c 9508      	RET
                 
                 __MINRES:
000c4d efef      	SER  R30
000c4e efff      	SER  R31
000c4f e76f      	LDI  R22,0x7F
000c50 ef7f      	SER  R23
000c51 915f      	POP  R21
000c52 9508      	RET
                 
                 __MAXRES:
000c53 efef      	SER  R30
000c54 efff      	SER  R31
000c55 e76f      	LDI  R22,0x7F
000c56 e77f      	LDI  R23,0x7F
000c57 915f      	POP  R21
000c58 9508      	RET
                 
                 __MULF12:
000c59 935f      	PUSH R21
000c5a df87      	RCALL __UNPACK
000c5b 3870      	CPI  R23,0x80
000c5c f359      	BREQ __ZERORES
000c5d 3890      	CPI  R25,0x80
000c5e f349      	BREQ __ZERORES
000c5f 2401      	EOR  R0,R1
000c60 9408      	SEC
000c61 1f79      	ADC  R23,R25
000c62 f423      	BRVC __MULF124
000c63 f324      	BRLT __ZERORES
                 __MULF125:
000c64 2000      	TST  R0
000c65 f33a      	BRMI __MINRES
000c66 cfec      	RJMP __MAXRES
                 __MULF124:
000c67 920f      	PUSH R0
000c68 931f      	PUSH R17
000c69 932f      	PUSH R18
000c6a 933f      	PUSH R19
000c6b 934f      	PUSH R20
000c6c 2711      	CLR  R17
000c6d 2722      	CLR  R18
000c6e 2799      	CLR  R25
000c6f 9f68      	MUL  R22,R24
000c70 01a0      	MOVW R20,R0
000c71 9f8f      	MUL  R24,R31
000c72 2d30      	MOV  R19,R0
000c73 0d41      	ADD  R20,R1
000c74 1f59      	ADC  R21,R25
000c75 9f6b      	MUL  R22,R27
000c76 0d30      	ADD  R19,R0
000c77 1d41      	ADC  R20,R1
000c78 1f59      	ADC  R21,R25
000c79 9f8e      	MUL  R24,R30
000c7a d027      	RCALL __MULF126
000c7b 9fbf      	MUL  R27,R31
000c7c d025      	RCALL __MULF126
000c7d 9f6a      	MUL  R22,R26
000c7e d023      	RCALL __MULF126
000c7f 9fbe      	MUL  R27,R30
000c80 d01d      	RCALL __MULF127
000c81 9faf      	MUL  R26,R31
000c82 d01b      	RCALL __MULF127
000c83 9fae      	MUL  R26,R30
000c84 0d11      	ADD  R17,R1
000c85 1f29      	ADC  R18,R25
000c86 1f39      	ADC  R19,R25
000c87 1f49      	ADC  R20,R25
000c88 1f59      	ADC  R21,R25
000c89 2fe3      	MOV  R30,R19
000c8a 2ff4      	MOV  R31,R20
000c8b 2f65      	MOV  R22,R21
000c8c 2f52      	MOV  R21,R18
000c8d 914f      	POP  R20
000c8e 913f      	POP  R19
000c8f 912f      	POP  R18
000c90 911f      	POP  R17
000c91 900f      	POP  R0
000c92 2366      	TST  R22
000c93 f02a      	BRMI __MULF122
000c94 0f55      	LSL  R21
000c95 1fee      	ROL  R30
000c96 1fff      	ROL  R31
000c97 1f66      	ROL  R22
000c98 c002      	RJMP __MULF123
                 __MULF122:
000c99 9573      	INC  R23
000c9a f24b      	BRVS __MULF125
                 __MULF123:
000c9b df2a      	RCALL __ROUND_REPACK
000c9c 915f      	POP  R21
000c9d 9508      	RET
                 
                 __MULF127:
000c9e 0d10      	ADD  R17,R0
000c9f 1d21      	ADC  R18,R1
000ca0 1f39      	ADC  R19,R25
000ca1 c002      	RJMP __MULF128
                 __MULF126:
000ca2 0d20      	ADD  R18,R0
000ca3 1d31      	ADC  R19,R1
                 __MULF128:
000ca4 1f49      	ADC  R20,R25
000ca5 1f59      	ADC  R21,R25
000ca6 9508      	RET
                 
                 _delay_ms:
000ca7 9610      	adiw r26,0
000ca8 f039      	breq __delay_ms1
                 __delay_ms0:
000ca9 95a8      	wdr
                +
000caa ec8d     +LDI R24 , LOW ( 0xACD )
000cab e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000cac 9701     +SBIW R24 , 1
000cad f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
000cae 9711      	sbiw r26,1
000caf f7c9      	brne __delay_ms0
                 __delay_ms1:
000cb0 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  48 r1 :  18 r2 :   0 r3 :   0 r4 :   4 r5 :   2 r6 :   2 r7 :   1 
r8 :  25 r9 :   7 r10:   0 r11:   0 r12:   6 r13:   7 r14:   0 r15:   4 
r16:  36 r17:  32 r18:  38 r19:  17 r20:  23 r21:  66 r22:  46 r23:  37 
r24:  24 r25:  27 r26: 346 r27: 182 r28:  23 r29:   1 r30: 587 r31: 228 
x  :  32 y  : 314 z  :  16 
Registers used: 30 out of 35 (85.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  30 add   :  25 
adiw  :  42 and   :   2 andi  :  14 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  46 
brge  :  14 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  13 
brlt  :   3 brmi  :   5 brne  :  68 brpl  :   6 brsh  :   2 brtc  :   3 
brts  :   2 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  : 286 
cbi   :  29 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  36 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   6 
cp    :  16 cpc   :  32 cpi   :  92 cpse  :   0 dec   :   6 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  15 inc   :   2 jmp   :  39 ld    :  63 ldd   : 119 ldi   : 409 
lds   :  70 lpm   :  16 lsl   :  15 lsr   :   1 mov   :  54 movw  :  49 
mul   :  16 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   2 
ori   :   9 out   :  67 pop   :  20 push  :  19 rcall :  87 ret   :  92 
reti  :   2 rjmp  : 160 rol   :  19 ror   :   7 sbc   :   5 sbci  :  10 
sbi   :  30 sbic  :   8 sbis  :   2 sbiw  :  32 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 124 std   :  43 sts   :  34 sub   :   5 subi  :  21 swap  :   2 
tst   :  13 wdr   :   2 
Instructions used: 78 out of 116 (67.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001962   5890    608   6498   16384  39.7%
[.dseg] 0x000060 0x0001b8      0     88     88    1024   8.6%
[.eseg] 0x000000 0x00002c      0     44     44     512   8.6%

Assembly complete, 0 errors, 23 warnings
